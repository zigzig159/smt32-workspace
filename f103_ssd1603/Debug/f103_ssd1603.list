
f103_ssd1603.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001414  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fcc  08004fcc  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fcc  08004fcc  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004fd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000006c  08005040  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08005040  000066b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf8  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  00011b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00013ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f9  00000000  00000000  00014a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185f8  00000000  00000000  00015361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001020e  00000000  00000000  0002d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a013  00000000  00000000  0003db67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  000c7bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000caf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ba0 	.word	0x08003ba0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003ba0 	.word	0x08003ba0

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fe7b 	bl	8000e84 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa09 	bl	80005aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 f92f 	bl	800140c <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f9f9 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000088 	.word	0x20000088
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	@ (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fb68 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000254:	4b27      	ldr	r3, [pc, #156]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a26      	ldr	r2, [pc, #152]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b24      	ldr	r3, [pc, #144]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0320 	and.w	r3, r3, #32
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b21      	ldr	r3, [pc, #132]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a20      	ldr	r2, [pc, #128]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b1e      	ldr	r3, [pc, #120]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a1a      	ldr	r2, [pc, #104]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_GPIO_Init+0xb4>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2106      	movs	r1, #6
 80002a0:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <MX_GPIO_Init+0xb8>)
 80002a2:	f001 fcaf 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002ac:	4812      	ldr	r0, [pc, #72]	@ (80002f8 <MX_GPIO_Init+0xb8>)
 80002ae:	f001 fca9 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80002b2:	2306      	movs	r3, #6
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <MX_GPIO_Init+0xb8>)
 80002ca:	f001 fb17 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80002d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	2301      	movs	r3, #1
 80002d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002dc:	2302      	movs	r3, #2
 80002de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_GPIO_Init+0xb8>)
 80002e8:	f001 fb08 	bl	80018fc <HAL_GPIO_Init>

}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800

080002fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	@ (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	@ (800034c <MX_I2C1_Init+0x50>)
 800033a:	f001 fc7b 	bl	8001c34 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f931 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200000b8 	.word	0x200000b8
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <HAL_I2C_MspInit+0x70>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d123      	bne.n	80003c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a13      	ldr	r2, [pc, #76]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000390:	23c0      	movs	r3, #192	@ 0xc0
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000394:	2312      	movs	r3, #18
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <HAL_I2C_MspInit+0x78>)
 80003a4:	f001 faaa 	bl	80018fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003b2:	61d3      	str	r3, [r2, #28]
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40005400 	.word	0x40005400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09a      	sub	sp, #104	@ 0x68
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fccd 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f88b 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f7ff ff2d 	bl	8000240 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003e6:	f7ff ff89 	bl	80002fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003ea:	f000 f97f 	bl	80006ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80003ee:	f7ff fead 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_init();
 80003f2:	f000 fb26 	bl	8000a42 <ssd1306_init>

  ssd1306_set_cursor(5, 0);
 80003f6:	2100      	movs	r1, #0
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fc91 	bl	8000d20 <ssd1306_set_cursor>

  ssd1306_write_string(font6x8, "Rotech ssd1603");
 80003fe:	4b35      	ldr	r3, [pc, #212]	@ (80004d4 <main+0x100>)
 8000400:	4a35      	ldr	r2, [pc, #212]	@ (80004d8 <main+0x104>)
 8000402:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000406:	f000 fc59 	bl	8000cbc <ssd1306_write_string>
  ssd1306_enter();
 800040a:	f000 fc9f 	bl	8000d4c <ssd1306_enter>
  ssd1306_set_cursor(5, 8);
 800040e:	2108      	movs	r1, #8
 8000410:	2005      	movs	r0, #5
 8000412:	f000 fc85 	bl	8000d20 <ssd1306_set_cursor>
  ssd1306_write_string(font6x8, "revolution 1.0");
 8000416:	4b2f      	ldr	r3, [pc, #188]	@ (80004d4 <main+0x100>)
 8000418:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <main+0x108>)
 800041a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800041e:	f000 fc4d 	bl	8000cbc <ssd1306_write_string>

  ssd1306_set_cursor(5, 24);
 8000422:	2118      	movs	r1, #24
 8000424:	2005      	movs	r0, #5
 8000426:	f000 fc7b 	bl	8000d20 <ssd1306_set_cursor>
  ssd1306_write_string(font6x8, "build BY JANG");
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <main+0x100>)
 800042c:	4a2c      	ldr	r2, [pc, #176]	@ (80004e0 <main+0x10c>)
 800042e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000432:	f000 fc43 	bl	8000cbc <ssd1306_write_string>

  ssd1306_set_cursor(5, 40);
 8000436:	2128      	movs	r1, #40	@ 0x28
 8000438:	2005      	movs	r0, #5
 800043a:	f000 fc71 	bl	8000d20 <ssd1306_set_cursor>
  ssd1306_write_string(font11x18, "            ");
 800043e:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <main+0x110>)
 8000440:	4a29      	ldr	r2, [pc, #164]	@ (80004e8 <main+0x114>)
 8000442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000446:	f000 fc39 	bl	8000cbc <ssd1306_write_string>
  ssd1306_update_screen();
 800044a:	f000 fb27 	bl	8000a9c <ssd1306_update_screen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
       HAL_ADC_Start(&hadc1);
 800044e:	4827      	ldr	r0, [pc, #156]	@ (80004ec <main+0x118>)
 8000450:	f000 fdf0 	bl	8001034 <HAL_ADC_Start>
       HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000454:	f04f 31ff 	mov.w	r1, #4294967295
 8000458:	4824      	ldr	r0, [pc, #144]	@ (80004ec <main+0x118>)
 800045a:	f000 fec5 	bl	80011e8 <HAL_ADC_PollForConversion>
       value = HAL_ADC_GetValue(&hadc1);
 800045e:	4823      	ldr	r0, [pc, #140]	@ (80004ec <main+0x118>)
 8000460:	f000 ffc8 	bl	80013f4 <HAL_ADC_GetValue>
 8000464:	4603      	mov	r3, r0
 8000466:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
       HAL_ADC_Stop(&hadc1);
 800046a:	4820      	ldr	r0, [pc, #128]	@ (80004ec <main+0x118>)
 800046c:	f000 fe90 	bl	8001190 <HAL_ADC_Stop>

       vout = 5002 * value / (4700 + value);
 8000470:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000474:	f241 328a 	movw	r2, #5002	@ 0x138a
 8000478:	fb03 f202 	mul.w	r2, r3, r2
 800047c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000480:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 8000484:	331c      	adds	r3, #28
 8000486:	fb92 f3f3 	sdiv	r3, r2, r3
 800048a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
       //temp = (float)vout / 10.0;

       HAL_Delay(100);
 800048e:	2064      	movs	r0, #100	@ 0x64
 8000490:	f000 fcd4 	bl	8000e3c <HAL_Delay>

       sprintf(buf, "ADC:%d", value);
 8000494:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8000498:	463b      	mov	r3, r7
 800049a:	4915      	ldr	r1, [pc, #84]	@ (80004f0 <main+0x11c>)
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fecf 	bl	8003240 <siprintf>

       ssd1306_set_cursor(5, 40);
 80004a2:	2128      	movs	r1, #40	@ 0x28
 80004a4:	2005      	movs	r0, #5
 80004a6:	f000 fc3b 	bl	8000d20 <ssd1306_set_cursor>
       ssd1306_write_string(font11x18, "         ");
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <main+0x110>)
 80004ac:	4a11      	ldr	r2, [pc, #68]	@ (80004f4 <main+0x120>)
 80004ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004b2:	f000 fc03 	bl	8000cbc <ssd1306_write_string>
       ssd1306_set_cursor(5, 40);
 80004b6:	2128      	movs	r1, #40	@ 0x28
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 fc31 	bl	8000d20 <ssd1306_set_cursor>
       ssd1306_write_string(font11x18, buf);
 80004be:	463b      	mov	r3, r7
 80004c0:	4908      	ldr	r1, [pc, #32]	@ (80004e4 <main+0x110>)
 80004c2:	461a      	mov	r2, r3
 80004c4:	c903      	ldmia	r1, {r0, r1}
 80004c6:	f000 fbf9 	bl	8000cbc <ssd1306_write_string>
       ssd1306_update_screen();
 80004ca:	f000 fae7 	bl	8000a9c <ssd1306_update_screen>
       HAL_ADC_Start(&hadc1);
 80004ce:	bf00      	nop
 80004d0:	e7bd      	b.n	800044e <main+0x7a>
 80004d2:	bf00      	nop
 80004d4:	20000004 	.word	0x20000004
 80004d8:	08003bb8 	.word	0x08003bb8
 80004dc:	08003bc8 	.word	0x08003bc8
 80004e0:	08003bd8 	.word	0x08003bd8
 80004e4:	2000000c 	.word	0x2000000c
 80004e8:	08003be8 	.word	0x08003be8
 80004ec:	20000088 	.word	0x20000088
 80004f0:	08003bf8 	.word	0x08003bf8
 80004f4:	08003c00 	.word	0x08003c00

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000502:	2228      	movs	r2, #40	@ 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 feba 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	2301      	movs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000542:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000544:	2300      	movs	r3, #0
 8000546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800054c:	4618      	mov	r0, r3
 800054e:	f002 f81d 	bl	800258c <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000558:	f000 f827 	bl	80005aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800056c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fa89 	bl	8002a90 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000584:	f000 f811 	bl	80005aa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000588:	2302      	movs	r3, #2
 800058a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fc0a 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800059e:	f000 f804 	bl	80005aa <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3750      	adds	r7, #80	@ 0x50
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
}
 80005b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 fbca 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f002 fdf4 	bl	8003290 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20005000 	.word	0x20005000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	2000010c 	.word	0x2000010c
 80006dc:	200006b0 	.word	0x200006b0

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <MX_USART1_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000724:	f002 fcae 	bl	8003084 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f7ff ff3c 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000110 	.word	0x20000110
 800073c:	40013800 	.word	0x40013800

08000740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <HAL_UART_MspInit+0x8c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d131      	bne.n	80007c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a1a      	ldr	r2, [pc, #104]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_UART_MspInit+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <HAL_UART_MspInit+0x94>)
 80007a6:	f001 f8a9 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <HAL_UART_MspInit+0x94>)
 80007c0:	f001 f89c 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40013800 	.word	0x40013800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800

080007d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff ff82 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007de:	490c      	ldr	r1, [pc, #48]	@ (8000810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f4:	4c09      	ldr	r4, [pc, #36]	@ (800081c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f002 fd4b 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fde5 	bl	80003d4 <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000814:	08004fd4 	.word	0x08004fd4
  ldr r2, =_sbss
 8000818:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800081c:	200006b0 	.word	0x200006b0

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af04      	add	r7, sp, #16
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 800082e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2301      	movs	r3, #1
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	2200      	movs	r2, #0
 8000840:	2178      	movs	r1, #120	@ 0x78
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <ssd1306_write_command+0x2c>)
 8000844:	f001 fb3a 	bl	8001ebc <HAL_I2C_Mem_Write>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000b8 	.word	0x200000b8

08000854 <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af04      	add	r7, sp, #16
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 8000860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2240      	movs	r2, #64	@ 0x40
 8000872:	2178      	movs	r1, #120	@ 0x78
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <ssd1306_write_data+0x30>)
 8000876:	f001 fb21 	bl	8001ebc <HAL_I2C_Mem_Write>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000b8 	.word	0x200000b8

08000888 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8000892:	208d      	movs	r0, #141	@ 0x8d
 8000894:	f7ff ffc6 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffc2 	bl	8000824 <ssd1306_write_command>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 80008b2:	2081      	movs	r0, #129	@ 0x81
 80008b4:	f7ff ffb6 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(value);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffb2 	bl	8000824 <ssd1306_write_command>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <entire_display_off>:

void entire_display_off()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 80008cc:	20a4      	movs	r0, #164	@ 0xa4
 80008ce:	f7ff ffa9 	bl	8000824 <ssd1306_write_command>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 80008da:	20a6      	movs	r0, #166	@ 0xa6
 80008dc:	f7ff ffa2 	bl	8000824 <ssd1306_write_command>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 80008e8:	20af      	movs	r0, #175	@ 0xaf
 80008ea:	f7ff ff9b 	bl	8000824 <ssd1306_write_command>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff90 	bl	8000824 <ssd1306_write_command>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff83 	bl	8000824 <ssd1306_write_command>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff76 	bl	8000824 <ssd1306_write_command>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff69 	bl	8000824 <ssd1306_write_command>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff5c 	bl	8000824 <ssd1306_write_command>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 800097e:	20a8      	movs	r0, #168	@ 0xa8
 8000980:	f7ff ff50 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(mux);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff4c 	bl	8000824 <ssd1306_write_command>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff3f 	bl	8000824 <ssd1306_write_command>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 80009b8:	20d3      	movs	r0, #211	@ 0xd3
 80009ba:	f7ff ff33 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff2f 	bl	8000824 <ssd1306_write_command>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	460a      	mov	r2, r1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	4613      	mov	r3, r2
 80009dc:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	b25a      	sxtb	r2, r3
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 80009f6:	20da      	movs	r0, #218	@ 0xda
 80009f8:	f7ff ff14 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff10 	bl	8000824 <ssd1306_write_command>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 8000a2c:	20d5      	movs	r0, #213	@ 0xd5
 8000a2e:	f7ff fef9 	bl	8000824 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fef5 	bl	8000824 <ssd1306_write_command>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 8000a46:	203f      	movs	r0, #63	@ 0x3f
 8000a48:	f7ff ff94 	bl	8000974 <set_multiplex_ratio>

    set_display_offset(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff ffae 	bl	80009ae <set_display_offset>

    set_display_start_line(0x40);
 8000a52:	2040      	movs	r0, #64	@ 0x40
 8000a54:	f7ff ff74 	bl	8000940 <set_display_start_line>

    set_segment_remap(0xA1);
 8000a58:	20a1      	movs	r0, #161	@ 0xa1
 8000a5a:	f7ff ff7e 	bl	800095a <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 8000a5e:	20c8      	movs	r0, #200	@ 0xc8
 8000a60:	f7ff ff98 	bl	8000994 <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ffb1 	bl	80009ce <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 8000a6c:	207f      	movs	r0, #127	@ 0x7f
 8000a6e:	f7ff ff1b 	bl	80008a8 <set_contrast_control>

    entire_display_off();
 8000a72:	f7ff ff29 	bl	80008c8 <entire_display_off>

    set_normal_display();
 8000a76:	f7ff ff2e 	bl	80008d6 <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ffc5 	bl	8000a0c <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f7ff ff00 	bl	8000888 <charge_bump_setting>

    set_display_on();
 8000a88:	f7ff ff2c 	bl	80008e4 <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 8000a8c:	f000 f82e 	bl	8000aec <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f944 	bl	8000d20 <ssd1306_set_cursor>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	e017      	b.n	8000ad8 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	3b50      	subs	r3, #80	@ 0x50
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff38 	bl	8000926 <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ff1b 	bl	80008f2 <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 8000abc:	2010      	movs	r0, #16
 8000abe:	f7ff ff25 	bl	800090c <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	01db      	lsls	r3, r3, #7
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <ssd1306_update_screen+0x4c>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fec1 	bl	8000854 <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	dde4      	ble.n	8000aa8 <ssd1306_update_screen+0xc>
    }
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000158 	.word	0x20000158

08000aec <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	e007      	b.n	8000b08 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <ssd1306_black_screen+0x30>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b0e:	dbf3      	blt.n	8000af8 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8000b10:	f7ff ffc4 	bl	8000a9c <ssd1306_update_screen>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000158 	.word	0x20000158

08000b20 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	b2d8      	uxtb	r0, r3
 8000b38:	4603      	mov	r3, r0
 8000b3a:	01db      	lsls	r3, r3, #7
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <ssd1306_black_pixel+0x54>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	b25a      	sxtb	r2, r3
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	4013      	ands	r3, r2
 8000b58:	b259      	sxtb	r1, r3
 8000b5a:	79fa      	ldrb	r2, [r7, #7]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	4413      	add	r3, r2
 8000b62:	b2c9      	uxtb	r1, r1
 8000b64:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <ssd1306_black_pixel+0x54>)
 8000b66:	54d1      	strb	r1, [r2, r3]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000158 	.word	0x20000158

08000b78 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b88:	79fa      	ldrb	r2, [r7, #7]
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	b2d8      	uxtb	r0, r3
 8000b90:	4603      	mov	r3, r0
 8000b92:	01db      	lsls	r3, r3, #7
 8000b94:	4413      	add	r3, r2
 8000b96:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <ssd1306_white_pixel+0x50>)
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	b25a      	sxtb	r2, r3
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b259      	sxtb	r1, r3
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	01db      	lsls	r3, r3, #7
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	4a03      	ldr	r2, [pc, #12]	@ (8000bc8 <ssd1306_white_pixel+0x50>)
 8000bba:	54d1      	strb	r1, [r2, r3]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000158 	.word	0x20000158

08000bcc <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bda:	4613      	mov	r3, r2
 8000bdc:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	d902      	bls.n	8000bea <ssd1306_write_char+0x1e>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b7e      	cmp	r3, #126	@ 0x7e
 8000be8:	d901      	bls.n	8000bee <ssd1306_write_char+0x22>
        return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e060      	b.n	8000cb0 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 8000bee:	4b32      	ldr	r3, [pc, #200]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	7a3b      	ldrb	r3, [r7, #8]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	2b80      	cmp	r3, #128	@ 0x80
 8000bfa:	dc06      	bgt.n	8000c0a <ssd1306_write_char+0x3e>
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	461a      	mov	r2, r3
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	4413      	add	r3, r2
 8000c06:	2b40      	cmp	r3, #64	@ 0x40
 8000c08:	dd01      	ble.n	8000c0e <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e050      	b.n	8000cb0 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	e040      	b.n	8000c96 <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3b20      	subs	r3, #32
 8000c1a:	7a79      	ldrb	r1, [r7, #9]
 8000c1c:	fb03 f101 	mul.w	r1, r3, r1
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	e029      	b.n	8000c86 <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00f      	beq.n	8000c62 <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000c50:	785a      	ldrb	r2, [r3, #1]
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f7ff ff8c 	bl	8000b78 <ssd1306_white_pixel>
 8000c60:	e00e      	b.n	8000c80 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000c70:	785a      	ldrb	r2, [r3, #1]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff ff50 	bl	8000b20 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	7a3b      	ldrb	r3, [r7, #8]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbd0      	blt.n	8000c32 <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	3301      	adds	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	7a7b      	ldrb	r3, [r7, #9]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	dbb9      	blt.n	8000c14 <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	7a3b      	ldrb	r3, [r7, #8]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <ssd1306_write_char+0xec>)
 8000cac:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000558 	.word	0x20000558

08000cbc <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cca:	607a      	str	r2, [r7, #4]
    current_font = font;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <ssd1306_write_string+0x60>)
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cd8:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 8000cdc:	e014      	b.n	8000d08 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cec:	f7ff ff6e 	bl	8000bcc <ssd1306_write_char>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d002      	beq.n	8000d02 <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	e008      	b.n	8000d14 <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
    while(*str)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000055c 	.word	0x2000055c

08000d20 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8000d30:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <ssd1306_set_cursor+0x28>)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <ssd1306_set_cursor+0x28>)
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	7053      	strb	r3, [r2, #1]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000558 	.word	0x20000558

08000d4c <ssd1306_enter>:

void ssd1306_enter()
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <ssd1306_enter+0x24>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <ssd1306_enter+0x24>)
 8000d58:	785a      	ldrb	r2, [r3, #1]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <ssd1306_enter+0x28>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <ssd1306_enter+0x24>)
 8000d64:	705a      	strb	r2, [r3, #1]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000558 	.word	0x20000558
 8000d74:	2000055c 	.word	0x2000055c

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fd83 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fc10 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fd8d 	bl	80018e2 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fd63 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	20000014 	.word	0x20000014

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000018 	.word	0x20000018
 8000e24:	20000564 	.word	0x20000564

08000e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	@ (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000564 	.word	0x20000564

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000018 	.word	0x20000018

08000e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0be      	b.n	8001024 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f980 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fbf1 	bl	80016b0 <ADC_ConversionStop_Disable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8099 	bne.w	8001012 <HAL_ADC_Init+0x18e>
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 8095 	bne.w	8001012 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ef0:	f023 0302 	bic.w	r3, r3, #2
 8000ef4:	f043 0202 	orr.w	r2, r3, #2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7b1b      	ldrb	r3, [r3, #12]
 8000f0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f1c:	d003      	beq.n	8000f26 <HAL_ADC_Init+0xa2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d102      	bne.n	8000f2c <HAL_ADC_Init+0xa8>
 8000f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2a:	e000      	b.n	8000f2e <HAL_ADC_Init+0xaa>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7d1b      	ldrb	r3, [r3, #20]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d119      	bne.n	8000f70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7b1b      	ldrb	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d109      	bne.n	8000f58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	035a      	lsls	r2, r3, #13
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	e00b      	b.n	8000f70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	f043 0220 	orr.w	r2, r3, #32
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <HAL_ADC_Init+0x1a8>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa0:	d003      	beq.n	8000faa <HAL_ADC_Init+0x126>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d104      	bne.n	8000fb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	051b      	lsls	r3, r3, #20
 8000fb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_ADC_Init+0x1ac>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fee:	e018      	b.n	8001022 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff4:	f023 0312 	bic.w	r3, r3, #18
 8000ff8:	f043 0210 	orr.w	r2, r3, #16
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001010:	e007      	b.n	8001022 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001016:	f043 0210 	orr.w	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	ffe1f7fd 	.word	0xffe1f7fd
 8001030:	ff1f0efe 	.word	0xff1f0efe

08001034 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Start+0x1a>
 800104a:	2302      	movs	r3, #2
 800104c:	e098      	b.n	8001180 <HAL_ADC_Start+0x14c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fad0 	bl	80015fc <ADC_Enable>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8087 	bne.w	8001176 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a41      	ldr	r2, [pc, #260]	@ (8001188 <HAL_ADC_Start+0x154>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d105      	bne.n	8001092 <HAL_ADC_Start+0x5e>
 8001086:	4b41      	ldr	r3, [pc, #260]	@ (800118c <HAL_ADC_Start+0x158>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d115      	bne.n	80010be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001096:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d026      	beq.n	80010fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010bc:	e01d      	b.n	80010fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2f      	ldr	r2, [pc, #188]	@ (800118c <HAL_ADC_Start+0x158>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d004      	beq.n	80010de <HAL_ADC_Start+0xaa>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001188 <HAL_ADC_Start+0x154>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10d      	bne.n	80010fa <HAL_ADC_Start+0xc6>
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <HAL_ADC_Start+0x158>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110a:	f023 0206 	bic.w	r2, r3, #6
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001112:	e002      	b.n	800111a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f06f 0202 	mvn.w	r2, #2
 800112a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001136:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800113a:	d113      	bne.n	8001164 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_ADC_Start+0x154>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d105      	bne.n	8001152 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_ADC_Start+0x158>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	d108      	bne.n	8001164 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e00c      	b.n	800117e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	e003      	b.n	800117e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012800 	.word	0x40012800
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_ADC_Stop+0x1a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e01a      	b.n	80011e0 <HAL_ADC_Stop+0x50>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fa7c 	bl	80016b0 <ADC_ConversionStop_Disable>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011fe:	f7ff fe13 	bl	8000e28 <HAL_GetTick>
 8001202:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	f043 0220 	orr.w	r2, r3, #32
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d3      	b.n	80013d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d131      	bne.n	800129c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001242:	2b00      	cmp	r3, #0
 8001244:	d12a      	bne.n	800129c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001246:	e021      	b.n	800128c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d01d      	beq.n	800128c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <HAL_ADC_PollForConversion+0x7e>
 8001256:	f7ff fde7 	bl	8000e28 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d212      	bcs.n	800128c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10b      	bne.n	800128c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f043 0204 	orr.w	r2, r3, #4
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0a2      	b.n	80013d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0d6      	beq.n	8001248 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800129a:	e070      	b.n	800137e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800129c:	4b4f      	ldr	r3, [pc, #316]	@ (80013dc <HAL_ADC_PollForConversion+0x1f4>)
 800129e:	681c      	ldr	r4, [r3, #0]
 80012a0:	2002      	movs	r0, #2
 80012a2:	f001 fe39 	bl	8002f18 <HAL_RCCEx_GetPeriphCLKFreq>
 80012a6:	4603      	mov	r3, r0
 80012a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6919      	ldr	r1, [r3, #16]
 80012b2:	4b4b      	ldr	r3, [pc, #300]	@ (80013e0 <HAL_ADC_PollForConversion+0x1f8>)
 80012b4:	400b      	ands	r3, r1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_ADC_PollForConversion+0x104>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	4b48      	ldr	r3, [pc, #288]	@ (80013e4 <HAL_ADC_PollForConversion+0x1fc>)
 80012c2:	400b      	ands	r3, r1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d111      	bne.n	80012ec <HAL_ADC_PollForConversion+0x104>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <HAL_ADC_PollForConversion+0x200>)
 80012d0:	400b      	ands	r3, r1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d108      	bne.n	80012e8 <HAL_ADC_PollForConversion+0x100>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <HAL_ADC_PollForConversion+0x204>)
 80012de:	400b      	ands	r3, r1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_PollForConversion+0x100>
 80012e4:	2314      	movs	r3, #20
 80012e6:	e020      	b.n	800132a <HAL_ADC_PollForConversion+0x142>
 80012e8:	2329      	movs	r3, #41	@ 0x29
 80012ea:	e01e      	b.n	800132a <HAL_ADC_PollForConversion+0x142>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6919      	ldr	r1, [r3, #16]
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_ADC_PollForConversion+0x200>)
 80012f4:	400b      	ands	r3, r1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_PollForConversion+0x120>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68d9      	ldr	r1, [r3, #12]
 8001300:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_ADC_PollForConversion+0x204>)
 8001302:	400b      	ands	r3, r1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00d      	beq.n	8001324 <HAL_ADC_PollForConversion+0x13c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_ADC_PollForConversion+0x208>)
 8001310:	400b      	ands	r3, r1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_ADC_PollForConversion+0x140>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68d9      	ldr	r1, [r3, #12]
 800131c:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <HAL_ADC_PollForConversion+0x208>)
 800131e:	400b      	ands	r3, r1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_ADC_PollForConversion+0x140>
 8001324:	2354      	movs	r3, #84	@ 0x54
 8001326:	e000      	b.n	800132a <HAL_ADC_PollForConversion+0x142>
 8001328:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001330:	e021      	b.n	8001376 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d01a      	beq.n	8001370 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_ADC_PollForConversion+0x168>
 8001340:	f7ff fd72 	bl	8000e28 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d20f      	bcs.n	8001370 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d90b      	bls.n	8001370 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	f043 0204 	orr.w	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e030      	b.n	80013d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	429a      	cmp	r2, r3
 800137c:	d8d9      	bhi.n	8001332 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f06f 0212 	mvn.w	r2, #18
 8001386:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800139e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013a2:	d115      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d111      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000000 	.word	0x20000000
 80013e0:	24924924 	.word	0x24924924
 80013e4:	00924924 	.word	0x00924924
 80013e8:	12492492 	.word	0x12492492
 80013ec:	00492492 	.word	0x00492492
 80013f0:	00249249 	.word	0x00249249

080013f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x20>
 8001428:	2302      	movs	r3, #2
 800142a:	e0dc      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x1da>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b06      	cmp	r3, #6
 800143a:	d81c      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	3b05      	subs	r3, #5
 800144e:	221f      	movs	r2, #31
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	4019      	ands	r1, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b05      	subs	r3, #5
 8001468:	fa00 f203 	lsl.w	r2, r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34
 8001474:	e03c      	b.n	80014f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d81c      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b23      	subs	r3, #35	@ 0x23
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	4019      	ands	r1, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b23      	subs	r3, #35	@ 0x23
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80014b6:	e01b      	b.n	80014f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b41      	subs	r3, #65	@ 0x41
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3b41      	subs	r3, #65	@ 0x41
 80014e4:	fa00 f203 	lsl.w	r2, r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d91c      	bls.n	8001532 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68d9      	ldr	r1, [r3, #12]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	3b1e      	subs	r3, #30
 800150a:	2207      	movs	r2, #7
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	4019      	ands	r1, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6898      	ldr	r0, [r3, #8]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	3b1e      	subs	r3, #30
 8001524:	fa00 f203 	lsl.w	r2, r0, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	e019      	b.n	8001566 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6919      	ldr	r1, [r3, #16]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	4019      	ands	r1, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d003      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001572:	2b11      	cmp	r3, #17
 8001574:	d132      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d125      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d126      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800159c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d11a      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9a      	lsrs	r2, r3, #18
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_ConfigChannel+0x1b2>
 80015ca:	e007      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40012400 	.word	0x40012400
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d040      	beq.n	800169c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <ADC_Enable+0xac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <ADC_Enable+0xb0>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001638:	e002      	b.n	8001640 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3b01      	subs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001646:	f7ff fbef 	bl	8000e28 <HAL_GetTick>
 800164a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800164c:	e01f      	b.n	800168e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800164e:	f7ff fbeb 	bl	8000e28 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d918      	bls.n	800168e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d011      	beq.n	800168e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e007      	b.n	800169e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d1d8      	bne.n	800164e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000
 80016ac:	431bde83 	.word	0x431bde83

080016b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d12e      	bne.n	8001728 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016da:	f7ff fba5 	bl	8000e28 <HAL_GetTick>
 80016de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e0:	e01b      	b.n	800171a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016e2:	f7ff fba1 	bl	8000e28 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d914      	bls.n	800171a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10d      	bne.n	800171a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e007      	b.n	800172a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d0dc      	beq.n	80016e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff90 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff49 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff5e 	bl	800177c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff90 	bl	80017ec <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5f 	bl	8001798 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffb0 	bl	8001850 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	@ 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e169      	b.n	8001be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8158 	bne.w	8001bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a9a      	ldr	r2, [pc, #616]	@ (8001b9c <HAL_GPIO_Init+0x2a0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4a98      	ldr	r2, [pc, #608]	@ (8001b9c <HAL_GPIO_Init+0x2a0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4a98      	ldr	r2, [pc, #608]	@ (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a96      	ldr	r2, [pc, #600]	@ (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a96      	ldr	r2, [pc, #600]	@ (8001ba4 <HAL_GPIO_Init+0x2a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a94      	ldr	r2, [pc, #592]	@ (8001ba4 <HAL_GPIO_Init+0x2a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a94      	ldr	r2, [pc, #592]	@ (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a92      	ldr	r2, [pc, #584]	@ (8001ba8 <HAL_GPIO_Init+0x2ac>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a92      	ldr	r2, [pc, #584]	@ (8001bac <HAL_GPIO_Init+0x2b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a90      	ldr	r2, [pc, #576]	@ (8001bac <HAL_GPIO_Init+0x2b0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a79      	ldr	r2, [pc, #484]	@ (8001bb0 <HAL_GPIO_Init+0x2b4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	@ 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	@ 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80b1 	beq.w	8001bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a48      	ldr	r2, [pc, #288]	@ (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a40      	ldr	r2, [pc, #256]	@ (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_GPIO_Init+0x1ec>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afa:	492f      	ldr	r1, [pc, #188]	@ (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	492c      	ldr	r1, [pc, #176]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4928      	ldr	r1, [pc, #160]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b3c:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4922      	ldr	r1, [pc, #136]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60cb      	str	r3, [r1, #12]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	491e      	ldr	r1, [pc, #120]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4918      	ldr	r1, [pc, #96]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4914      	ldr	r1, [pc, #80]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	490e      	ldr	r1, [pc, #56]	@ (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e021      	b.n	8001bde <HAL_GPIO_Init+0x2e2>
 8001b9a:	bf00      	nop
 8001b9c:	10320000 	.word	0x10320000
 8001ba0:	10310000 	.word	0x10310000
 8001ba4:	10220000 	.word	0x10220000
 8001ba8:	10210000 	.word	0x10210000
 8001bac:	10120000 	.word	0x10120000
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40011400 	.word	0x40011400
 8001bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_GPIO_Init+0x304>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4909      	ldr	r1, [pc, #36]	@ (8001c00 <HAL_GPIO_Init+0x304>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f ae8e 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	372c      	adds	r7, #44	@ 0x2c
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e12b      	b.n	8001e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fb7c 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	@ 0x24
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c98:	f001 f842 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a81      	ldr	r2, [pc, #516]	@ (8001ea8 <HAL_I2C_Init+0x274>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d807      	bhi.n	8001cb8 <HAL_I2C_Init+0x84>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a80      	ldr	r2, [pc, #512]	@ (8001eac <HAL_I2C_Init+0x278>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	e006      	b.n	8001cc6 <HAL_I2C_Init+0x92>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a7d      	ldr	r2, [pc, #500]	@ (8001eb0 <HAL_I2C_Init+0x27c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0e7      	b.n	8001e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a78      	ldr	r2, [pc, #480]	@ (8001eb4 <HAL_I2C_Init+0x280>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea8 <HAL_I2C_Init+0x274>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d802      	bhi.n	8001d08 <HAL_I2C_Init+0xd4>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	e009      	b.n	8001d1c <HAL_I2C_Init+0xe8>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	4a69      	ldr	r2, [pc, #420]	@ (8001eb8 <HAL_I2C_Init+0x284>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	495c      	ldr	r1, [pc, #368]	@ (8001ea8 <HAL_I2C_Init+0x274>)
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d819      	bhi.n	8001d70 <HAL_I2C_Init+0x13c>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e59      	subs	r1, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4a:	1c59      	adds	r1, r3, #1
 8001d4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d50:	400b      	ands	r3, r1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_I2C_Init+0x138>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e59      	subs	r1, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6a:	e051      	b.n	8001e10 <HAL_I2C_Init+0x1dc>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e04f      	b.n	8001e10 <HAL_I2C_Init+0x1dc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d111      	bne.n	8001d9c <HAL_I2C_Init+0x168>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e012      	b.n	8001dc2 <HAL_I2C_Init+0x18e>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e58      	subs	r0, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	0099      	lsls	r1, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Init+0x196>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e022      	b.n	8001e10 <HAL_I2C_Init+0x1dc>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_I2C_Init+0x1bc>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1e58      	subs	r0, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6859      	ldr	r1, [r3, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	440b      	add	r3, r1
 8001de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de4:	3301      	adds	r3, #1
 8001de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dee:	e00f      	b.n	8001e10 <HAL_I2C_Init+0x1dc>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	6809      	ldr	r1, [r1, #0]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6911      	ldr	r1, [r2, #16]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68d2      	ldr	r2, [r2, #12]
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	000186a0 	.word	0x000186a0
 8001eac:	001e847f 	.word	0x001e847f
 8001eb0:	003d08ff 	.word	0x003d08ff
 8001eb4:	431bde83 	.word	0x431bde83
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	817b      	strh	r3, [r7, #10]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	813b      	strh	r3, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed6:	f7fe ffa7 	bl	8000e28 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	f040 80d9 	bne.w	800209c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2319      	movs	r3, #25
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	496d      	ldr	r1, [pc, #436]	@ (80020a8 <HAL_I2C_Mem_Write+0x1ec>)
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f971 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0cc      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Mem_Write+0x56>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0c5      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d007      	beq.n	8001f38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2221      	movs	r2, #33	@ 0x21
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a4d      	ldr	r2, [pc, #308]	@ (80020ac <HAL_I2C_Mem_Write+0x1f0>)
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f7a:	88f8      	ldrh	r0, [r7, #6]
 8001f7c:	893a      	ldrh	r2, [r7, #8]
 8001f7e:	8979      	ldrh	r1, [r7, #10]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f890 	bl	80020b0 <I2C_RequestMemoryWrite>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d052      	beq.n	800203c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e081      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fa36 	bl	8002410 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06b      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b04      	cmp	r3, #4
 8002002:	d11b      	bne.n	800203c <HAL_I2C_Mem_Write+0x180>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d017      	beq.n	800203c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1aa      	bne.n	8001f9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fa29 	bl	80024a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	2b04      	cmp	r3, #4
 800205a:	d107      	bne.n	800206c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800206a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e016      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	00100002 	.word	0x00100002
 80020ac:	ffff0000 	.word	0xffff0000

080020b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	460b      	mov	r3, r1
 80020c4:	813b      	strh	r3, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f878 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002100:	d103      	bne.n	800210a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e05f      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800211c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	492d      	ldr	r1, [pc, #180]	@ (80021d8 <I2C_RequestMemoryWrite+0x128>)
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f8d3 	bl	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e04c      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f95e 	bl	8002410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e02b      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	e021      	b.n	80021cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002188:	893b      	ldrh	r3, [r7, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f938 	bl	8002410 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d107      	bne.n	80021be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e005      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c2:	893b      	ldrh	r3, [r7, #8]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	00010002 	.word	0x00010002

080021dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ec:	e048      	b.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d044      	beq.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f6:	f7fe fe17 	bl	8000e28 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d302      	bcc.n	800220c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d139      	bne.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10d      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	e00c      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	429a      	cmp	r2, r3
 8002250:	d116      	bne.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e023      	b.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10d      	bne.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	43da      	mvns	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4013      	ands	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	e00c      	b.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d093      	beq.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022de:	e071      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ee:	d123      	bne.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f043 0204 	orr.w	r2, r3, #4
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e067      	b.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d041      	beq.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002340:	f7fe fd72 	bl	8000e28 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d302      	bcc.n	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d136      	bne.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10c      	bne.n	800237a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e00b      	b.n	8002392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	43da      	mvns	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4013      	ands	r3, r2
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e021      	b.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10c      	bne.n	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e00b      	b.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f af6d 	bne.w	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241c:	e034      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f886 	bl	8002530 <I2C_IsAcknowledgeFailed>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e034      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d028      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7fe fcf7 	bl	8000e28 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11d      	bne.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002456:	2b80      	cmp	r3, #128	@ 0x80
 8002458:	d016      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e007      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002492:	2b80      	cmp	r3, #128	@ 0x80
 8002494:	d1c3      	bne.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ac:	e034      	b.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f83e 	bl	8002530 <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e034      	b.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d028      	beq.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7fe fcaf 	bl	8000e28 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11d      	bne.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d016      	beq.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e007      	b.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d1c3      	bne.n	80024ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d11b      	bne.n	8002580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e272      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8087 	beq.w	80026ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ac:	4b92      	ldr	r3, [pc, #584]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d00c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b8:	4b8f      	ldr	r3, [pc, #572]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d112      	bne.n	80025ea <HAL_RCC_OscConfig+0x5e>
 80025c4:	4b8c      	ldr	r3, [pc, #560]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d0:	d10b      	bne.n	80025ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d2:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d06c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x12c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d168      	bne.n	80026b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e24c      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x76>
 80025f4:	4b80      	ldr	r3, [pc, #512]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7f      	ldr	r2, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	e02e      	b.n	8002660 <HAL_RCC_OscConfig+0xd4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x98>
 800260a:	4b7b      	ldr	r3, [pc, #492]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7a      	ldr	r2, [pc, #488]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b78      	ldr	r3, [pc, #480]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a77      	ldr	r2, [pc, #476]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800261c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01d      	b.n	8002660 <HAL_RCC_OscConfig+0xd4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0xbc>
 800262e:	4b72      	ldr	r3, [pc, #456]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a71      	ldr	r2, [pc, #452]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6e      	ldr	r2, [pc, #440]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xd4>
 8002648:	4b6b      	ldr	r3, [pc, #428]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b68      	ldr	r3, [pc, #416]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a67      	ldr	r2, [pc, #412]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fbde 	bl	8000e28 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7fe fbda 	bl	8000e28 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e200      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xe4>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fbca 	bl	8000e28 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7fe fbc6 	bl	8000e28 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1ec      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x10c>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d063      	beq.n	800278e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c6:	4b4c      	ldr	r3, [pc, #304]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026d2:	4b49      	ldr	r3, [pc, #292]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x18c>
 80026de:	4b46      	ldr	r3, [pc, #280]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b43      	ldr	r3, [pc, #268]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x176>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1c0      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4939      	ldr	r1, [pc, #228]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <HAL_RCC_OscConfig+0x270>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7fe fb7f 	bl	8000e28 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fb7b 	bl	8000e28 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1a1      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4927      	ldr	r1, [pc, #156]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b26      	ldr	r3, [pc, #152]	@ (80027fc <HAL_RCC_OscConfig+0x270>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fb5e 	bl	8000e28 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe fb5a 	bl	8000e28 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e180      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03a      	beq.n	8002810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d019      	beq.n	80027d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <HAL_RCC_OscConfig+0x274>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fb3e 	bl	8000e28 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fb3a 	bl	8000e28 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e160      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ce:	2001      	movs	r0, #1
 80027d0:	f000 face 	bl	8002d70 <RCC_Delay>
 80027d4:	e01c      	b.n	8002810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fb24 	bl	8000e28 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e2:	e00f      	b.n	8002804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe fb20 	bl	8000e28 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e146      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	42420000 	.word	0x42420000
 8002800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b92      	ldr	r3, [pc, #584]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e9      	bne.n	80027e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a6 	beq.w	800296a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b8b      	ldr	r3, [pc, #556]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b88      	ldr	r3, [pc, #544]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a87      	ldr	r2, [pc, #540]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002838:	61d3      	str	r3, [r2, #28]
 800283a:	4b85      	ldr	r3, [pc, #532]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <HAL_RCC_OscConfig+0x4c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002856:	4b7f      	ldr	r3, [pc, #508]	@ (8002a54 <HAL_RCC_OscConfig+0x4c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002862:	f7fe fae1 	bl	8000e28 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7fe fadd 	bl	8000e28 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	@ 0x64
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e103      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x4c8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x312>
 8002890:	4b6f      	ldr	r3, [pc, #444]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a6e      	ldr	r2, [pc, #440]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e02d      	b.n	80028fa <HAL_RCC_OscConfig+0x36e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x334>
 80028a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a69      	ldr	r2, [pc, #420]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6213      	str	r3, [r2, #32]
 80028b2:	4b67      	ldr	r3, [pc, #412]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a66      	ldr	r2, [pc, #408]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	e01c      	b.n	80028fa <HAL_RCC_OscConfig+0x36e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCC_OscConfig+0x356>
 80028c8:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a60      	ldr	r2, [pc, #384]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	e00b      	b.n	80028fa <HAL_RCC_OscConfig+0x36e>
 80028e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	4b58      	ldr	r3, [pc, #352]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a57      	ldr	r2, [pc, #348]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fa91 	bl	8000e28 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fa8d 	bl	8000e28 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0b1      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ee      	beq.n	800290a <HAL_RCC_OscConfig+0x37e>
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe fa7b 	bl	8000e28 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fa77 	bl	8000e28 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e09b      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	4b40      	ldr	r3, [pc, #256]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4a3b      	ldr	r2, [pc, #236]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8087 	beq.w	8002a82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002974:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d061      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d146      	bne.n	8002a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fa4b 	bl	8000e28 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fa47 	bl	8000e28 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e06d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	4b29      	ldr	r3, [pc, #164]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029bc:	d108      	bne.n	80029d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4921      	ldr	r1, [pc, #132]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a19      	ldr	r1, [r3, #32]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	430b      	orrs	r3, r1
 80029e2:	491b      	ldr	r1, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fa1b 	bl	8000e28 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe fa17 	bl	8000e28 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46a>
 8002a14:	e035      	b.n	8002a82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fa04 	bl	8000e28 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fa00 	bl	8000e28 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e026      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x498>
 8002a42:	e01e      	b.n	8002a82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e019      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
 8002a58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x500>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0d0      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d910      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4965      	ldr	r1, [pc, #404]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b63      	ldr	r3, [pc, #396]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0b8      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aec:	4b59      	ldr	r3, [pc, #356]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a58      	ldr	r2, [pc, #352]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b04:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a52      	ldr	r2, [pc, #328]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b10:	4b50      	ldr	r3, [pc, #320]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	494d      	ldr	r1, [pc, #308]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d040      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d115      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e07f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e073      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06b      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4936      	ldr	r1, [pc, #216]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7fe f952 	bl	8000e28 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7fe f94e 	bl	8000e28 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e053      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d210      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 0207 	bic.w	r2, r3, #7
 8002bc6:	4922      	ldr	r1, [pc, #136]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e032      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4916      	ldr	r1, [pc, #88]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0a:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	490e      	ldr	r1, [pc, #56]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c1e:	f000 f821 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	490a      	ldr	r1, [pc, #40]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	4a09      	ldr	r2, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1cc>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <HAL_RCC_ClockConfig+0x1d0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f8b0 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08003c0c 	.word	0x08003c0c
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000014 	.word	0x20000014

08002c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x30>
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x36>
 8002c92:	e027      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	613b      	str	r3, [r7, #16]
      break;
 8002c98:	e027      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0c5b      	lsrs	r3, r3, #17
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	4a11      	ldr	r2, [pc, #68]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cc6:	fb03 f202 	mul.w	r2, r3, r2
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e004      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	613b      	str	r3, [r7, #16]
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	693b      	ldr	r3, [r7, #16]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	08004f70 	.word	0x08004f70
 8002d04:	08004f80 	.word	0x08004f80
 8002d08:	003d0900 	.word	0x003d0900

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff2 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	@ (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08003c1c 	.word	0x08003c1c

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08003c1c 	.word	0x08003c1c

08002d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <RCC_Delay+0x34>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <RCC_Delay+0x38>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0a5b      	lsrs	r3, r3, #9
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d8c:	bf00      	nop
  }
  while (Delay --);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	60fa      	str	r2, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <RCC_Delay+0x1c>
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	20000000 	.word	0x20000000
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d07d      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	61d3      	str	r3, [r2, #28]
 8002de4:	4b49      	ldr	r3, [pc, #292]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b46      	ldr	r3, [pc, #280]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d118      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a42      	ldr	r2, [pc, #264]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0c:	f7fe f80c 	bl	8000e28 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe f808 	bl	8000e28 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e06d      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b3a      	ldr	r3, [pc, #232]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e32:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02e      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d027      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e50:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e60:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e66:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d014      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fd ffd7 	bl	8000e28 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fd ffd3 	bl	8000e28 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e036      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4917      	ldr	r1, [pc, #92]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	490b      	ldr	r1, [pc, #44]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4904      	ldr	r1, [pc, #16]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
 8002f14:	42420440 	.word	0x42420440

08002f18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	f200 808a 	bhi.w	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d045      	beq.n	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d075      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f4e:	e082      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f50:	4b46      	ldr	r3, [pc, #280]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f56:	4b45      	ldr	r3, [pc, #276]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d07b      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	0c9b      	lsrs	r3, r3, #18
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4a41      	ldr	r2, [pc, #260]	@ (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	0c5b      	lsrs	r3, r3, #17
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	4a3b      	ldr	r2, [pc, #236]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f94:	4a38      	ldr	r2, [pc, #224]	@ (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e004      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	@ (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	61bb      	str	r3, [r7, #24]
      break;
 8002fc2:	e04a      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
      break;
 8002fd2:	e042      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e01f      	b.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003010:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e00f      	b.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003022:	d11c      	bne.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d016      	beq.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003030:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003034:	61bb      	str	r3, [r7, #24]
      break;
 8003036:	e012      	b.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003038:	e011      	b.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800303a:	f7ff fe85 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0b9b      	lsrs	r3, r3, #14
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	61bb      	str	r3, [r7, #24]
      break;
 8003054:	e004      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003056:	bf00      	nop
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800305e:	bf00      	nop
    }
  }
  return (frequency);
 8003060:	69bb      	ldr	r3, [r7, #24]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	08004f84 	.word	0x08004f84
 8003074:	08004f94 	.word	0x08004f94
 8003078:	007a1200 	.word	0x007a1200
 800307c:	003d0900 	.word	0x003d0900
 8003080:	aaaaaaab 	.word	0xaaaaaaab

08003084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e042      	b.n	800311c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fb48 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f82b 	bl	8003124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800315e:	f023 030c 	bic.w	r3, r3, #12
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	430b      	orrs	r3, r1
 800316a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <UART_SetConfig+0x114>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d103      	bne.n	8003194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7ff fddc 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	e002      	b.n	800319a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7ff fdc4 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8003198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <UART_SetConfig+0x118>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	0119      	lsls	r1, r3, #4
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <UART_SetConfig+0x118>)
 80031d2:	fba3 0302 	umull	r0, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2064      	movs	r0, #100	@ 0x64
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	@ 0x32
 80031e4:	4a15      	ldr	r2, [pc, #84]	@ (800323c <UART_SetConfig+0x118>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f0:	4419      	add	r1, r3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f2f3 	udiv	r2, r2, r3
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <UART_SetConfig+0x118>)
 800320a:	fba3 0302 	umull	r0, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2064      	movs	r0, #100	@ 0x64
 8003212:	fb00 f303 	mul.w	r3, r0, r3
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	3332      	adds	r3, #50	@ 0x32
 800321c:	4a07      	ldr	r2, [pc, #28]	@ (800323c <UART_SetConfig+0x118>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	440a      	add	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40013800 	.word	0x40013800
 800323c:	51eb851f 	.word	0x51eb851f

08003240 <siprintf>:
 8003240:	b40e      	push	{r1, r2, r3}
 8003242:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003246:	b500      	push	{lr}
 8003248:	b09c      	sub	sp, #112	@ 0x70
 800324a:	ab1d      	add	r3, sp, #116	@ 0x74
 800324c:	9002      	str	r0, [sp, #8]
 800324e:	9006      	str	r0, [sp, #24]
 8003250:	9107      	str	r1, [sp, #28]
 8003252:	9104      	str	r1, [sp, #16]
 8003254:	4808      	ldr	r0, [pc, #32]	@ (8003278 <siprintf+0x38>)
 8003256:	4909      	ldr	r1, [pc, #36]	@ (800327c <siprintf+0x3c>)
 8003258:	f853 2b04 	ldr.w	r2, [r3], #4
 800325c:	9105      	str	r1, [sp, #20]
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	a902      	add	r1, sp, #8
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	f000 f992 	bl	800358c <_svfiprintf_r>
 8003268:	2200      	movs	r2, #0
 800326a:	9b02      	ldr	r3, [sp, #8]
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	b01c      	add	sp, #112	@ 0x70
 8003270:	f85d eb04 	ldr.w	lr, [sp], #4
 8003274:	b003      	add	sp, #12
 8003276:	4770      	bx	lr
 8003278:	2000001c 	.word	0x2000001c
 800327c:	ffff0208 	.word	0xffff0208

08003280 <memset>:
 8003280:	4603      	mov	r3, r0
 8003282:	4402      	add	r2, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	@ (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2000001c 	.word	0x2000001c

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4d0c      	ldr	r5, [pc, #48]	@ (80032d4 <__libc_init_array+0x38>)
 80032a2:	4c0d      	ldr	r4, [pc, #52]	@ (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	f000 fc78 	bl	8003ba0 <_init>
 80032b0:	2600      	movs	r6, #0
 80032b2:	4d0a      	ldr	r5, [pc, #40]	@ (80032dc <__libc_init_array+0x40>)
 80032b4:	4c0a      	ldr	r4, [pc, #40]	@ (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08004fcc 	.word	0x08004fcc
 80032d8:	08004fcc 	.word	0x08004fcc
 80032dc:	08004fcc 	.word	0x08004fcc
 80032e0:	08004fd0 	.word	0x08004fd0

080032e4 <__retarget_lock_acquire_recursive>:
 80032e4:	4770      	bx	lr

080032e6 <__retarget_lock_release_recursive>:
 80032e6:	4770      	bx	lr

080032e8 <_free_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	2900      	cmp	r1, #0
 80032ee:	d040      	beq.n	8003372 <_free_r+0x8a>
 80032f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f4:	1f0c      	subs	r4, r1, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bfb8      	it	lt
 80032fa:	18e4      	addlt	r4, r4, r3
 80032fc:	f000 f8de 	bl	80034bc <__malloc_lock>
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <_free_r+0x8c>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	b933      	cbnz	r3, 8003314 <_free_r+0x2c>
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	6014      	str	r4, [r2, #0]
 800330a:	4628      	mov	r0, r5
 800330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003310:	f000 b8da 	b.w	80034c8 <__malloc_unlock>
 8003314:	42a3      	cmp	r3, r4
 8003316:	d908      	bls.n	800332a <_free_r+0x42>
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	1821      	adds	r1, r4, r0
 800331c:	428b      	cmp	r3, r1
 800331e:	bf01      	itttt	eq
 8003320:	6819      	ldreq	r1, [r3, #0]
 8003322:	685b      	ldreq	r3, [r3, #4]
 8003324:	1809      	addeq	r1, r1, r0
 8003326:	6021      	streq	r1, [r4, #0]
 8003328:	e7ed      	b.n	8003306 <_free_r+0x1e>
 800332a:	461a      	mov	r2, r3
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b10b      	cbz	r3, 8003334 <_free_r+0x4c>
 8003330:	42a3      	cmp	r3, r4
 8003332:	d9fa      	bls.n	800332a <_free_r+0x42>
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	1850      	adds	r0, r2, r1
 8003338:	42a0      	cmp	r0, r4
 800333a:	d10b      	bne.n	8003354 <_free_r+0x6c>
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	4401      	add	r1, r0
 8003340:	1850      	adds	r0, r2, r1
 8003342:	4283      	cmp	r3, r0
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	d1e0      	bne.n	800330a <_free_r+0x22>
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4408      	add	r0, r1
 800334e:	6010      	str	r0, [r2, #0]
 8003350:	6053      	str	r3, [r2, #4]
 8003352:	e7da      	b.n	800330a <_free_r+0x22>
 8003354:	d902      	bls.n	800335c <_free_r+0x74>
 8003356:	230c      	movs	r3, #12
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	e7d6      	b.n	800330a <_free_r+0x22>
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	1821      	adds	r1, r4, r0
 8003360:	428b      	cmp	r3, r1
 8003362:	bf01      	itttt	eq
 8003364:	6819      	ldreq	r1, [r3, #0]
 8003366:	685b      	ldreq	r3, [r3, #4]
 8003368:	1809      	addeq	r1, r1, r0
 800336a:	6021      	streq	r1, [r4, #0]
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	6054      	str	r4, [r2, #4]
 8003370:	e7cb      	b.n	800330a <_free_r+0x22>
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	200006ac 	.word	0x200006ac

08003378 <sbrk_aligned>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4e0f      	ldr	r6, [pc, #60]	@ (80033b8 <sbrk_aligned+0x40>)
 800337c:	460c      	mov	r4, r1
 800337e:	6831      	ldr	r1, [r6, #0]
 8003380:	4605      	mov	r5, r0
 8003382:	b911      	cbnz	r1, 800338a <sbrk_aligned+0x12>
 8003384:	f000 fbaa 	bl	8003adc <_sbrk_r>
 8003388:	6030      	str	r0, [r6, #0]
 800338a:	4621      	mov	r1, r4
 800338c:	4628      	mov	r0, r5
 800338e:	f000 fba5 	bl	8003adc <_sbrk_r>
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	d103      	bne.n	800339e <sbrk_aligned+0x26>
 8003396:	f04f 34ff 	mov.w	r4, #4294967295
 800339a:	4620      	mov	r0, r4
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	1cc4      	adds	r4, r0, #3
 80033a0:	f024 0403 	bic.w	r4, r4, #3
 80033a4:	42a0      	cmp	r0, r4
 80033a6:	d0f8      	beq.n	800339a <sbrk_aligned+0x22>
 80033a8:	1a21      	subs	r1, r4, r0
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 fb96 	bl	8003adc <_sbrk_r>
 80033b0:	3001      	adds	r0, #1
 80033b2:	d1f2      	bne.n	800339a <sbrk_aligned+0x22>
 80033b4:	e7ef      	b.n	8003396 <sbrk_aligned+0x1e>
 80033b6:	bf00      	nop
 80033b8:	200006a8 	.word	0x200006a8

080033bc <_malloc_r>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	1ccd      	adds	r5, r1, #3
 80033c2:	f025 0503 	bic.w	r5, r5, #3
 80033c6:	3508      	adds	r5, #8
 80033c8:	2d0c      	cmp	r5, #12
 80033ca:	bf38      	it	cc
 80033cc:	250c      	movcc	r5, #12
 80033ce:	2d00      	cmp	r5, #0
 80033d0:	4606      	mov	r6, r0
 80033d2:	db01      	blt.n	80033d8 <_malloc_r+0x1c>
 80033d4:	42a9      	cmp	r1, r5
 80033d6:	d904      	bls.n	80033e2 <_malloc_r+0x26>
 80033d8:	230c      	movs	r3, #12
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	2000      	movs	r0, #0
 80033de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034b8 <_malloc_r+0xfc>
 80033e6:	f000 f869 	bl	80034bc <__malloc_lock>
 80033ea:	f8d8 3000 	ldr.w	r3, [r8]
 80033ee:	461c      	mov	r4, r3
 80033f0:	bb44      	cbnz	r4, 8003444 <_malloc_r+0x88>
 80033f2:	4629      	mov	r1, r5
 80033f4:	4630      	mov	r0, r6
 80033f6:	f7ff ffbf 	bl	8003378 <sbrk_aligned>
 80033fa:	1c43      	adds	r3, r0, #1
 80033fc:	4604      	mov	r4, r0
 80033fe:	d158      	bne.n	80034b2 <_malloc_r+0xf6>
 8003400:	f8d8 4000 	ldr.w	r4, [r8]
 8003404:	4627      	mov	r7, r4
 8003406:	2f00      	cmp	r7, #0
 8003408:	d143      	bne.n	8003492 <_malloc_r+0xd6>
 800340a:	2c00      	cmp	r4, #0
 800340c:	d04b      	beq.n	80034a6 <_malloc_r+0xea>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	4639      	mov	r1, r7
 8003412:	4630      	mov	r0, r6
 8003414:	eb04 0903 	add.w	r9, r4, r3
 8003418:	f000 fb60 	bl	8003adc <_sbrk_r>
 800341c:	4581      	cmp	r9, r0
 800341e:	d142      	bne.n	80034a6 <_malloc_r+0xea>
 8003420:	6821      	ldr	r1, [r4, #0]
 8003422:	4630      	mov	r0, r6
 8003424:	1a6d      	subs	r5, r5, r1
 8003426:	4629      	mov	r1, r5
 8003428:	f7ff ffa6 	bl	8003378 <sbrk_aligned>
 800342c:	3001      	adds	r0, #1
 800342e:	d03a      	beq.n	80034a6 <_malloc_r+0xea>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	442b      	add	r3, r5
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	f8d8 3000 	ldr.w	r3, [r8]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	bb62      	cbnz	r2, 8003498 <_malloc_r+0xdc>
 800343e:	f8c8 7000 	str.w	r7, [r8]
 8003442:	e00f      	b.n	8003464 <_malloc_r+0xa8>
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	1b52      	subs	r2, r2, r5
 8003448:	d420      	bmi.n	800348c <_malloc_r+0xd0>
 800344a:	2a0b      	cmp	r2, #11
 800344c:	d917      	bls.n	800347e <_malloc_r+0xc2>
 800344e:	1961      	adds	r1, r4, r5
 8003450:	42a3      	cmp	r3, r4
 8003452:	6025      	str	r5, [r4, #0]
 8003454:	bf18      	it	ne
 8003456:	6059      	strne	r1, [r3, #4]
 8003458:	6863      	ldr	r3, [r4, #4]
 800345a:	bf08      	it	eq
 800345c:	f8c8 1000 	streq.w	r1, [r8]
 8003460:	5162      	str	r2, [r4, r5]
 8003462:	604b      	str	r3, [r1, #4]
 8003464:	4630      	mov	r0, r6
 8003466:	f000 f82f 	bl	80034c8 <__malloc_unlock>
 800346a:	f104 000b 	add.w	r0, r4, #11
 800346e:	1d23      	adds	r3, r4, #4
 8003470:	f020 0007 	bic.w	r0, r0, #7
 8003474:	1ac2      	subs	r2, r0, r3
 8003476:	bf1c      	itt	ne
 8003478:	1a1b      	subne	r3, r3, r0
 800347a:	50a3      	strne	r3, [r4, r2]
 800347c:	e7af      	b.n	80033de <_malloc_r+0x22>
 800347e:	6862      	ldr	r2, [r4, #4]
 8003480:	42a3      	cmp	r3, r4
 8003482:	bf0c      	ite	eq
 8003484:	f8c8 2000 	streq.w	r2, [r8]
 8003488:	605a      	strne	r2, [r3, #4]
 800348a:	e7eb      	b.n	8003464 <_malloc_r+0xa8>
 800348c:	4623      	mov	r3, r4
 800348e:	6864      	ldr	r4, [r4, #4]
 8003490:	e7ae      	b.n	80033f0 <_malloc_r+0x34>
 8003492:	463c      	mov	r4, r7
 8003494:	687f      	ldr	r7, [r7, #4]
 8003496:	e7b6      	b.n	8003406 <_malloc_r+0x4a>
 8003498:	461a      	mov	r2, r3
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	42a3      	cmp	r3, r4
 800349e:	d1fb      	bne.n	8003498 <_malloc_r+0xdc>
 80034a0:	2300      	movs	r3, #0
 80034a2:	6053      	str	r3, [r2, #4]
 80034a4:	e7de      	b.n	8003464 <_malloc_r+0xa8>
 80034a6:	230c      	movs	r3, #12
 80034a8:	4630      	mov	r0, r6
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	f000 f80c 	bl	80034c8 <__malloc_unlock>
 80034b0:	e794      	b.n	80033dc <_malloc_r+0x20>
 80034b2:	6005      	str	r5, [r0, #0]
 80034b4:	e7d6      	b.n	8003464 <_malloc_r+0xa8>
 80034b6:	bf00      	nop
 80034b8:	200006ac 	.word	0x200006ac

080034bc <__malloc_lock>:
 80034bc:	4801      	ldr	r0, [pc, #4]	@ (80034c4 <__malloc_lock+0x8>)
 80034be:	f7ff bf11 	b.w	80032e4 <__retarget_lock_acquire_recursive>
 80034c2:	bf00      	nop
 80034c4:	200006a4 	.word	0x200006a4

080034c8 <__malloc_unlock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	@ (80034d0 <__malloc_unlock+0x8>)
 80034ca:	f7ff bf0c 	b.w	80032e6 <__retarget_lock_release_recursive>
 80034ce:	bf00      	nop
 80034d0:	200006a4 	.word	0x200006a4

080034d4 <__ssputs_r>:
 80034d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d8:	461f      	mov	r7, r3
 80034da:	688e      	ldr	r6, [r1, #8]
 80034dc:	4682      	mov	sl, r0
 80034de:	42be      	cmp	r6, r7
 80034e0:	460c      	mov	r4, r1
 80034e2:	4690      	mov	r8, r2
 80034e4:	680b      	ldr	r3, [r1, #0]
 80034e6:	d82d      	bhi.n	8003544 <__ssputs_r+0x70>
 80034e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034f0:	d026      	beq.n	8003540 <__ssputs_r+0x6c>
 80034f2:	6965      	ldr	r5, [r4, #20]
 80034f4:	6909      	ldr	r1, [r1, #16]
 80034f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034fa:	eba3 0901 	sub.w	r9, r3, r1
 80034fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003502:	1c7b      	adds	r3, r7, #1
 8003504:	444b      	add	r3, r9
 8003506:	106d      	asrs	r5, r5, #1
 8003508:	429d      	cmp	r5, r3
 800350a:	bf38      	it	cc
 800350c:	461d      	movcc	r5, r3
 800350e:	0553      	lsls	r3, r2, #21
 8003510:	d527      	bpl.n	8003562 <__ssputs_r+0x8e>
 8003512:	4629      	mov	r1, r5
 8003514:	f7ff ff52 	bl	80033bc <_malloc_r>
 8003518:	4606      	mov	r6, r0
 800351a:	b360      	cbz	r0, 8003576 <__ssputs_r+0xa2>
 800351c:	464a      	mov	r2, r9
 800351e:	6921      	ldr	r1, [r4, #16]
 8003520:	f000 fafa 	bl	8003b18 <memcpy>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800352a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800352e:	81a3      	strh	r3, [r4, #12]
 8003530:	6126      	str	r6, [r4, #16]
 8003532:	444e      	add	r6, r9
 8003534:	6026      	str	r6, [r4, #0]
 8003536:	463e      	mov	r6, r7
 8003538:	6165      	str	r5, [r4, #20]
 800353a:	eba5 0509 	sub.w	r5, r5, r9
 800353e:	60a5      	str	r5, [r4, #8]
 8003540:	42be      	cmp	r6, r7
 8003542:	d900      	bls.n	8003546 <__ssputs_r+0x72>
 8003544:	463e      	mov	r6, r7
 8003546:	4632      	mov	r2, r6
 8003548:	4641      	mov	r1, r8
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	f000 faac 	bl	8003aa8 <memmove>
 8003550:	2000      	movs	r0, #0
 8003552:	68a3      	ldr	r3, [r4, #8]
 8003554:	1b9b      	subs	r3, r3, r6
 8003556:	60a3      	str	r3, [r4, #8]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	4433      	add	r3, r6
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003562:	462a      	mov	r2, r5
 8003564:	f000 fae6 	bl	8003b34 <_realloc_r>
 8003568:	4606      	mov	r6, r0
 800356a:	2800      	cmp	r0, #0
 800356c:	d1e0      	bne.n	8003530 <__ssputs_r+0x5c>
 800356e:	4650      	mov	r0, sl
 8003570:	6921      	ldr	r1, [r4, #16]
 8003572:	f7ff feb9 	bl	80032e8 <_free_r>
 8003576:	230c      	movs	r3, #12
 8003578:	f8ca 3000 	str.w	r3, [sl]
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f04f 30ff 	mov.w	r0, #4294967295
 8003582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	e7e9      	b.n	800355e <__ssputs_r+0x8a>
	...

0800358c <_svfiprintf_r>:
 800358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003590:	4698      	mov	r8, r3
 8003592:	898b      	ldrh	r3, [r1, #12]
 8003594:	4607      	mov	r7, r0
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	460d      	mov	r5, r1
 800359a:	4614      	mov	r4, r2
 800359c:	b09d      	sub	sp, #116	@ 0x74
 800359e:	d510      	bpl.n	80035c2 <_svfiprintf_r+0x36>
 80035a0:	690b      	ldr	r3, [r1, #16]
 80035a2:	b973      	cbnz	r3, 80035c2 <_svfiprintf_r+0x36>
 80035a4:	2140      	movs	r1, #64	@ 0x40
 80035a6:	f7ff ff09 	bl	80033bc <_malloc_r>
 80035aa:	6028      	str	r0, [r5, #0]
 80035ac:	6128      	str	r0, [r5, #16]
 80035ae:	b930      	cbnz	r0, 80035be <_svfiprintf_r+0x32>
 80035b0:	230c      	movs	r3, #12
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	b01d      	add	sp, #116	@ 0x74
 80035ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035be:	2340      	movs	r3, #64	@ 0x40
 80035c0:	616b      	str	r3, [r5, #20]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80035c6:	2320      	movs	r3, #32
 80035c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035cc:	2330      	movs	r3, #48	@ 0x30
 80035ce:	f04f 0901 	mov.w	r9, #1
 80035d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80035d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003770 <_svfiprintf_r+0x1e4>
 80035da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035de:	4623      	mov	r3, r4
 80035e0:	469a      	mov	sl, r3
 80035e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035e6:	b10a      	cbz	r2, 80035ec <_svfiprintf_r+0x60>
 80035e8:	2a25      	cmp	r2, #37	@ 0x25
 80035ea:	d1f9      	bne.n	80035e0 <_svfiprintf_r+0x54>
 80035ec:	ebba 0b04 	subs.w	fp, sl, r4
 80035f0:	d00b      	beq.n	800360a <_svfiprintf_r+0x7e>
 80035f2:	465b      	mov	r3, fp
 80035f4:	4622      	mov	r2, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	4638      	mov	r0, r7
 80035fa:	f7ff ff6b 	bl	80034d4 <__ssputs_r>
 80035fe:	3001      	adds	r0, #1
 8003600:	f000 80a7 	beq.w	8003752 <_svfiprintf_r+0x1c6>
 8003604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003606:	445a      	add	r2, fp
 8003608:	9209      	str	r2, [sp, #36]	@ 0x24
 800360a:	f89a 3000 	ldrb.w	r3, [sl]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 809f 	beq.w	8003752 <_svfiprintf_r+0x1c6>
 8003614:	2300      	movs	r3, #0
 8003616:	f04f 32ff 	mov.w	r2, #4294967295
 800361a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800361e:	f10a 0a01 	add.w	sl, sl, #1
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	9307      	str	r3, [sp, #28]
 8003626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800362a:	931a      	str	r3, [sp, #104]	@ 0x68
 800362c:	4654      	mov	r4, sl
 800362e:	2205      	movs	r2, #5
 8003630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003634:	484e      	ldr	r0, [pc, #312]	@ (8003770 <_svfiprintf_r+0x1e4>)
 8003636:	f000 fa61 	bl	8003afc <memchr>
 800363a:	9a04      	ldr	r2, [sp, #16]
 800363c:	b9d8      	cbnz	r0, 8003676 <_svfiprintf_r+0xea>
 800363e:	06d0      	lsls	r0, r2, #27
 8003640:	bf44      	itt	mi
 8003642:	2320      	movmi	r3, #32
 8003644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003648:	0711      	lsls	r1, r2, #28
 800364a:	bf44      	itt	mi
 800364c:	232b      	movmi	r3, #43	@ 0x2b
 800364e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003652:	f89a 3000 	ldrb.w	r3, [sl]
 8003656:	2b2a      	cmp	r3, #42	@ 0x2a
 8003658:	d015      	beq.n	8003686 <_svfiprintf_r+0xfa>
 800365a:	4654      	mov	r4, sl
 800365c:	2000      	movs	r0, #0
 800365e:	f04f 0c0a 	mov.w	ip, #10
 8003662:	9a07      	ldr	r2, [sp, #28]
 8003664:	4621      	mov	r1, r4
 8003666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800366a:	3b30      	subs	r3, #48	@ 0x30
 800366c:	2b09      	cmp	r3, #9
 800366e:	d94b      	bls.n	8003708 <_svfiprintf_r+0x17c>
 8003670:	b1b0      	cbz	r0, 80036a0 <_svfiprintf_r+0x114>
 8003672:	9207      	str	r2, [sp, #28]
 8003674:	e014      	b.n	80036a0 <_svfiprintf_r+0x114>
 8003676:	eba0 0308 	sub.w	r3, r0, r8
 800367a:	fa09 f303 	lsl.w	r3, r9, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	46a2      	mov	sl, r4
 8003682:	9304      	str	r3, [sp, #16]
 8003684:	e7d2      	b.n	800362c <_svfiprintf_r+0xa0>
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	1d19      	adds	r1, r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	9103      	str	r1, [sp, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfbb      	ittet	lt
 8003692:	425b      	neglt	r3, r3
 8003694:	f042 0202 	orrlt.w	r2, r2, #2
 8003698:	9307      	strge	r3, [sp, #28]
 800369a:	9307      	strlt	r3, [sp, #28]
 800369c:	bfb8      	it	lt
 800369e:	9204      	strlt	r2, [sp, #16]
 80036a0:	7823      	ldrb	r3, [r4, #0]
 80036a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80036a4:	d10a      	bne.n	80036bc <_svfiprintf_r+0x130>
 80036a6:	7863      	ldrb	r3, [r4, #1]
 80036a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036aa:	d132      	bne.n	8003712 <_svfiprintf_r+0x186>
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	3402      	adds	r4, #2
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	9203      	str	r2, [sp, #12]
 80036b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036ba:	9305      	str	r3, [sp, #20]
 80036bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003774 <_svfiprintf_r+0x1e8>
 80036c0:	2203      	movs	r2, #3
 80036c2:	4650      	mov	r0, sl
 80036c4:	7821      	ldrb	r1, [r4, #0]
 80036c6:	f000 fa19 	bl	8003afc <memchr>
 80036ca:	b138      	cbz	r0, 80036dc <_svfiprintf_r+0x150>
 80036cc:	2240      	movs	r2, #64	@ 0x40
 80036ce:	9b04      	ldr	r3, [sp, #16]
 80036d0:	eba0 000a 	sub.w	r0, r0, sl
 80036d4:	4082      	lsls	r2, r0
 80036d6:	4313      	orrs	r3, r2
 80036d8:	3401      	adds	r4, #1
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e0:	2206      	movs	r2, #6
 80036e2:	4825      	ldr	r0, [pc, #148]	@ (8003778 <_svfiprintf_r+0x1ec>)
 80036e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036e8:	f000 fa08 	bl	8003afc <memchr>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d036      	beq.n	800375e <_svfiprintf_r+0x1d2>
 80036f0:	4b22      	ldr	r3, [pc, #136]	@ (800377c <_svfiprintf_r+0x1f0>)
 80036f2:	bb1b      	cbnz	r3, 800373c <_svfiprintf_r+0x1b0>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	3307      	adds	r3, #7
 80036f8:	f023 0307 	bic.w	r3, r3, #7
 80036fc:	3308      	adds	r3, #8
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003702:	4433      	add	r3, r6
 8003704:	9309      	str	r3, [sp, #36]	@ 0x24
 8003706:	e76a      	b.n	80035de <_svfiprintf_r+0x52>
 8003708:	460c      	mov	r4, r1
 800370a:	2001      	movs	r0, #1
 800370c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003710:	e7a8      	b.n	8003664 <_svfiprintf_r+0xd8>
 8003712:	2300      	movs	r3, #0
 8003714:	f04f 0c0a 	mov.w	ip, #10
 8003718:	4619      	mov	r1, r3
 800371a:	3401      	adds	r4, #1
 800371c:	9305      	str	r3, [sp, #20]
 800371e:	4620      	mov	r0, r4
 8003720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003724:	3a30      	subs	r2, #48	@ 0x30
 8003726:	2a09      	cmp	r2, #9
 8003728:	d903      	bls.n	8003732 <_svfiprintf_r+0x1a6>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0c6      	beq.n	80036bc <_svfiprintf_r+0x130>
 800372e:	9105      	str	r1, [sp, #20]
 8003730:	e7c4      	b.n	80036bc <_svfiprintf_r+0x130>
 8003732:	4604      	mov	r4, r0
 8003734:	2301      	movs	r3, #1
 8003736:	fb0c 2101 	mla	r1, ip, r1, r2
 800373a:	e7f0      	b.n	800371e <_svfiprintf_r+0x192>
 800373c:	ab03      	add	r3, sp, #12
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	462a      	mov	r2, r5
 8003742:	4638      	mov	r0, r7
 8003744:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <_svfiprintf_r+0x1f4>)
 8003746:	a904      	add	r1, sp, #16
 8003748:	f3af 8000 	nop.w
 800374c:	1c42      	adds	r2, r0, #1
 800374e:	4606      	mov	r6, r0
 8003750:	d1d6      	bne.n	8003700 <_svfiprintf_r+0x174>
 8003752:	89ab      	ldrh	r3, [r5, #12]
 8003754:	065b      	lsls	r3, r3, #25
 8003756:	f53f af2d 	bmi.w	80035b4 <_svfiprintf_r+0x28>
 800375a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800375c:	e72c      	b.n	80035b8 <_svfiprintf_r+0x2c>
 800375e:	ab03      	add	r3, sp, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462a      	mov	r2, r5
 8003764:	4638      	mov	r0, r7
 8003766:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <_svfiprintf_r+0x1f4>)
 8003768:	a904      	add	r1, sp, #16
 800376a:	f000 f87d 	bl	8003868 <_printf_i>
 800376e:	e7ed      	b.n	800374c <_svfiprintf_r+0x1c0>
 8003770:	08004f96 	.word	0x08004f96
 8003774:	08004f9c 	.word	0x08004f9c
 8003778:	08004fa0 	.word	0x08004fa0
 800377c:	00000000 	.word	0x00000000
 8003780:	080034d5 	.word	0x080034d5

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4698      	mov	r8, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4607      	mov	r7, r0
 8003792:	4293      	cmp	r3, r2
 8003794:	bfb8      	it	lt
 8003796:	4613      	movlt	r3, r2
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800379e:	460c      	mov	r4, r1
 80037a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc2b      	bgt.n	8003824 <_printf_common+0xa0>
 80037cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	3b00      	subs	r3, #0
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d430      	bmi.n	800383e <_printf_common+0xba>
 80037dc:	4641      	mov	r1, r8
 80037de:	4638      	mov	r0, r7
 80037e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037e4:	47c8      	blx	r9
 80037e6:	3001      	adds	r0, #1
 80037e8:	d023      	beq.n	8003832 <_printf_common+0xae>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf14      	ite	ne
 80037f6:	2500      	movne	r5, #0
 80037f8:	6833      	ldreq	r3, [r6, #0]
 80037fa:	f04f 0600 	mov.w	r6, #0
 80037fe:	bf08      	it	eq
 8003800:	68e5      	ldreq	r5, [r4, #12]
 8003802:	f104 041a 	add.w	r4, r4, #26
 8003806:	bf08      	it	eq
 8003808:	1aed      	subeq	r5, r5, r3
 800380a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800380e:	bf08      	it	eq
 8003810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003814:	4293      	cmp	r3, r2
 8003816:	bfc4      	itt	gt
 8003818:	1a9b      	subgt	r3, r3, r2
 800381a:	18ed      	addgt	r5, r5, r3
 800381c:	42b5      	cmp	r5, r6
 800381e:	d11a      	bne.n	8003856 <_printf_common+0xd2>
 8003820:	2000      	movs	r0, #0
 8003822:	e008      	b.n	8003836 <_printf_common+0xb2>
 8003824:	2301      	movs	r3, #1
 8003826:	4652      	mov	r2, sl
 8003828:	4641      	mov	r1, r8
 800382a:	4638      	mov	r0, r7
 800382c:	47c8      	blx	r9
 800382e:	3001      	adds	r0, #1
 8003830:	d103      	bne.n	800383a <_printf_common+0xb6>
 8003832:	f04f 30ff 	mov.w	r0, #4294967295
 8003836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383a:	3501      	adds	r5, #1
 800383c:	e7c1      	b.n	80037c2 <_printf_common+0x3e>
 800383e:	2030      	movs	r0, #48	@ 0x30
 8003840:	18e1      	adds	r1, r4, r3
 8003842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800384c:	4422      	add	r2, r4
 800384e:	3302      	adds	r3, #2
 8003850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003854:	e7c2      	b.n	80037dc <_printf_common+0x58>
 8003856:	2301      	movs	r3, #1
 8003858:	4622      	mov	r2, r4
 800385a:	4641      	mov	r1, r8
 800385c:	4638      	mov	r0, r7
 800385e:	47c8      	blx	r9
 8003860:	3001      	adds	r0, #1
 8003862:	d0e6      	beq.n	8003832 <_printf_common+0xae>
 8003864:	3601      	adds	r6, #1
 8003866:	e7d9      	b.n	800381c <_printf_common+0x98>

08003868 <_printf_i>:
 8003868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	7e0f      	ldrb	r7, [r1, #24]
 800386e:	4691      	mov	r9, r2
 8003870:	2f78      	cmp	r7, #120	@ 0x78
 8003872:	4680      	mov	r8, r0
 8003874:	460c      	mov	r4, r1
 8003876:	469a      	mov	sl, r3
 8003878:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800387a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800387e:	d807      	bhi.n	8003890 <_printf_i+0x28>
 8003880:	2f62      	cmp	r7, #98	@ 0x62
 8003882:	d80a      	bhi.n	800389a <_printf_i+0x32>
 8003884:	2f00      	cmp	r7, #0
 8003886:	f000 80d3 	beq.w	8003a30 <_printf_i+0x1c8>
 800388a:	2f58      	cmp	r7, #88	@ 0x58
 800388c:	f000 80ba 	beq.w	8003a04 <_printf_i+0x19c>
 8003890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003898:	e03a      	b.n	8003910 <_printf_i+0xa8>
 800389a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800389e:	2b15      	cmp	r3, #21
 80038a0:	d8f6      	bhi.n	8003890 <_printf_i+0x28>
 80038a2:	a101      	add	r1, pc, #4	@ (adr r1, 80038a8 <_printf_i+0x40>)
 80038a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003891 	.word	0x08003891
 80038b4:	08003891 	.word	0x08003891
 80038b8:	08003891 	.word	0x08003891
 80038bc:	08003891 	.word	0x08003891
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003891 	.word	0x08003891
 80038c8:	08003891 	.word	0x08003891
 80038cc:	08003891 	.word	0x08003891
 80038d0:	08003891 	.word	0x08003891
 80038d4:	08003a17 	.word	0x08003a17
 80038d8:	0800393f 	.word	0x0800393f
 80038dc:	080039d1 	.word	0x080039d1
 80038e0:	08003891 	.word	0x08003891
 80038e4:	08003891 	.word	0x08003891
 80038e8:	08003a39 	.word	0x08003a39
 80038ec:	08003891 	.word	0x08003891
 80038f0:	0800393f 	.word	0x0800393f
 80038f4:	08003891 	.word	0x08003891
 80038f8:	08003891 	.word	0x08003891
 80038fc:	080039d9 	.word	0x080039d9
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6032      	str	r2, [r6, #0]
 8003908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800390c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003910:	2301      	movs	r3, #1
 8003912:	e09e      	b.n	8003a52 <_printf_i+0x1ea>
 8003914:	6833      	ldr	r3, [r6, #0]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	6031      	str	r1, [r6, #0]
 800391c:	0606      	lsls	r6, r0, #24
 800391e:	d501      	bpl.n	8003924 <_printf_i+0xbc>
 8003920:	681d      	ldr	r5, [r3, #0]
 8003922:	e003      	b.n	800392c <_printf_i+0xc4>
 8003924:	0645      	lsls	r5, r0, #25
 8003926:	d5fb      	bpl.n	8003920 <_printf_i+0xb8>
 8003928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800392c:	2d00      	cmp	r5, #0
 800392e:	da03      	bge.n	8003938 <_printf_i+0xd0>
 8003930:	232d      	movs	r3, #45	@ 0x2d
 8003932:	426d      	negs	r5, r5
 8003934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003938:	230a      	movs	r3, #10
 800393a:	4859      	ldr	r0, [pc, #356]	@ (8003aa0 <_printf_i+0x238>)
 800393c:	e011      	b.n	8003962 <_printf_i+0xfa>
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	0608      	lsls	r0, r1, #24
 8003944:	f853 5b04 	ldr.w	r5, [r3], #4
 8003948:	d402      	bmi.n	8003950 <_printf_i+0xe8>
 800394a:	0649      	lsls	r1, r1, #25
 800394c:	bf48      	it	mi
 800394e:	b2ad      	uxthmi	r5, r5
 8003950:	2f6f      	cmp	r7, #111	@ 0x6f
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	bf14      	ite	ne
 8003956:	230a      	movne	r3, #10
 8003958:	2308      	moveq	r3, #8
 800395a:	4851      	ldr	r0, [pc, #324]	@ (8003aa0 <_printf_i+0x238>)
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003962:	6866      	ldr	r6, [r4, #4]
 8003964:	2e00      	cmp	r6, #0
 8003966:	bfa8      	it	ge
 8003968:	6821      	ldrge	r1, [r4, #0]
 800396a:	60a6      	str	r6, [r4, #8]
 800396c:	bfa4      	itt	ge
 800396e:	f021 0104 	bicge.w	r1, r1, #4
 8003972:	6021      	strge	r1, [r4, #0]
 8003974:	b90d      	cbnz	r5, 800397a <_printf_i+0x112>
 8003976:	2e00      	cmp	r6, #0
 8003978:	d04b      	beq.n	8003a12 <_printf_i+0x1aa>
 800397a:	4616      	mov	r6, r2
 800397c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003980:	fb03 5711 	mls	r7, r3, r1, r5
 8003984:	5dc7      	ldrb	r7, [r0, r7]
 8003986:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800398a:	462f      	mov	r7, r5
 800398c:	42bb      	cmp	r3, r7
 800398e:	460d      	mov	r5, r1
 8003990:	d9f4      	bls.n	800397c <_printf_i+0x114>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d10b      	bne.n	80039ae <_printf_i+0x146>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	07df      	lsls	r7, r3, #31
 800399a:	d508      	bpl.n	80039ae <_printf_i+0x146>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	6861      	ldr	r1, [r4, #4]
 80039a0:	4299      	cmp	r1, r3
 80039a2:	bfde      	ittt	le
 80039a4:	2330      	movle	r3, #48	@ 0x30
 80039a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ae:	1b92      	subs	r2, r2, r6
 80039b0:	6122      	str	r2, [r4, #16]
 80039b2:	464b      	mov	r3, r9
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f8cd a000 	str.w	sl, [sp]
 80039bc:	aa03      	add	r2, sp, #12
 80039be:	f7ff fee1 	bl	8003784 <_printf_common>
 80039c2:	3001      	adds	r0, #1
 80039c4:	d14a      	bne.n	8003a5c <_printf_i+0x1f4>
 80039c6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ca:	b004      	add	sp, #16
 80039cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f043 0320 	orr.w	r3, r3, #32
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	2778      	movs	r7, #120	@ 0x78
 80039da:	4832      	ldr	r0, [pc, #200]	@ (8003aa4 <_printf_i+0x23c>)
 80039dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	6831      	ldr	r1, [r6, #0]
 80039e4:	061f      	lsls	r7, r3, #24
 80039e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80039ea:	d402      	bmi.n	80039f2 <_printf_i+0x18a>
 80039ec:	065f      	lsls	r7, r3, #25
 80039ee:	bf48      	it	mi
 80039f0:	b2ad      	uxthmi	r5, r5
 80039f2:	6031      	str	r1, [r6, #0]
 80039f4:	07d9      	lsls	r1, r3, #31
 80039f6:	bf44      	itt	mi
 80039f8:	f043 0320 	orrmi.w	r3, r3, #32
 80039fc:	6023      	strmi	r3, [r4, #0]
 80039fe:	b11d      	cbz	r5, 8003a08 <_printf_i+0x1a0>
 8003a00:	2310      	movs	r3, #16
 8003a02:	e7ab      	b.n	800395c <_printf_i+0xf4>
 8003a04:	4826      	ldr	r0, [pc, #152]	@ (8003aa0 <_printf_i+0x238>)
 8003a06:	e7e9      	b.n	80039dc <_printf_i+0x174>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	e7f6      	b.n	8003a00 <_printf_i+0x198>
 8003a12:	4616      	mov	r6, r2
 8003a14:	e7bd      	b.n	8003992 <_printf_i+0x12a>
 8003a16:	6833      	ldr	r3, [r6, #0]
 8003a18:	6825      	ldr	r5, [r4, #0]
 8003a1a:	1d18      	adds	r0, r3, #4
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	6030      	str	r0, [r6, #0]
 8003a20:	062e      	lsls	r6, r5, #24
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	d501      	bpl.n	8003a2a <_printf_i+0x1c2>
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	e002      	b.n	8003a30 <_printf_i+0x1c8>
 8003a2a:	0668      	lsls	r0, r5, #25
 8003a2c:	d5fb      	bpl.n	8003a26 <_printf_i+0x1be>
 8003a2e:	8019      	strh	r1, [r3, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	4616      	mov	r6, r2
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	e7bc      	b.n	80039b2 <_printf_i+0x14a>
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	6032      	str	r2, [r6, #0]
 8003a40:	681e      	ldr	r6, [r3, #0]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f859 	bl	8003afc <memchr>
 8003a4a:	b108      	cbz	r0, 8003a50 <_printf_i+0x1e8>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	6060      	str	r0, [r4, #4]
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	6123      	str	r3, [r4, #16]
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a5a:	e7aa      	b.n	80039b2 <_printf_i+0x14a>
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4649      	mov	r1, r9
 8003a60:	4640      	mov	r0, r8
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	47d0      	blx	sl
 8003a66:	3001      	adds	r0, #1
 8003a68:	d0ad      	beq.n	80039c6 <_printf_i+0x15e>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	079b      	lsls	r3, r3, #30
 8003a6e:	d413      	bmi.n	8003a98 <_printf_i+0x230>
 8003a70:	68e0      	ldr	r0, [r4, #12]
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	4298      	cmp	r0, r3
 8003a76:	bfb8      	it	lt
 8003a78:	4618      	movlt	r0, r3
 8003a7a:	e7a6      	b.n	80039ca <_printf_i+0x162>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4632      	mov	r2, r6
 8003a80:	4649      	mov	r1, r9
 8003a82:	4640      	mov	r0, r8
 8003a84:	47d0      	blx	sl
 8003a86:	3001      	adds	r0, #1
 8003a88:	d09d      	beq.n	80039c6 <_printf_i+0x15e>
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	68e3      	ldr	r3, [r4, #12]
 8003a8e:	9903      	ldr	r1, [sp, #12]
 8003a90:	1a5b      	subs	r3, r3, r1
 8003a92:	42ab      	cmp	r3, r5
 8003a94:	dcf2      	bgt.n	8003a7c <_printf_i+0x214>
 8003a96:	e7eb      	b.n	8003a70 <_printf_i+0x208>
 8003a98:	2500      	movs	r5, #0
 8003a9a:	f104 0619 	add.w	r6, r4, #25
 8003a9e:	e7f5      	b.n	8003a8c <_printf_i+0x224>
 8003aa0:	08004fa7 	.word	0x08004fa7
 8003aa4:	08004fb8 	.word	0x08004fb8

08003aa8 <memmove>:
 8003aa8:	4288      	cmp	r0, r1
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	eb01 0402 	add.w	r4, r1, r2
 8003ab0:	d902      	bls.n	8003ab8 <memmove+0x10>
 8003ab2:	4284      	cmp	r4, r0
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	d807      	bhi.n	8003ac8 <memmove+0x20>
 8003ab8:	1e43      	subs	r3, r0, #1
 8003aba:	42a1      	cmp	r1, r4
 8003abc:	d008      	beq.n	8003ad0 <memmove+0x28>
 8003abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ac6:	e7f8      	b.n	8003aba <memmove+0x12>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	4402      	add	r2, r0
 8003acc:	428a      	cmp	r2, r1
 8003ace:	d100      	bne.n	8003ad2 <memmove+0x2a>
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ada:	e7f7      	b.n	8003acc <memmove+0x24>

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4d05      	ldr	r5, [pc, #20]	@ (8003af8 <_sbrk_r+0x1c>)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fc fdc4 	bl	8000674 <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	200006a0 	.word	0x200006a0

08003afc <memchr>:
 8003afc:	4603      	mov	r3, r0
 8003afe:	b510      	push	{r4, lr}
 8003b00:	b2c9      	uxtb	r1, r1
 8003b02:	4402      	add	r2, r0
 8003b04:	4293      	cmp	r3, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	d101      	bne.n	8003b0e <memchr+0x12>
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	e003      	b.n	8003b16 <memchr+0x1a>
 8003b0e:	7804      	ldrb	r4, [r0, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	428c      	cmp	r4, r1
 8003b14:	d1f6      	bne.n	8003b04 <memchr+0x8>
 8003b16:	bd10      	pop	{r4, pc}

08003b18 <memcpy>:
 8003b18:	440a      	add	r2, r1
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b20:	d100      	bne.n	8003b24 <memcpy+0xc>
 8003b22:	4770      	bx	lr
 8003b24:	b510      	push	{r4, lr}
 8003b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b2a:	4291      	cmp	r1, r2
 8003b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b30:	d1f9      	bne.n	8003b26 <memcpy+0xe>
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <_realloc_r>:
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	4680      	mov	r8, r0
 8003b3a:	4615      	mov	r5, r2
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	b921      	cbnz	r1, 8003b4a <_realloc_r+0x16>
 8003b40:	4611      	mov	r1, r2
 8003b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b46:	f7ff bc39 	b.w	80033bc <_malloc_r>
 8003b4a:	b92a      	cbnz	r2, 8003b58 <_realloc_r+0x24>
 8003b4c:	f7ff fbcc 	bl	80032e8 <_free_r>
 8003b50:	2400      	movs	r4, #0
 8003b52:	4620      	mov	r0, r4
 8003b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b58:	f000 f81a 	bl	8003b90 <_malloc_usable_size_r>
 8003b5c:	4285      	cmp	r5, r0
 8003b5e:	4606      	mov	r6, r0
 8003b60:	d802      	bhi.n	8003b68 <_realloc_r+0x34>
 8003b62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b66:	d8f4      	bhi.n	8003b52 <_realloc_r+0x1e>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f7ff fc26 	bl	80033bc <_malloc_r>
 8003b70:	4607      	mov	r7, r0
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d0ec      	beq.n	8003b50 <_realloc_r+0x1c>
 8003b76:	42b5      	cmp	r5, r6
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	bf28      	it	cs
 8003b7e:	4632      	movcs	r2, r6
 8003b80:	f7ff ffca 	bl	8003b18 <memcpy>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f7ff fbae 	bl	80032e8 <_free_r>
 8003b8c:	463c      	mov	r4, r7
 8003b8e:	e7e0      	b.n	8003b52 <_realloc_r+0x1e>

08003b90 <_malloc_usable_size_r>:
 8003b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b94:	1f18      	subs	r0, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfbc      	itt	lt
 8003b9a:	580b      	ldrlt	r3, [r1, r0]
 8003b9c:	18c0      	addlt	r0, r0, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
