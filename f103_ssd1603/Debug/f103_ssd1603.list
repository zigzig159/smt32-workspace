
f103_ssd1603.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  080022f8  080022f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a8  080036a8  0000503c  2**0
                  CONTENTS
  4 .ARM          00000000  080036a8  080036a8  0000503c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a8  080036a8  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000046a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080036b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  2000003c  080036ec  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080036ec  000054bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067d8  00000000  00000000  00005065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c1  00000000  00000000  0000b83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000621  00000000  00000000  0000d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167b9  00000000  00000000  0000df59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad2f  00000000  00000000  00024712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082080  00000000  00000000  0002f441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b14c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f80  00000000  00000000  000b1504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b3484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022e0 	.word	0x080022e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080022e0 	.word	0x080022e0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1e      	ldr	r3, [pc, #120]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1b      	ldr	r3, [pc, #108]	@ (80001dc <MX_GPIO_Init+0x90>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b18      	ldr	r3, [pc, #96]	@ (80001dc <MX_GPIO_Init+0x90>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a17      	ldr	r2, [pc, #92]	@ (80001dc <MX_GPIO_Init+0x90>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b15      	ldr	r3, [pc, #84]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a11      	ldr	r2, [pc, #68]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0f      	ldr	r3, [pc, #60]	@ (80001dc <MX_GPIO_Init+0x90>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80001ae:	480c      	ldr	r0, [pc, #48]	@ (80001e0 <MX_GPIO_Init+0x94>)
 80001b0:	f000 ffaa 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80001b4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001be:	2300      	movs	r3, #0
 80001c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	4619      	mov	r1, r3
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <MX_GPIO_Init+0x94>)
 80001ce:	f000 fe17 	bl	8000e00 <HAL_GPIO_Init>

}
 80001d2:	bf00      	nop
 80001d4:	3720      	adds	r7, #32
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800

080001e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001e8:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <MX_I2C1_Init+0x50>)
 80001ea:	4a13      	ldr	r2, [pc, #76]	@ (8000238 <MX_I2C1_Init+0x54>)
 80001ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001ee:	4b11      	ldr	r3, [pc, #68]	@ (8000234 <MX_I2C1_Init+0x50>)
 80001f0:	4a12      	ldr	r2, [pc, #72]	@ (800023c <MX_I2C1_Init+0x58>)
 80001f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <MX_I2C1_Init+0x50>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <MX_I2C1_Init+0x50>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <MX_I2C1_Init+0x50>)
 8000202:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000208:	4b0a      	ldr	r3, [pc, #40]	@ (8000234 <MX_I2C1_Init+0x50>)
 800020a:	2200      	movs	r2, #0
 800020c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800020e:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <MX_I2C1_Init+0x50>)
 8000210:	2200      	movs	r2, #0
 8000212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800021a:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000220:	4804      	ldr	r0, [pc, #16]	@ (8000234 <MX_I2C1_Init+0x50>)
 8000222:	f000 ff89 	bl	8001138 <HAL_I2C_Init>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800022c:	f000 f8d9 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000058 	.word	0x20000058
 8000238:	40005400 	.word	0x40005400
 800023c:	000186a0 	.word	0x000186a0

08000240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a15      	ldr	r2, [pc, #84]	@ (80002b0 <HAL_I2C_MspInit+0x70>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d123      	bne.n	80002a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000260:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a13      	ldr	r2, [pc, #76]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0308 	and.w	r3, r3, #8
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000278:	23c0      	movs	r3, #192	@ 0xc0
 800027a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800027c:	2312      	movs	r3, #18
 800027e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000284:	f107 0310 	add.w	r3, r7, #16
 8000288:	4619      	mov	r1, r3
 800028a:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <HAL_I2C_MspInit+0x78>)
 800028c:	f000 fdb8 	bl	8000e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 8000296:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029a:	61d3      	str	r3, [r2, #28]
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <HAL_I2C_MspInit+0x74>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002a8:	bf00      	nop
 80002aa:	3720      	adds	r7, #32
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40005400 	.word	0x40005400
 80002b4:	40021000 	.word	0x40021000
 80002b8:	40010c00 	.word	0x40010c00

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c0:	f000 fc34 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c4:	f000 f848 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c8:	f7ff ff40 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002cc:	f7ff ff8a 	bl	80001e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_init();
 80002d0:	f000 fa27 	bl	8000722 <ssd1306_init>

  ssd1306_set_cursor(5, 0);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fb92 	bl	8000a00 <ssd1306_set_cursor>

  ssd1306_write_string(font6x8, "Rotech ssd1603");
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <main+0x84>)
 80002de:	4a19      	ldr	r2, [pc, #100]	@ (8000344 <main+0x88>)
 80002e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002e4:	f000 fb5a 	bl	800099c <ssd1306_write_string>
  ssd1306_enter();
 80002e8:	f000 fba0 	bl	8000a2c <ssd1306_enter>
  ssd1306_set_cursor(5, 8);
 80002ec:	2108      	movs	r1, #8
 80002ee:	2005      	movs	r0, #5
 80002f0:	f000 fb86 	bl	8000a00 <ssd1306_set_cursor>
  ssd1306_write_string(font6x8, "revolution 1.0");
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <main+0x84>)
 80002f6:	4a14      	ldr	r2, [pc, #80]	@ (8000348 <main+0x8c>)
 80002f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002fc:	f000 fb4e 	bl	800099c <ssd1306_write_string>

  ssd1306_set_cursor(5, 24);
 8000300:	2118      	movs	r1, #24
 8000302:	2005      	movs	r0, #5
 8000304:	f000 fb7c 	bl	8000a00 <ssd1306_set_cursor>
  ssd1306_write_string(font6x8, "build BY JANG");
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <main+0x84>)
 800030a:	4a10      	ldr	r2, [pc, #64]	@ (800034c <main+0x90>)
 800030c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000310:	f000 fb44 	bl	800099c <ssd1306_write_string>

  ssd1306_set_cursor(5, 40);
 8000314:	2128      	movs	r1, #40	@ 0x28
 8000316:	2005      	movs	r0, #5
 8000318:	f000 fb72 	bl	8000a00 <ssd1306_set_cursor>
  ssd1306_write_string(font11x18, "time : ");
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <main+0x94>)
 800031e:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <main+0x98>)
 8000320:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000324:	f000 fb3a 	bl	800099c <ssd1306_write_string>
  ssd1306_update_screen();
 8000328:	f000 fa28 	bl	800077c <ssd1306_update_screen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    step_motor_forward(256);
 800032c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000330:	f000 fbc4 	bl	8000abc <step_motor_forward>
    HAL_Delay(1000);
 8000334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000338:	f000 fc5a 	bl	8000bf0 <HAL_Delay>
    step_motor_forward(256);
 800033c:	bf00      	nop
 800033e:	e7f5      	b.n	800032c <main+0x70>
 8000340:	20000004 	.word	0x20000004
 8000344:	080022f8 	.word	0x080022f8
 8000348:	08002308 	.word	0x08002308
 800034c:	08002318 	.word	0x08002318
 8000350:	2000000c 	.word	0x2000000c
 8000354:	08002328 	.word	0x08002328

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	@ 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	@ 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 ff8e 	bl	8002288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000396:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fb75 	bl	8001a90 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ac:	f000 f819 	bl	80003e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2102      	movs	r1, #2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fde2 	bl	8001f94 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d6:	f000 f804 	bl	80003e2 <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3740      	adds	r7, #64	@ 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e6:	b672      	cpsid	i
}
 80003e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ea:	bf00      	nop
 80003ec:	e7fd      	b.n	80003ea <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	@ (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <NMI_Handler+0x4>

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a4:	f000 fb88 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b8:	f7ff fff8 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004be:	490c      	ldr	r1, [pc, #48]	@ (80004f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c0:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a09      	ldr	r2, [pc, #36]	@ (80004f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d4:	4c09      	ldr	r4, [pc, #36]	@ (80004fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e2:	f001 fed9 	bl	8002298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fee9 	bl	80002bc <main>
  bx lr
 80004ea:	4770      	bx	lr
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80004f4:	080036b0 	.word	0x080036b0
  ldr r2, =_sbss
 80004f8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80004fc:	200004bc 	.word	0x200004bc

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af04      	add	r7, sp, #16
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 800050e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	2301      	movs	r3, #1
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	2200      	movs	r2, #0
 8000520:	2178      	movs	r1, #120	@ 0x78
 8000522:	4803      	ldr	r0, [pc, #12]	@ (8000530 <ssd1306_write_command+0x2c>)
 8000524:	f000 ff4c 	bl	80013c0 <HAL_I2C_Mem_Write>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000058 	.word	0x20000058

08000534 <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af04      	add	r7, sp, #16
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	2240      	movs	r2, #64	@ 0x40
 8000552:	2178      	movs	r1, #120	@ 0x78
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <ssd1306_write_data+0x30>)
 8000556:	f000 ff33 	bl	80013c0 <HAL_I2C_Mem_Write>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000058 	.word	0x20000058

08000568 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8000572:	208d      	movs	r0, #141	@ 0x8d
 8000574:	f7ff ffc6 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffc2 	bl	8000504 <ssd1306_write_command>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 8000592:	2081      	movs	r0, #129	@ 0x81
 8000594:	f7ff ffb6 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(value);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffb2 	bl	8000504 <ssd1306_write_command>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <entire_display_off>:

void entire_display_off()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 80005ac:	20a4      	movs	r0, #164	@ 0xa4
 80005ae:	f7ff ffa9 	bl	8000504 <ssd1306_write_command>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 80005ba:	20a6      	movs	r0, #166	@ 0xa6
 80005bc:	f7ff ffa2 	bl	8000504 <ssd1306_write_command>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 80005c8:	20af      	movs	r0, #175	@ 0xaf
 80005ca:	f7ff ff9b 	bl	8000504 <ssd1306_write_command>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff90 	bl	8000504 <ssd1306_write_command>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff83 	bl	8000504 <ssd1306_write_command>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff76 	bl	8000504 <ssd1306_write_command>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff69 	bl	8000504 <ssd1306_write_command>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff5c 	bl	8000504 <ssd1306_write_command>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 800065e:	20a8      	movs	r0, #168	@ 0xa8
 8000660:	f7ff ff50 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(mux);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff4c 	bl	8000504 <ssd1306_write_command>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff3f 	bl	8000504 <ssd1306_write_command>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 8000698:	20d3      	movs	r0, #211	@ 0xd3
 800069a:	f7ff ff33 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff2f 	bl	8000504 <ssd1306_write_command>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	460a      	mov	r2, r1
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	015b      	lsls	r3, r3, #5
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 80006d6:	20da      	movs	r0, #218	@ 0xda
 80006d8:	f7ff ff14 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff10 	bl	8000504 <ssd1306_write_command>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	b25a      	sxtb	r2, r3
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	4313      	orrs	r3, r2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 800070c:	20d5      	movs	r0, #213	@ 0xd5
 800070e:	f7ff fef9 	bl	8000504 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fef5 	bl	8000504 <ssd1306_write_command>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 8000726:	203f      	movs	r0, #63	@ 0x3f
 8000728:	f7ff ff94 	bl	8000654 <set_multiplex_ratio>

    set_display_offset(0);
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ffae 	bl	800068e <set_display_offset>

    set_display_start_line(0x40);
 8000732:	2040      	movs	r0, #64	@ 0x40
 8000734:	f7ff ff74 	bl	8000620 <set_display_start_line>

    set_segment_remap(0xA1);
 8000738:	20a1      	movs	r0, #161	@ 0xa1
 800073a:	f7ff ff7e 	bl	800063a <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 800073e:	20c8      	movs	r0, #200	@ 0xc8
 8000740:	f7ff ff98 	bl	8000674 <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ffb1 	bl	80006ae <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 800074c:	207f      	movs	r0, #127	@ 0x7f
 800074e:	f7ff ff1b 	bl	8000588 <set_contrast_control>

    entire_display_off();
 8000752:	f7ff ff29 	bl	80005a8 <entire_display_off>

    set_normal_display();
 8000756:	f7ff ff2e 	bl	80005b6 <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 800075a:	2108      	movs	r1, #8
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ffc5 	bl	80006ec <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8000762:	2014      	movs	r0, #20
 8000764:	f7ff ff00 	bl	8000568 <charge_bump_setting>

    set_display_on();
 8000768:	f7ff ff2c 	bl	80005c4 <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 800076c:	f000 f82e 	bl	80007cc <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f944 	bl	8000a00 <ssd1306_set_cursor>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e017      	b.n	80007b8 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3b50      	subs	r3, #80	@ 0x50
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff38 	bl	8000606 <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ff1b 	bl	80005d2 <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 800079c:	2010      	movs	r0, #16
 800079e:	f7ff ff25 	bl	80005ec <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	01db      	lsls	r3, r3, #7
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <ssd1306_update_screen+0x4c>)
 80007a8:	4413      	add	r3, r2
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fec1 	bl	8000534 <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3301      	adds	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	dde4      	ble.n	8000788 <ssd1306_update_screen+0xc>
    }
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000ac 	.word	0x200000ac

080007cc <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e007      	b.n	80007e8 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 80007d8:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <ssd1306_black_screen+0x30>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3301      	adds	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007ee:	dbf3      	blt.n	80007d8 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 80007f0:	f7ff ffc4 	bl	800077c <ssd1306_update_screen>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000ac 	.word	0x200000ac

08000800 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	4603      	mov	r3, r0
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4413      	add	r3, r2
 800081e:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <ssd1306_black_pixel+0x54>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4013      	ands	r3, r2
 8000838:	b259      	sxtb	r1, r3
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	4603      	mov	r3, r0
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	4413      	add	r3, r2
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4a03      	ldr	r2, [pc, #12]	@ (8000854 <ssd1306_black_pixel+0x54>)
 8000846:	54d1      	strb	r1, [r2, r3]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200000ac 	.word	0x200000ac

08000858 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	b2d8      	uxtb	r0, r3
 8000870:	4603      	mov	r3, r0
 8000872:	01db      	lsls	r3, r3, #7
 8000874:	4413      	add	r3, r2
 8000876:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <ssd1306_white_pixel+0x50>)
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b25a      	sxtb	r2, r3
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	b25b      	sxtb	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b259      	sxtb	r1, r3
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	4603      	mov	r3, r0
 8000892:	01db      	lsls	r3, r3, #7
 8000894:	4413      	add	r3, r2
 8000896:	b2c9      	uxtb	r1, r1
 8000898:	4a03      	ldr	r2, [pc, #12]	@ (80008a8 <ssd1306_white_pixel+0x50>)
 800089a:	54d1      	strb	r1, [r2, r3]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200000ac 	.word	0x200000ac

080008ac <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80008ba:	4613      	mov	r3, r2
 80008bc:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b1f      	cmp	r3, #31
 80008c2:	d902      	bls.n	80008ca <ssd1306_write_char+0x1e>
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80008c8:	d901      	bls.n	80008ce <ssd1306_write_char+0x22>
        return 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e060      	b.n	8000990 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <ssd1306_write_char+0xec>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	7a3b      	ldrb	r3, [r7, #8]
 80008d6:	4413      	add	r3, r2
 80008d8:	2b80      	cmp	r3, #128	@ 0x80
 80008da:	dc06      	bgt.n	80008ea <ssd1306_write_char+0x3e>
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <ssd1306_write_char+0xec>)
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	461a      	mov	r2, r3
 80008e2:	7a7b      	ldrb	r3, [r7, #9]
 80008e4:	4413      	add	r3, r2
 80008e6:	2b40      	cmp	r3, #64	@ 0x40
 80008e8:	dd01      	ble.n	80008ee <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e050      	b.n	8000990 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
 80008f2:	e040      	b.n	8000976 <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	3b20      	subs	r3, #32
 80008fa:	7a79      	ldrb	r1, [r7, #9]
 80008fc:	fb03 f101 	mul.w	r1, r3, r1
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	440b      	add	r3, r1
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	e029      	b.n	8000966 <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00f      	beq.n	8000942 <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <ssd1306_write_char+0xec>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <ssd1306_write_char+0xec>)
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4619      	mov	r1, r3
 800093c:	f7ff ff8c 	bl	8000858 <ssd1306_white_pixel>
 8000940:	e00e      	b.n	8000960 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <ssd1306_write_char+0xec>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4413      	add	r3, r2
 800094c:	b2d8      	uxtb	r0, r3
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <ssd1306_write_char+0xec>)
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4413      	add	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	f7ff ff50 	bl	8000800 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3301      	adds	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	461a      	mov	r2, r3
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4293      	cmp	r3, r2
 800096e:	dbd0      	blt.n	8000912 <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	3301      	adds	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	7a7b      	ldrb	r3, [r7, #9]
 8000978:	461a      	mov	r2, r3
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	4293      	cmp	r3, r2
 800097e:	dbb9      	blt.n	80008f4 <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <ssd1306_write_char+0xec>)
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	7a3b      	ldrb	r3, [r7, #8]
 8000986:	4413      	add	r3, r2
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <ssd1306_write_char+0xec>)
 800098c:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800098e:	79fb      	ldrb	r3, [r7, #7]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200004ac 	.word	0x200004ac

0800099c <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80009aa:	607a      	str	r2, [r7, #4]
    current_font = font;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <ssd1306_write_string+0x60>)
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b8:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 80009bc:	e014      	b.n	80009e8 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009cc:	f7ff ff6e 	bl	80008ac <ssd1306_write_char>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d002      	beq.n	80009e2 <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	e008      	b.n	80009f4 <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3301      	adds	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
    while(*str)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1e6      	bne.n	80009be <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200004b0 	.word	0x200004b0

08000a00 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	460a      	mov	r2, r1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <ssd1306_set_cursor+0x28>)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 8000a16:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <ssd1306_set_cursor+0x28>)
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	7053      	strb	r3, [r2, #1]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200004ac 	.word	0x200004ac

08000a2c <ssd1306_enter>:

void ssd1306_enter()
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <ssd1306_enter+0x24>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <ssd1306_enter+0x24>)
 8000a38:	785a      	ldrb	r2, [r3, #1]
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <ssd1306_enter+0x28>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b03      	ldr	r3, [pc, #12]	@ (8000a50 <ssd1306_enter+0x24>)
 8000a44:	705a      	strb	r2, [r3, #1]
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200004ac 	.word	0x200004ac
 8000a54:	200004b0 	.word	0x200004b0

08000a58 <set_step>:
  {0, 0, 0, 1},
  {1, 0, 0, 1}
};

// 스텝핀 제어 함수
void set_step(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	4611      	mov	r1, r2
 8000a64:	461a      	mov	r2, r3
 8000a66:	4623      	mov	r3, r4
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	717b      	strb	r3, [r7, #5]
 8000a72:	4613      	mov	r3, r2
 8000a74:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, a);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <set_step+0x60>)
 8000a80:	f000 fb42 	bl	8001108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, b);
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <set_step+0x60>)
 8000a8e:	f000 fb3b 	bl	8001108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, c);
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	461a      	mov	r2, r3
 8000a96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <set_step+0x60>)
 8000a9c:	f000 fb34 	bl	8001108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, d);
 8000aa0:	793b      	ldrb	r3, [r7, #4]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <set_step+0x60>)
 8000aaa:	f000 fb2d 	bl	8001108 <HAL_GPIO_WritePin>
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40010800 	.word	0x40010800

08000abc <step_motor_forward>:

void step_motor_forward(uint16_t steps) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < steps; i++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	81fb      	strh	r3, [r7, #14]
 8000aca:	e023      	b.n	8000b14 <step_motor_forward+0x58>
    for (uint8_t j = 0; j < 8; j++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	737b      	strb	r3, [r7, #13]
 8000ad0:	e01a      	b.n	8000b08 <step_motor_forward+0x4c>
      set_step(step_sequence[j][0], step_sequence[j][1],
 8000ad2:	7b7b      	ldrb	r3, [r7, #13]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <step_motor_forward+0x6c>)
 8000ad6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8000ada:	7b7b      	ldrb	r3, [r7, #13]
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <step_motor_forward+0x6c>)
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	7859      	ldrb	r1, [r3, #1]
 8000ae4:	7b7b      	ldrb	r3, [r7, #13]
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <step_motor_forward+0x6c>)
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	789a      	ldrb	r2, [r3, #2]
 8000aee:	7b7b      	ldrb	r3, [r7, #13]
 8000af0:	4c0d      	ldr	r4, [pc, #52]	@ (8000b28 <step_motor_forward+0x6c>)
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4423      	add	r3, r4
 8000af6:	78db      	ldrb	r3, [r3, #3]
 8000af8:	f7ff ffae 	bl	8000a58 <set_step>
               step_sequence[j][2], step_sequence[j][3]);
      HAL_Delay(1); // 속도 조절
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 f877 	bl	8000bf0 <HAL_Delay>
    for (uint8_t j = 0; j < 8; j++) {
 8000b02:	7b7b      	ldrb	r3, [r7, #13]
 8000b04:	3301      	adds	r3, #1
 8000b06:	737b      	strb	r3, [r7, #13]
 8000b08:	7b7b      	ldrb	r3, [r7, #13]
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d9e1      	bls.n	8000ad2 <step_motor_forward+0x16>
  for (uint16_t i = 0; i < steps; i++) {
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	3301      	adds	r3, #1
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	89fa      	ldrh	r2, [r7, #14]
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d3d7      	bcc.n	8000acc <step_motor_forward+0x10>
    }
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000014 	.word	0x20000014

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f92b 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fc52 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f935 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f90b 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000038 	.word	0x20000038
 8000bb4:	20000034 	.word	0x20000034

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a03      	ldr	r2, [pc, #12]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	200004b8 	.word	0x200004b8

08000bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b02      	ldr	r3, [pc, #8]	@ (8000bec <HAL_GetTick+0x10>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	200004b8 	.word	0x200004b8

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff fff0 	bl	8000bdc <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffe0 	bl	8000bdc <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000038 	.word	0x20000038

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff90 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff49 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff5e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff90 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5f 	bl	8000c9c <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffb0 	bl	8000d54 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	@ 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e169      	b.n	80010e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8158 	bne.w	80010e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a9a      	ldr	r2, [pc, #616]	@ (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d05e      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e3c:	4a98      	ldr	r2, [pc, #608]	@ (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d875      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e42:	4a98      	ldr	r2, [pc, #608]	@ (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d058      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e48:	4a96      	ldr	r2, [pc, #600]	@ (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d86f      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e4e:	4a96      	ldr	r2, [pc, #600]	@ (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d052      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e54:	4a94      	ldr	r2, [pc, #592]	@ (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d869      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e5a:	4a94      	ldr	r2, [pc, #592]	@ (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d04c      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e60:	4a92      	ldr	r2, [pc, #584]	@ (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d863      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e66:	4a92      	ldr	r2, [pc, #584]	@ (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d046      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e6c:	4a90      	ldr	r2, [pc, #576]	@ (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d85d      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d82a      	bhi.n	8000ecc <HAL_GPIO_Init+0xcc>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d859      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <HAL_GPIO_Init+0x80>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000ed5 	.word	0x08000ed5
 8000e88:	08000ee7 	.word	0x08000ee7
 8000e8c:	08000f29 	.word	0x08000f29
 8000e90:	08000f2f 	.word	0x08000f2f
 8000e94:	08000f2f 	.word	0x08000f2f
 8000e98:	08000f2f 	.word	0x08000f2f
 8000e9c:	08000f2f 	.word	0x08000f2f
 8000ea0:	08000f2f 	.word	0x08000f2f
 8000ea4:	08000f2f 	.word	0x08000f2f
 8000ea8:	08000f2f 	.word	0x08000f2f
 8000eac:	08000f2f 	.word	0x08000f2f
 8000eb0:	08000f2f 	.word	0x08000f2f
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f2f 	.word	0x08000f2f
 8000ebc:	08000f2f 	.word	0x08000f2f
 8000ec0:	08000f2f 	.word	0x08000f2f
 8000ec4:	08000edd 	.word	0x08000edd
 8000ec8:	08000ef1 	.word	0x08000ef1
 8000ecc:	4a79      	ldr	r2, [pc, #484]	@ (80010b4 <HAL_GPIO_Init+0x2b4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed2:	e02c      	b.n	8000f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e029      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e024      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3308      	adds	r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e01f      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e01a      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e013      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	611a      	str	r2, [r3, #16]
          break;
 8000f1a:	e009      	b.n	8000f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	615a      	str	r2, [r3, #20]
          break;
 8000f26:	e003      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          break;
 8000f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	@ 0xff
 8000f34:	d801      	bhi.n	8000f3a <HAL_GPIO_Init+0x13a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_Init+0x13e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2bff      	cmp	r3, #255	@ 0xff
 8000f44:	d802      	bhi.n	8000f4c <HAL_GPIO_Init+0x14c>
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x152>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	210f      	movs	r1, #15
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	401a      	ands	r2, r3
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80b1 	beq.w	80010e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f80:	4b4d      	ldr	r3, [pc, #308]	@ (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	@ (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f98:	4a48      	ldr	r2, [pc, #288]	@ (80010bc <HAL_GPIO_Init+0x2bc>)
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a40      	ldr	r2, [pc, #256]	@ (80010c0 <HAL_GPIO_Init+0x2c0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1ec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80010c4 <HAL_GPIO_Init+0x2c4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3e      	ldr	r2, [pc, #248]	@ (80010c8 <HAL_GPIO_Init+0x2c8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80010cc <HAL_GPIO_Init+0x2cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1e0>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fec:	2300      	movs	r3, #0
 8000fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffe:	492f      	ldr	r1, [pc, #188]	@ (80010bc <HAL_GPIO_Init+0x2bc>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001018:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	492c      	ldr	r1, [pc, #176]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4928      	ldr	r1, [pc, #160]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4922      	ldr	r1, [pc, #136]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	491e      	ldr	r1, [pc, #120]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4918      	ldr	r1, [pc, #96]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	4914      	ldr	r1, [pc, #80]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d021      	beq.n	80010d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	490e      	ldr	r1, [pc, #56]	@ (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e021      	b.n	80010e2 <HAL_GPIO_Init+0x2e2>
 800109e:	bf00      	nop
 80010a0:	10320000 	.word	0x10320000
 80010a4:	10310000 	.word	0x10310000
 80010a8:	10220000 	.word	0x10220000
 80010ac:	10210000 	.word	0x10210000
 80010b0:	10120000 	.word	0x10120000
 80010b4:	10110000 	.word	0x10110000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	43db      	mvns	r3, r3
 80010dc:	4909      	ldr	r1, [pc, #36]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010de:	4013      	ands	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	3301      	adds	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	fa22 f303 	lsr.w	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f47f ae8e 	bne.w	8000e14 <HAL_GPIO_Init+0x14>
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	372c      	adds	r7, #44	@ 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e12b      	b.n	80013a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d106      	bne.n	8001164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff f86e 	bl	8000240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2224      	movs	r2, #36	@ 0x24
 8001168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800118a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800119a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800119c:	f001 f842 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a81      	ldr	r2, [pc, #516]	@ (80013ac <HAL_I2C_Init+0x274>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d807      	bhi.n	80011bc <HAL_I2C_Init+0x84>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a80      	ldr	r2, [pc, #512]	@ (80013b0 <HAL_I2C_Init+0x278>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bf94      	ite	ls
 80011b4:	2301      	movls	r3, #1
 80011b6:	2300      	movhi	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	e006      	b.n	80011ca <HAL_I2C_Init+0x92>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4a7d      	ldr	r2, [pc, #500]	@ (80013b4 <HAL_I2C_Init+0x27c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bf94      	ite	ls
 80011c4:	2301      	movls	r3, #1
 80011c6:	2300      	movhi	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0e7      	b.n	80013a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4a78      	ldr	r2, [pc, #480]	@ (80013b8 <HAL_I2C_Init+0x280>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a6a      	ldr	r2, [pc, #424]	@ (80013ac <HAL_I2C_Init+0x274>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d802      	bhi.n	800120c <HAL_I2C_Init+0xd4>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3301      	adds	r3, #1
 800120a:	e009      	b.n	8001220 <HAL_I2C_Init+0xe8>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001212:	fb02 f303 	mul.w	r3, r2, r3
 8001216:	4a69      	ldr	r2, [pc, #420]	@ (80013bc <HAL_I2C_Init+0x284>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	3301      	adds	r3, #1
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	430b      	orrs	r3, r1
 8001226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	495c      	ldr	r1, [pc, #368]	@ (80013ac <HAL_I2C_Init+0x274>)
 800123c:	428b      	cmp	r3, r1
 800123e:	d819      	bhi.n	8001274 <HAL_I2C_Init+0x13c>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1e59      	subs	r1, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fbb1 f3f3 	udiv	r3, r1, r3
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001254:	400b      	ands	r3, r1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <HAL_I2C_Init+0x138>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1e59      	subs	r1, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fbb1 f3f3 	udiv	r3, r1, r3
 8001268:	3301      	adds	r3, #1
 800126a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126e:	e051      	b.n	8001314 <HAL_I2C_Init+0x1dc>
 8001270:	2304      	movs	r3, #4
 8001272:	e04f      	b.n	8001314 <HAL_I2C_Init+0x1dc>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d111      	bne.n	80012a0 <HAL_I2C_Init+0x168>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e58      	subs	r0, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e012      	b.n	80012c6 <HAL_I2C_Init+0x18e>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1e58      	subs	r0, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	0099      	lsls	r1, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_Init+0x196>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e022      	b.n	8001314 <HAL_I2C_Init+0x1dc>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10e      	bne.n	80012f4 <HAL_I2C_Init+0x1bc>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1e58      	subs	r0, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6859      	ldr	r1, [r3, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	440b      	add	r3, r1
 80012e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f2:	e00f      	b.n	8001314 <HAL_I2C_Init+0x1dc>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1e58      	subs	r0, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	0099      	lsls	r1, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	fbb0 f3f3 	udiv	r3, r0, r3
 800130a:	3301      	adds	r3, #1
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	6809      	ldr	r1, [r1, #0]
 8001318:	4313      	orrs	r3, r2
 800131a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6911      	ldr	r1, [r2, #16]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68d2      	ldr	r2, [r2, #12]
 800134e:	4311      	orrs	r1, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2220      	movs	r2, #32
 800138e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	000186a0 	.word	0x000186a0
 80013b0:	001e847f 	.word	0x001e847f
 80013b4:	003d08ff 	.word	0x003d08ff
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	460b      	mov	r3, r1
 80013d4:	813b      	strh	r3, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013da:	f7ff fbff 	bl	8000bdc <HAL_GetTick>
 80013de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	f040 80d9 	bne.w	80015a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2319      	movs	r3, #25
 80013f4:	2201      	movs	r2, #1
 80013f6:	496d      	ldr	r1, [pc, #436]	@ (80015ac <HAL_I2C_Mem_Write+0x1ec>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f971 	bl	80016e0 <I2C_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001404:	2302      	movs	r3, #2
 8001406:	e0cc      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Mem_Write+0x56>
 8001412:	2302      	movs	r3, #2
 8001414:	e0c5      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d007      	beq.n	800143c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2221      	movs	r2, #33	@ 0x21
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2240      	movs	r2, #64	@ 0x40
 8001458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a4d      	ldr	r2, [pc, #308]	@ (80015b0 <HAL_I2C_Mem_Write+0x1f0>)
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147e:	88f8      	ldrh	r0, [r7, #6]
 8001480:	893a      	ldrh	r2, [r7, #8]
 8001482:	8979      	ldrh	r1, [r7, #10]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f890 	bl	80015b4 <I2C_RequestMemoryWrite>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d052      	beq.n	8001540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e081      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 fa36 	bl	8001914 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00d      	beq.n	80014ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d107      	bne.n	80014c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06b      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b04      	cmp	r3, #4
 8001506:	d11b      	bne.n	8001540 <HAL_I2C_Mem_Write+0x180>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	d017      	beq.n	8001540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1aa      	bne.n	800149e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fa29 	bl	80019a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00d      	beq.n	8001574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	2b04      	cmp	r3, #4
 800155e:	d107      	bne.n	8001570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800156e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e016      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015a0:	2302      	movs	r3, #2
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	00100002 	.word	0x00100002
 80015b0:	ffff0000 	.word	0xffff0000

080015b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	817b      	strh	r3, [r7, #10]
 80015c6:	460b      	mov	r3, r1
 80015c8:	813b      	strh	r3, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f878 	bl	80016e0 <I2C_WaitOnFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00d      	beq.n	8001612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001604:	d103      	bne.n	800160e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e05f      	b.n	80016d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001612:	897b      	ldrh	r3, [r7, #10]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	6a3a      	ldr	r2, [r7, #32]
 8001626:	492d      	ldr	r1, [pc, #180]	@ (80016dc <I2C_RequestMemoryWrite+0x128>)
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f8d3 	bl	80017d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e04c      	b.n	80016d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001650:	6a39      	ldr	r1, [r7, #32]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f95e 	bl	8001914 <I2C_WaitOnTXEFlagUntilTimeout>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00d      	beq.n	800167a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	2b04      	cmp	r3, #4
 8001664:	d107      	bne.n	8001676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e02b      	b.n	80016d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001680:	893b      	ldrh	r3, [r7, #8]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	e021      	b.n	80016d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800168c:	893b      	ldrh	r3, [r7, #8]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f938 	bl	8001914 <I2C_WaitOnTXEFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00d      	beq.n	80016c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d107      	bne.n	80016c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e005      	b.n	80016d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016c6:	893b      	ldrh	r3, [r7, #8]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	00010002 	.word	0x00010002

080016e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f0:	e048      	b.n	8001784 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d044      	beq.n	8001784 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fa:	f7ff fa6f 	bl	8000bdc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d302      	bcc.n	8001710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d139      	bne.n	8001784 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10d      	bne.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x56>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	43da      	mvns	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4013      	ands	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	e00c      	b.n	8001750 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	43da      	mvns	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4013      	ands	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	429a      	cmp	r2, r3
 8001754:	d116      	bne.n	8001784 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e023      	b.n	80017cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10d      	bne.n	80017aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	43da      	mvns	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4013      	ands	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	e00c      	b.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	43da      	mvns	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4013      	ands	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d093      	beq.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017e2:	e071      	b.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f2:	d123      	bne.n	800183c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001802:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800180c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e067      	b.n	800190c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d041      	beq.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001844:	f7ff f9ca 	bl	8000bdc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d302      	bcc.n	800185a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d136      	bne.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d10c      	bne.n	800187e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4013      	ands	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	e00b      	b.n	8001896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	43da      	mvns	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4013      	ands	r3, r2
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e021      	b.n	800190c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10c      	bne.n	80018ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	43da      	mvns	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4013      	ands	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf14      	ite	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	2300      	moveq	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	e00b      	b.n	8001904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4013      	ands	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f af6d 	bne.w	80017e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001920:	e034      	b.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f886 	bl	8001a34 <I2C_IsAcknowledgeFailed>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e034      	b.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d028      	beq.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193a:	f7ff f94f 	bl	8000bdc <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d302      	bcc.n	8001950 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11d      	bne.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195a:	2b80      	cmp	r3, #128	@ 0x80
 800195c:	d016      	beq.n	800198c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e007      	b.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b80      	cmp	r3, #128	@ 0x80
 8001998:	d1c3      	bne.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019b0:	e034      	b.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f83e 	bl	8001a34 <I2C_IsAcknowledgeFailed>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e034      	b.n	8001a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d028      	beq.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	f7ff f907 	bl	8000bdc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d302      	bcc.n	80019e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11d      	bne.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d016      	beq.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d1c3      	bne.n	80019b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4a:	d11b      	bne.n	8001a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e272      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001abc:	4b8f      	ldr	r3, [pc, #572]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b89      	ldr	r3, [pc, #548]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x12c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e24c      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x76>
 8001af8:	4b80      	ldr	r3, [pc, #512]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7f      	ldr	r2, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7a      	ldr	r2, [pc, #488]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b78      	ldr	r3, [pc, #480]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a77      	ldr	r2, [pc, #476]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xbc>
 8001b32:	4b72      	ldr	r3, [pc, #456]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a71      	ldr	r2, [pc, #452]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a67      	ldr	r2, [pc, #412]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f836 	bl	8000bdc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f832 	bl	8000bdc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e200      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe4>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f822 	bl	8000bdc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f81e 	bl	8000bdc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1ec      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x10c>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b4c      	ldr	r3, [pc, #304]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd6:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1c0      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4939      	ldr	r1, [pc, #228]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e03a      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffd7 	bl	8000bdc <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7fe ffd3 	bl	8000bdc <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1a1      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4927      	ldr	r1, [pc, #156]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ffb6 	bl	8000bdc <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7fe ffb2 	bl	8000bdc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e180      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d03a      	beq.n	8001d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe ff96 	bl	8000bdc <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7fe ff92 	bl	8000bdc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e160      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 faba 	bl	800224c <RCC_Delay>
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7fe ff7c 	bl	8000bdc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7fe ff78 	bl	8000bdc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e146      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	42420000 	.word	0x42420000
 8001d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b92      	ldr	r3, [pc, #584]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e9      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a6 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b8b      	ldr	r3, [pc, #556]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a87      	ldr	r2, [pc, #540]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b85      	ldr	r3, [pc, #532]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7fe ff39 	bl	8000bdc <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7fe ff35 	bl	8000bdc <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	@ 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e103      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b75      	ldr	r3, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x312>
 8001d94:	4b6f      	ldr	r3, [pc, #444]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a6e      	ldr	r2, [pc, #440]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001daa:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a69      	ldr	r2, [pc, #420]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a66      	ldr	r2, [pc, #408]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a60      	ldr	r2, [pc, #384]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a5a      	ldr	r2, [pc, #360]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fee9 	bl	8000bdc <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe fee5 	bl	8000bdc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0b1      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b4b      	ldr	r3, [pc, #300]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x37e>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fed3 	bl	8000bdc <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7fe fecf 	bl	8000bdc <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e09b      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b3c      	ldr	r3, [pc, #240]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a3b      	ldr	r2, [pc, #236]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d061      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d146      	bne.n	8001f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b33      	ldr	r3, [pc, #204]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fea3 	bl	8000bdc <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe fe9f 	bl	8000bdc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e06d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4921      	ldr	r1, [pc, #132]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a19      	ldr	r1, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	491b      	ldr	r1, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fe73 	bl	8000bdc <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fe6f 	bl	8000bdc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e03d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x46a>
 8001f18:	e035      	b.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe5c 	bl	8000bdc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fe58 	bl	8000bdc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e026      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x498>
 8001f46:	e01e      	b.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e019      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x500>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000

08001f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d0      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b67      	ldr	r3, [pc, #412]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4965      	ldr	r1, [pc, #404]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002012:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d040      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e073      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002072:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 0203 	bic.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4936      	ldr	r1, [pc, #216]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe fdaa 	bl	8000bdc <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fda6 	bl	8000bdc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e053      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 020c 	and.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1eb      	bne.n	800208c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d210      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4922      	ldr	r1, [pc, #136]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f821 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1cc>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1d0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fd08 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	08002330 	.word	0x08002330
 8002160:	20000000 	.word	0x20000000
 8002164:	20000034 	.word	0x20000034

08002168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b04      	cmp	r3, #4
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x30>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x36>
 8002196:	e027      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e027      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x94>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0c5b      	lsrs	r3, r3, #17
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	fb03 f202 	mul.w	r2, r3, r2
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e004      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_RCC_GetSysClockFreq+0xa4>)
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	613b      	str	r3, [r7, #16]
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ea:	613b      	str	r3, [r7, #16]
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	693b      	ldr	r3, [r7, #16]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	007a1200 	.word	0x007a1200
 8002204:	08003694 	.word	0x08003694
 8002208:	080036a4 	.word	0x080036a4
 800220c:	003d0900 	.word	0x003d0900

08002210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <HAL_RCC_GetHCLKFreq+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff2 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	08002340 	.word	0x08002340

0800224c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <RCC_Delay+0x34>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <RCC_Delay+0x38>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0a5b      	lsrs	r3, r3, #9
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002268:	bf00      	nop
  }
  while (Delay --);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	60fa      	str	r2, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <RCC_Delay+0x1c>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000000 	.word	0x20000000
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <memset>:
 8002288:	4603      	mov	r3, r0
 800228a:	4402      	add	r2, r0
 800228c:	4293      	cmp	r3, r2
 800228e:	d100      	bne.n	8002292 <memset+0xa>
 8002290:	4770      	bx	lr
 8002292:	f803 1b01 	strb.w	r1, [r3], #1
 8002296:	e7f9      	b.n	800228c <memset+0x4>

08002298 <__libc_init_array>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	2600      	movs	r6, #0
 800229c:	4d0c      	ldr	r5, [pc, #48]	@ (80022d0 <__libc_init_array+0x38>)
 800229e:	4c0d      	ldr	r4, [pc, #52]	@ (80022d4 <__libc_init_array+0x3c>)
 80022a0:	1b64      	subs	r4, r4, r5
 80022a2:	10a4      	asrs	r4, r4, #2
 80022a4:	42a6      	cmp	r6, r4
 80022a6:	d109      	bne.n	80022bc <__libc_init_array+0x24>
 80022a8:	f000 f81a 	bl	80022e0 <_init>
 80022ac:	2600      	movs	r6, #0
 80022ae:	4d0a      	ldr	r5, [pc, #40]	@ (80022d8 <__libc_init_array+0x40>)
 80022b0:	4c0a      	ldr	r4, [pc, #40]	@ (80022dc <__libc_init_array+0x44>)
 80022b2:	1b64      	subs	r4, r4, r5
 80022b4:	10a4      	asrs	r4, r4, #2
 80022b6:	42a6      	cmp	r6, r4
 80022b8:	d105      	bne.n	80022c6 <__libc_init_array+0x2e>
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
 80022bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c0:	4798      	blx	r3
 80022c2:	3601      	adds	r6, #1
 80022c4:	e7ee      	b.n	80022a4 <__libc_init_array+0xc>
 80022c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ca:	4798      	blx	r3
 80022cc:	3601      	adds	r6, #1
 80022ce:	e7f2      	b.n	80022b6 <__libc_init_array+0x1e>
 80022d0:	080036a8 	.word	0x080036a8
 80022d4:	080036a8 	.word	0x080036a8
 80022d8:	080036a8 	.word	0x080036a8
 80022dc:	080036ac 	.word	0x080036ac

080022e0 <_init>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	bf00      	nop
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr

080022ec <_fini>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr
