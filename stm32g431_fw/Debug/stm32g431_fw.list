
stm32g431_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024dc  080024dc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024dc  080024dc  000034dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024e0  080024e0  000034e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080024f0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080024f0  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007439  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  0000b475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000636  00000000  00000000  0000d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c844  00000000  00000000  0000dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b09  00000000  00000000  0002a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b47  00000000  00000000  00033ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  000e5a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e7a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080024b4 	.word	0x080024b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080024b4 	.word	0x080024b4

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b2a      	ldr	r3, [pc, #168]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a29      	ldr	r2, [pc, #164]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b24      	ldr	r3, [pc, #144]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a23      	ldr	r2, [pc, #140]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a1d      	ldr	r2, [pc, #116]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <MX_GPIO_Init+0xc0>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800027c:	4817      	ldr	r0, [pc, #92]	@ (80002dc <MX_GPIO_Init+0xc4>)
 800027e:	f000 ffa5 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028c:	f000 ff9e 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000290:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <MX_GPIO_Init+0xc4>)
 80002aa:	f000 fe0d 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 80002ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80002b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4619      	mov	r1, r3
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ca:	f000 fdfd 	bl	8000ec8 <HAL_GPIO_Init>

}
 80002ce:	bf00      	nop
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	48000800 	.word	0x48000800

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f000 fc78 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f873 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f7ff ff93 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002f2:	f000 f8c1 	bl	8000478 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000300:	f000 ff64 	bl	80011cc <HAL_GPIO_WritePin>

   ST7789_Init();
 8000304:	f000 fa4a 	bl	800079c <ST7789_Init>

   // ?���?? ?��?��?��
   ST7789_FillScreen(COLOR_BLACK);
 8000308:	2000      	movs	r0, #0
 800030a:	f000 fbc4 	bl	8000a96 <ST7789_FillScreen>
   HAL_Delay(500);
 800030e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000312:	f000 fcd3 	bl	8000cbc <HAL_Delay>

   ST7789_FillScreen(COLOR_RED);
 8000316:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800031a:	f000 fbbc 	bl	8000a96 <ST7789_FillScreen>
   HAL_Delay(500);
 800031e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000322:	f000 fccb 	bl	8000cbc <HAL_Delay>
   ST7789_FillScreen(COLOR_GREEN);
 8000326:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800032a:	f000 fbb4 	bl	8000a96 <ST7789_FillScreen>
   HAL_Delay(500);
 800032e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000332:	f000 fcc3 	bl	8000cbc <HAL_Delay>
   ST7789_FillScreen(COLOR_BLUE);
 8000336:	201f      	movs	r0, #31
 8000338:	f000 fbad 	bl	8000a96 <ST7789_FillScreen>
   HAL_Delay(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000340:	f000 fcbc 	bl	8000cbc <HAL_Delay>


   ST7789_FillScreen(COLOR_BLACK);
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fba6 	bl	8000a96 <ST7789_FillScreen>
   ST7789_FillRect(10, 10, 100, 60, COLOR_YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	233c      	movs	r3, #60	@ 0x3c
 8000352:	2264      	movs	r2, #100	@ 0x64
 8000354:	210a      	movs	r1, #10
 8000356:	200a      	movs	r0, #10
 8000358:	f000 fa73 	bl	8000842 <ST7789_FillRect>
   ST7789_DrawRect(8, 8, 104, 64, COLOR_WHITE);
 800035c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2340      	movs	r3, #64	@ 0x40
 8000364:	2268      	movs	r2, #104	@ 0x68
 8000366:	2108      	movs	r1, #8
 8000368:	2008      	movs	r0, #8
 800036a:	f000 fb4e 	bl	8000a0a <ST7789_DrawRect>
   ST7789_DrawPixel(120, 120, COLOR_CYAN);
 800036e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000372:	2178      	movs	r1, #120	@ 0x78
 8000374:	2078      	movs	r0, #120	@ 0x78
 8000376:	f000 fa45 	bl	8000804 <ST7789_DrawPixel>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    static uint16_t x=0;
       ST7789_FillRect(x, 180, 20, 20, COLOR_MAGENTA);
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <main+0xec>)
 800037c:	8818      	ldrh	r0, [r3, #0]
 800037e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2314      	movs	r3, #20
 8000386:	2214      	movs	r2, #20
 8000388:	21b4      	movs	r1, #180	@ 0xb4
 800038a:	f000 fa5a 	bl	8000842 <ST7789_FillRect>
       HAL_Delay(20);
 800038e:	2014      	movs	r0, #20
 8000390:	f000 fc94 	bl	8000cbc <HAL_Delay>
       ST7789_FillRect(x, 180, 20, 20, COLOR_BLACK);
 8000394:	4b0d      	ldr	r3, [pc, #52]	@ (80003cc <main+0xec>)
 8000396:	8818      	ldrh	r0, [r3, #0]
 8000398:	2300      	movs	r3, #0
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2314      	movs	r3, #20
 800039e:	2214      	movs	r2, #20
 80003a0:	21b4      	movs	r1, #180	@ 0xb4
 80003a2:	f000 fa4e 	bl	8000842 <ST7789_FillRect>
       x = (x + 2) % (ST7789_WIDTH - 20);
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <main+0xec>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	3302      	adds	r3, #2
 80003ac:	4a08      	ldr	r2, [pc, #32]	@ (80003d0 <main+0xf0>)
 80003ae:	fb82 1203 	smull	r1, r2, r2, r3
 80003b2:	1111      	asrs	r1, r2, #4
 80003b4:	17da      	asrs	r2, r3, #31
 80003b6:	1a8a      	subs	r2, r1, r2
 80003b8:	2196      	movs	r1, #150	@ 0x96
 80003ba:	fb01 f202 	mul.w	r2, r1, r2
 80003be:	1a9a      	subs	r2, r3, r2
 80003c0:	b292      	uxth	r2, r2
 80003c2:	4b02      	ldr	r3, [pc, #8]	@ (80003cc <main+0xec>)
 80003c4:	801a      	strh	r2, [r3, #0]
  {
 80003c6:	bf00      	nop
 80003c8:	e7d7      	b.n	800037a <main+0x9a>
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028
 80003d0:	1b4e81b5 	.word	0x1b4e81b5

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	@ 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	2238      	movs	r2, #56	@ 0x38
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 f83a 	bl	800245c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 ff00 	bl	80011fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000404:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000406:	2340      	movs	r3, #64	@ 0x40
 8000408:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000412:	2304      	movs	r3, #4
 8000414:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000416:	2355      	movs	r3, #85	@ 0x55
 8000418:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000422:	2302      	movs	r3, #2
 8000424:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	4618      	mov	r0, r3
 800042c:	f000 ff9a 	bl	8001364 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000436:	f000 f818 	bl	800046a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2303      	movs	r3, #3
 8000440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2104      	movs	r1, #4
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fa98 	bl	8001988 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800045e:	f000 f804 	bl	800046a <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3750      	adds	r7, #80	@ 0x50
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046e:	b672      	cpsid	i
}
 8000470:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000472:	bf00      	nop
 8000474:	e7fd      	b.n	8000472 <Error_Handler+0x8>
	...

08000478 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <MX_SPI1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <MX_SPI1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000484:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000492:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ae:	2218      	movs	r2, #24
 80004b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d8:	f001 fc3a 	bl	8001d50 <HAL_SPI_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f7ff ffc2 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	40013000 	.word	0x40013000

080004f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <HAL_SPI_MspInit+0x7c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d128      	bne.n	8000568 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000516:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051a:	4a16      	ldr	r2, [pc, #88]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 800051c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000520:	6613      	str	r3, [r2, #96]	@ 0x60
 8000522:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	4a10      	ldr	r2, [pc, #64]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <HAL_SPI_MspInit+0x80>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000556:	2305      	movs	r3, #5
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000564:	f000 fcb0 	bl	8000ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	@ 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013000 	.word	0x40013000
 8000574:	40021000 	.word	0x40021000

08000578 <CS_Select>:


#include "st7789.h"

// --- 내부 유틸 ---
static inline void CS_Select(void)   { HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET); }
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fe21 	bl	80011cc <HAL_GPIO_WritePin>
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <CS_Unselect>:
static inline void CS_Unselect(void) { HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET); }
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f000 fe16 	bl	80011cc <HAL_GPIO_WritePin>
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <DC_Command>:
static inline void DC_Command(void)  { HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); }
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f000 fe0b 	bl	80011cc <HAL_GPIO_WritePin>
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}

080005ba <DC_Data>:
static inline void DC_Data(void)     { HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); }
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c8:	f000 fe00 	bl	80011cc <HAL_GPIO_WritePin>
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <ST7789_Reset>:

static void ST7789_Reset(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <ST7789_Reset+0x28>)
 80005da:	f000 fdf7 	bl	80011cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005de:	200a      	movs	r0, #10
 80005e0:	f000 fb6c 	bl	8000cbc <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2102      	movs	r1, #2
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <ST7789_Reset+0x28>)
 80005ea:	f000 fdef 	bl	80011cc <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80005ee:	2078      	movs	r0, #120	@ 0x78
 80005f0:	f000 fb64 	bl	8000cbc <HAL_Delay>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48000400 	.word	0x48000400

080005fc <WriteCommand>:

static void WriteCommand(uint8_t cmd) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 8000606:	f7ff ffb7 	bl	8000578 <CS_Select>
    DC_Command();
 800060a:	f7ff ffcb 	bl	80005a4 <DC_Command>
    HAL_SPI_Transmit(&ST7789_SPI_HANDLE, &cmd, 1, HAL_MAX_DELAY);
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2201      	movs	r2, #1
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <WriteCommand+0x2c>)
 8000618:	f001 fc45 	bl	8001ea6 <HAL_SPI_Transmit>
    CS_Unselect();
 800061c:	f7ff ffb7 	bl	800058e <CS_Unselect>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000002c 	.word	0x2000002c

0800062c <WriteData>:

static void WriteData(const uint8_t *data, uint16_t len) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
    CS_Select();
 8000638:	f7ff ff9e 	bl	8000578 <CS_Select>
    DC_Data();
 800063c:	f7ff ffbd 	bl	80005ba <DC_Data>
    HAL_SPI_Transmit(&ST7789_SPI_HANDLE, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000640:	887a      	ldrh	r2, [r7, #2]
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <WriteData+0x30>)
 800064a:	f001 fc2c 	bl	8001ea6 <HAL_SPI_Transmit>
    CS_Unselect();
 800064e:	f7ff ff9e 	bl	800058e <CS_Unselect>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000002c 	.word	0x2000002c

08000660 <WriteData16>:

static void WriteData16(uint16_t data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2] = { data >> 8, data & 0xFF };
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	733b      	strb	r3, [r7, #12]
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	737b      	strb	r3, [r7, #13]
    WriteData(buf, 2);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffd3 	bl	800062c <WriteData>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <SetAddrWindow>:

static void SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800068e:	b590      	push	{r4, r7, lr}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4604      	mov	r4, r0
 8000696:	4608      	mov	r0, r1
 8000698:	4611      	mov	r1, r2
 800069a:	461a      	mov	r2, r3
 800069c:	4623      	mov	r3, r4
 800069e:	80fb      	strh	r3, [r7, #6]
 80006a0:	4603      	mov	r3, r0
 80006a2:	80bb      	strh	r3, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
 80006a8:	4613      	mov	r3, r2
 80006aa:	803b      	strh	r3, [r7, #0]
    x0 += ST7789_X_OFFSET; x1 += ST7789_X_OFFSET;
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	3323      	adds	r3, #35	@ 0x23
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	3323      	adds	r3, #35	@ 0x23
 80006b6:	807b      	strh	r3, [r7, #2]
    y0 += ST7789_Y_OFFSET; y1 += ST7789_Y_OFFSET;

    uint8_t caset[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	733b      	strb	r3, [r7, #12]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73bb      	strb	r3, [r7, #14]
 80006d2:	887b      	ldrh	r3, [r7, #2]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
    uint8_t raset[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	723b      	strb	r3, [r7, #8]
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	727b      	strb	r3, [r7, #9]
 80006e8:	883b      	ldrh	r3, [r7, #0]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72bb      	strb	r3, [r7, #10]
 80006f2:	883b      	ldrh	r3, [r7, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	72fb      	strb	r3, [r7, #11]

    WriteCommand(0x2A); // CASET
 80006f8:	202a      	movs	r0, #42	@ 0x2a
 80006fa:	f7ff ff7f 	bl	80005fc <WriteCommand>
    WriteData(caset, 4);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff91 	bl	800062c <WriteData>
    WriteCommand(0x2B); // RASET
 800070a:	202b      	movs	r0, #43	@ 0x2b
 800070c:	f7ff ff76 	bl	80005fc <WriteCommand>
    WriteData(raset, 4);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff88 	bl	800062c <WriteData>
    WriteCommand(0x2C); // RAMWR
 800071c:	202c      	movs	r0, #44	@ 0x2c
 800071e:	f7ff ff6d 	bl	80005fc <WriteCommand>
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
	...

0800072c <ST7789_SetRotation>:

static uint8_t rotation = 0; // 0~3

void ST7789_SetRotation(uint8_t rot) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
    rotation = rot & 0x03;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <ST7789_SetRotation+0x6c>)
 8000740:	701a      	strb	r2, [r3, #0]
    WriteCommand(0x36); // MADCTL
 8000742:	2036      	movs	r0, #54	@ 0x36
 8000744:	f7ff ff5a 	bl	80005fc <WriteCommand>
    uint8_t madctl = 0x00; // RGB
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]
    switch(rotation) {
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <ST7789_SetRotation+0x6c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d817      	bhi.n	8000784 <ST7789_SetRotation+0x58>
 8000754:	a201      	add	r2, pc, #4	@ (adr r2, 800075c <ST7789_SetRotation+0x30>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800076d 	.word	0x0800076d
 8000760:	08000773 	.word	0x08000773
 8000764:	08000779 	.word	0x08000779
 8000768:	0800077f 	.word	0x0800077f
        case 0: madctl = 0x00; break;           // Portrait
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e008      	b.n	8000784 <ST7789_SetRotation+0x58>
        case 1: madctl = 0x60; break;           // Landscape (MV|MX)
 8000772:	2360      	movs	r3, #96	@ 0x60
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e005      	b.n	8000784 <ST7789_SetRotation+0x58>
        case 2: madctl = 0xC0; break;           // Portrait 180 (MY|MX)
 8000778:	23c0      	movs	r3, #192	@ 0xc0
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e002      	b.n	8000784 <ST7789_SetRotation+0x58>
        case 3: madctl = 0xA0; break;           // Landscape 180 (MV|MY)
 800077e:	23a0      	movs	r3, #160	@ 0xa0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	bf00      	nop
    }
    WriteData(&madctl, 1);
 8000784:	f107 030f 	add.w	r3, r7, #15
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff4e 	bl	800062c <WriteData>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000090 	.word	0x20000090

0800079c <ST7789_Init>:

void ST7789_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    // 하드 리셋
    ST7789_Reset();
 80007a2:	f7ff ff15 	bl	80005d0 <ST7789_Reset>

    // SWRESET
    WriteCommand(0x01);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff ff28 	bl	80005fc <WriteCommand>
    HAL_Delay(150);
 80007ac:	2096      	movs	r0, #150	@ 0x96
 80007ae:	f000 fa85 	bl	8000cbc <HAL_Delay>

    // SLPOUT
    WriteCommand(0x11);
 80007b2:	2011      	movs	r0, #17
 80007b4:	f7ff ff22 	bl	80005fc <WriteCommand>
    HAL_Delay(120);
 80007b8:	2078      	movs	r0, #120	@ 0x78
 80007ba:	f000 fa7f 	bl	8000cbc <HAL_Delay>

    // 컬러 포맷 16bit
    WriteCommand(0x3A);
 80007be:	203a      	movs	r0, #58	@ 0x3a
 80007c0:	f7ff ff1c 	bl	80005fc <WriteCommand>
    uint8_t colmod = 0x55; // 16-bit/pixel
 80007c4:	2355      	movs	r3, #85	@ 0x55
 80007c6:	71fb      	strb	r3, [r7, #7]
    WriteData(&colmod, 1);
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff2d 	bl	800062c <WriteData>

    // 인버트: 패널에 따라 다름. 보통 INVON(0x21)이 색감이 정상인 경우가 많음.
    WriteCommand(0x20); // INVON
 80007d2:	2020      	movs	r0, #32
 80007d4:	f7ff ff12 	bl	80005fc <WriteCommand>
    HAL_Delay(10);
 80007d8:	200a      	movs	r0, #10
 80007da:	f000 fa6f 	bl	8000cbc <HAL_Delay>

    // 노멀 디스플레이
    WriteCommand(0x13); // NORON
 80007de:	2013      	movs	r0, #19
 80007e0:	f7ff ff0c 	bl	80005fc <WriteCommand>
    HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fa69 	bl	8000cbc <HAL_Delay>

    // 디스플레이 ON
    WriteCommand(0x29); // DISPON
 80007ea:	2029      	movs	r0, #41	@ 0x29
 80007ec:	f7ff ff06 	bl	80005fc <WriteCommand>
    HAL_Delay(100);
 80007f0:	2064      	movs	r0, #100	@ 0x64
 80007f2:	f000 fa63 	bl	8000cbc <HAL_Delay>

    // 기본 회전
    ST7789_SetRotation(0);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff98 	bl	800072c <ST7789_SetRotation>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <ST7789_DrawPixel>:

void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
 800080e:	460b      	mov	r3, r1
 8000810:	80bb      	strh	r3, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	807b      	strh	r3, [r7, #2]
    if (x >= ST7789_WIDTH || y >= ST7789_HEIGHT) return;
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2ba9      	cmp	r3, #169	@ 0xa9
 800081a:	d80e      	bhi.n	800083a <ST7789_DrawPixel+0x36>
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000822:	d20a      	bcs.n	800083a <ST7789_DrawPixel+0x36>
    SetAddrWindow(x, y, x, y);
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	88b9      	ldrh	r1, [r7, #4]
 800082a:	88f8      	ldrh	r0, [r7, #6]
 800082c:	f7ff ff2f 	bl	800068e <SetAddrWindow>
    WriteData16(color);
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff14 	bl	8000660 <WriteData16>
 8000838:	e000      	b.n	800083c <ST7789_DrawPixel+0x38>
    if (x >= ST7789_WIDTH || y >= ST7789_HEIGHT) return;
 800083a:	bf00      	nop
}
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <ST7789_FillRect>:

void ST7789_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000842:	b5b0      	push	{r4, r5, r7, lr}
 8000844:	b0c6      	sub	sp, #280	@ 0x118
 8000846:	af00      	add	r7, sp, #0
 8000848:	4605      	mov	r5, r0
 800084a:	460c      	mov	r4, r1
 800084c:	4610      	mov	r0, r2
 800084e:	4619      	mov	r1, r3
 8000850:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000854:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000858:	462a      	mov	r2, r5
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000860:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000864:	4622      	mov	r2, r4
 8000866:	801a      	strh	r2, [r3, #0]
 8000868:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800086c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000870:	4602      	mov	r2, r0
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000878:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800087c:	460a      	mov	r2, r1
 800087e:	801a      	strh	r2, [r3, #0]
    if (x >= ST7789_WIDTH || y >= ST7789_HEIGHT) return;
 8000880:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000884:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2ba9      	cmp	r3, #169	@ 0xa9
 800088c:	f200 80b8 	bhi.w	8000a00 <ST7789_FillRect+0x1be>
 8000890:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000894:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800089e:	f080 80af 	bcs.w	8000a00 <ST7789_FillRect+0x1be>
    if ((x + w) > ST7789_WIDTH)  w = ST7789_WIDTH - x;
 80008a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008a6:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008b0:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	2baa      	cmp	r3, #170	@ 0xaa
 80008ba:	dd0b      	ble.n	80008d4 <ST7789_FillRect+0x92>
 80008bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008c0:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80008c4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008c8:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 80008cc:	8812      	ldrh	r2, [r2, #0]
 80008ce:	f1c2 02aa 	rsb	r2, r2, #170	@ 0xaa
 80008d2:	801a      	strh	r2, [r3, #0]
    if ((y + h) > ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 80008d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008ee:	dd0b      	ble.n	8000908 <ST7789_FillRect+0xc6>
 80008f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80008f8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008fc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8000900:	8812      	ldrh	r2, [r2, #0]
 8000902:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8000906:	801a      	strh	r2, [r3, #0]

    SetAddrWindow(x, y, x + w - 1, y + h - 1);
 8000908:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800090c:	f5a3 7289 	sub.w	r2, r3, #274	@ 0x112
 8000910:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000914:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000918:	8812      	ldrh	r2, [r2, #0]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	3b01      	subs	r3, #1
 8000922:	b29c      	uxth	r4, r3
 8000924:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000928:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800092c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000930:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	3b01      	subs	r3, #1
 800093e:	b29a      	uxth	r2, r3
 8000940:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000944:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000948:	8819      	ldrh	r1, [r3, #0]
 800094a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800094e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000952:	8818      	ldrh	r0, [r3, #0]
 8000954:	4613      	mov	r3, r2
 8000956:	4622      	mov	r2, r4
 8000958:	f7ff fe99 	bl	800068e <SetAddrWindow>

    // 한 번에 너무 크게 보내지 말고 적당히 쪼개서
    // (스택/버퍼 문제 방지)
    uint32_t pixels = (uint32_t)w * h;
 800095c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000960:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800096a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint8_t buf[256]; // 128픽셀(2바이트/픽셀)
    for (int i = 0; i < sizeof(buf); i += 2) {
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800097e:	e01d      	b.n	80009bc <ST7789_FillRect+0x17a>
        buf[i] = color >> 8;
 8000980:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2d9      	uxtb	r1, r3
 800098a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800098e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8000992:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000996:	4413      	add	r3, r2
 8000998:	460a      	mov	r2, r1
 800099a:	701a      	strb	r2, [r3, #0]
        buf[i+1] = color & 0xFF;
 800099c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80009a0:	3301      	adds	r3, #1
 80009a2:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 80009a6:	b2d1      	uxtb	r1, r2
 80009a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009ac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009b0:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(buf); i += 2) {
 80009b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80009b6:	3302      	adds	r3, #2
 80009b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80009bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80009c0:	2bff      	cmp	r3, #255	@ 0xff
 80009c2:	d9dd      	bls.n	8000980 <ST7789_FillRect+0x13e>
    }
    while (pixels) {
 80009c4:	e017      	b.n	80009f6 <ST7789_FillRect+0x1b4>
        uint16_t chunk = (pixels > (sizeof(buf)/2)) ? (sizeof(buf)/2) : pixels;
 80009c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80009ca:	2b80      	cmp	r3, #128	@ 0x80
 80009cc:	bf28      	it	cs
 80009ce:	2380      	movcs	r3, #128	@ 0x80
 80009d0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
        WriteData(buf, chunk * 2);
 80009d4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe22 	bl	800062c <WriteData>
        pixels -= chunk;
 80009e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80009ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    while (pixels) {
 80009f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e3      	bne.n	80009c6 <ST7789_FillRect+0x184>
 80009fe:	e000      	b.n	8000a02 <ST7789_FillRect+0x1c0>
    if (x >= ST7789_WIDTH || y >= ST7789_HEIGHT) return;
 8000a00:	bf00      	nop
    }
}
 8000a02:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}

08000a0a <ST7789_DrawRect>:

void ST7789_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af02      	add	r7, sp, #8
 8000a10:	4604      	mov	r4, r0
 8000a12:	4608      	mov	r0, r1
 8000a14:	4611      	mov	r1, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	4623      	mov	r3, r4
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	80bb      	strh	r3, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
 8000a24:	4613      	mov	r3, r2
 8000a26:	803b      	strh	r3, [r7, #0]
    if (w == 0 || h == 0) return;
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d02f      	beq.n	8000a8e <ST7789_DrawRect+0x84>
 8000a2e:	883b      	ldrh	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d02c      	beq.n	8000a8e <ST7789_DrawRect+0x84>
    // 상/하
    ST7789_FillRect(x, y, w, 1, color);
 8000a34:	887a      	ldrh	r2, [r7, #2]
 8000a36:	88b9      	ldrh	r1, [r7, #4]
 8000a38:	88f8      	ldrh	r0, [r7, #6]
 8000a3a:	8b3b      	ldrh	r3, [r7, #24]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f7ff feff 	bl	8000842 <ST7789_FillRect>
    ST7789_FillRect(x, y + h - 1, w, 1, color);
 8000a44:	88ba      	ldrh	r2, [r7, #4]
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	887a      	ldrh	r2, [r7, #2]
 8000a52:	88f8      	ldrh	r0, [r7, #6]
 8000a54:	8b3b      	ldrh	r3, [r7, #24]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f7ff fef2 	bl	8000842 <ST7789_FillRect>
    // 좌/우
    ST7789_FillRect(x, y, 1, h, color);
 8000a5e:	883a      	ldrh	r2, [r7, #0]
 8000a60:	88b9      	ldrh	r1, [r7, #4]
 8000a62:	88f8      	ldrh	r0, [r7, #6]
 8000a64:	8b3b      	ldrh	r3, [r7, #24]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f7ff fee9 	bl	8000842 <ST7789_FillRect>
    ST7789_FillRect(x + w - 1, y, 1, h, color);
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	4413      	add	r3, r2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b298      	uxth	r0, r3
 8000a7c:	883a      	ldrh	r2, [r7, #0]
 8000a7e:	88b9      	ldrh	r1, [r7, #4]
 8000a80:	8b3b      	ldrh	r3, [r7, #24]
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	f7ff fedb 	bl	8000842 <ST7789_FillRect>
 8000a8c:	e000      	b.n	8000a90 <ST7789_DrawRect+0x86>
    if (w == 0 || h == 0) return;
 8000a8e:	bf00      	nop
}
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}

08000a96 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af02      	add	r7, sp, #8
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRect(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000aa8:	22aa      	movs	r2, #170	@ 0xaa
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fec8 	bl	8000842 <ST7789_FillRect>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000af2:	f000 fc27 	bl	8001344 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f891 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fc59 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fb91 	bl	80002e0 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080024e4 	.word	0x080024e4
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	20000098 	.word	0x20000098

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f93d 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff ff5e 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f93a 	bl	8000eae <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	f000 f914 	bl	8000e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000094 	.word	0x20000094

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffee 	bl	8000ca4 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d004      	beq.n	8000ce0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_Delay+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce0:	bf00      	nop
 8000ce2:	f7ff ffdf 	bl	8000ca4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d8f7      	bhi.n	8000ce2 <HAL_Delay+0x26>
  {
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	@ (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff47 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5e 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff90 	bl	8000db8 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5f 	bl	8000d64 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb2 	bl	8000e20 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ed6:	e15a      	b.n	800118e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 814c 	beq.w	8001188 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	f003 0201 	and.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80a6 	beq.w	8001188 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <HAL_GPIO_Init+0x2e4>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001040:	4a5a      	ldr	r2, [pc, #360]	@ (80011ac <HAL_GPIO_Init+0x2e4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6613      	str	r3, [r2, #96]	@ 0x60
 8001048:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <HAL_GPIO_Init+0x2e4>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001054:	4a56      	ldr	r2, [pc, #344]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800107e:	d01f      	beq.n	80010c0 <HAL_GPIO_Init+0x1f8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a4c      	ldr	r2, [pc, #304]	@ (80011b4 <HAL_GPIO_Init+0x2ec>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d019      	beq.n	80010bc <HAL_GPIO_Init+0x1f4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4b      	ldr	r2, [pc, #300]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_Init+0x1f0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a4a      	ldr	r2, [pc, #296]	@ (80011bc <HAL_GPIO_Init+0x2f4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_Init+0x1ec>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a49      	ldr	r2, [pc, #292]	@ (80011c0 <HAL_GPIO_Init+0x2f8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1e8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a48      	ldr	r2, [pc, #288]	@ (80011c4 <HAL_GPIO_Init+0x2fc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_Init+0x1e4>
 80010a8:	2305      	movs	r3, #5
 80010aa:	e00a      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010ac:	2306      	movs	r3, #6
 80010ae:	e008      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010b0:	2304      	movs	r3, #4
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010b4:	2303      	movs	r3, #3
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x1fa>
 80010c0:	2300      	movs	r3, #0
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d2:	4937      	ldr	r1, [pc, #220]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e0:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001104:	4a30      	ldr	r2, [pc, #192]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800110a:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800112e:	4a26      	ldr	r2, [pc, #152]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001158:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001182:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <HAL_GPIO_Init+0x300>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f ae9d 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	48001000 	.word	0x48001000
 80011c4:	48001400 	.word	0x48001400
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d141      	bne.n	800128e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800120a:	4b4b      	ldr	r3, [pc, #300]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001216:	d131      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001218:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800121e:	4a46      	ldr	r2, [pc, #280]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001230:	4a41      	ldr	r2, [pc, #260]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001238:	4b40      	ldr	r3, [pc, #256]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2232      	movs	r2, #50	@ 0x32
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	0c9b      	lsrs	r3, r3, #18
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124e:	e002      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3b01      	subs	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001256:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001262:	d102      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f2      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001276:	d158      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e057      	b.n	800132c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001282:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800128c:	e04d      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001294:	d141      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a2:	d131      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a4:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012aa:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2232      	movs	r2, #50	@ 0x32
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	3301      	adds	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012da:	e002      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d102      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f2      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001302:	d112      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e011      	b.n	800132c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001318:	e007      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001328:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40007000 	.word	0x40007000
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83

08001344 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001352:	6093      	str	r3, [r2, #8]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40007000 	.word	0x40007000

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e2fe      	b.n	8001974 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d075      	beq.n	800146e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001382:	4b97      	ldr	r3, [pc, #604]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800138c:	4b94      	ldr	r3, [pc, #592]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3e>
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d002      	beq.n	80013a8 <HAL_RCC_OscConfig+0x44>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b8d      	ldr	r3, [pc, #564]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d05b      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d157      	bne.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e2d9      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x74>
 80013ca:	4b85      	ldr	r3, [pc, #532]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a84      	ldr	r2, [pc, #528]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b7f      	ldr	r3, [pc, #508]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7e      	ldr	r2, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b7c      	ldr	r3, [pc, #496]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7b      	ldr	r2, [pc, #492]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013fc:	4b78      	ldr	r3, [pc, #480]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a77      	ldr	r2, [pc, #476]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b75      	ldr	r3, [pc, #468]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a74      	ldr	r2, [pc, #464]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc42 	bl	8000ca4 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc3e 	bl	8000ca4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e29e      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xc0>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc2e 	bl	8000ca4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc2a 	bl	8000ca4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e28a      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	4b60      	ldr	r3, [pc, #384]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d075      	beq.n	8001566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147a:	4b59      	ldr	r3, [pc, #356]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001484:	4b56      	ldr	r3, [pc, #344]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b0c      	cmp	r3, #12
 8001492:	d102      	bne.n	800149a <HAL_RCC_OscConfig+0x136>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_OscConfig+0x13c>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d11f      	bne.n	80014e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	4b4f      	ldr	r3, [pc, #316]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x154>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e25d      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	4946      	ldr	r1, [pc, #280]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014cc:	4b45      	ldr	r3, [pc, #276]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb9b 	bl	8000c0c <HAL_InitTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d043      	beq.n	8001564 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e249      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3c      	ldr	r2, [pc, #240]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbd6 	bl	8000ca4 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fbd2 	bl	8000ca4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e232      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	492d      	ldr	r1, [pc, #180]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
 800152e:	e01a      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001536:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbb2 	bl	8000ca4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fbae 	bl	8000ca4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e20e      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1e0>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d041      	beq.n	80015f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fb8b 	bl	8000ca4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fb87 	bl	8000ca4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1e7      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ef      	beq.n	8001592 <HAL_RCC_OscConfig+0x22e>
 80015b2:	e020      	b.n	80015f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fb6e 	bl	8000ca4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ca:	e00d      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fb6a 	bl	8000ca4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d906      	bls.n	80015e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1ca      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e8:	4b8c      	ldr	r3, [pc, #560]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ea      	bne.n	80015cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a6 	beq.w	8001750 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001608:	4b84      	ldr	r3, [pc, #528]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x2b4>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x2b6>
 8001618:	2300      	movs	r3, #0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00d      	beq.n	800163a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b7f      	ldr	r3, [pc, #508]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001622:	4a7e      	ldr	r2, [pc, #504]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6593      	str	r3, [r2, #88]	@ 0x58
 800162a:	4b7c      	ldr	r3, [pc, #496]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163a:	4b79      	ldr	r3, [pc, #484]	@ (8001820 <HAL_RCC_OscConfig+0x4bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001646:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0x4bc>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb27 	bl	8000ca4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff fb23 	bl	8000ca4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e183      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0x4bc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <HAL_RCC_OscConfig+0x32e>
 8001680:	4b66      	ldr	r3, [pc, #408]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001686:	4a65      	ldr	r2, [pc, #404]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001690:	e024      	b.n	80016dc <HAL_RCC_OscConfig+0x378>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d110      	bne.n	80016bc <HAL_RCC_OscConfig+0x358>
 800169a:	4b60      	ldr	r3, [pc, #384]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a0:	4a5e      	ldr	r2, [pc, #376]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016aa:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b0:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ba:	e00f      	b.n	80016dc <HAL_RCC_OscConfig+0x378>
 80016bc:	4b57      	ldr	r3, [pc, #348]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c2:	4a56      	ldr	r2, [pc, #344]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d016      	beq.n	8001712 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fade 	bl	8000ca4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fada 	bl	8000ca4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e138      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ed      	beq.n	80016ec <HAL_RCC_OscConfig+0x388>
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fac7 	bl	8000ca4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fac3 	bl	8000ca4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e121      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ed      	bne.n	800171a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d105      	bne.n	8001750 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001744:	4b35      	ldr	r3, [pc, #212]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a34      	ldr	r2, [pc, #208]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01c      	beq.n	800179e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176a:	4a2c      	ldr	r2, [pc, #176]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fa96 	bl	8000ca4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177c:	f7ff fa92 	bl	8000ca4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0f2      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 8001790:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ef      	beq.n	800177c <HAL_RCC_OscConfig+0x418>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800179e:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a4:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fa79 	bl	8000ca4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b6:	f7ff fa75 	bl	8000ca4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0d5      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ef      	bne.n	80017b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80c9 	beq.w	8001972 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	f000 8083 	beq.w	80018f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d15e      	bne.n	80018b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fa4f 	bl	8000ca4 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	e00c      	b.n	8001824 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fa4b 	bl	8000ca4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d905      	bls.n	8001824 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0ab      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	4b55      	ldr	r3, [pc, #340]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ec      	bne.n	800180a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001830:	4b52      	ldr	r3, [pc, #328]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4b52      	ldr	r3, [pc, #328]	@ (8001980 <HAL_RCC_OscConfig+0x61c>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6a11      	ldr	r1, [r2, #32]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001840:	3a01      	subs	r2, #1
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800184a:	0212      	lsls	r2, r2, #8
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001852:	0852      	lsrs	r2, r2, #1
 8001854:	3a01      	subs	r2, #1
 8001856:	0552      	lsls	r2, r2, #21
 8001858:	4311      	orrs	r1, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800185e:	0852      	lsrs	r2, r2, #1
 8001860:	3a01      	subs	r2, #1
 8001862:	0652      	lsls	r2, r2, #25
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800186a:	06d2      	lsls	r2, r2, #27
 800186c:	430a      	orrs	r2, r1
 800186e:	4943      	ldr	r1, [pc, #268]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001870:	4313      	orrs	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b41      	ldr	r3, [pc, #260]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a40      	ldr	r2, [pc, #256]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001880:	4b3e      	ldr	r3, [pc, #248]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4a3d      	ldr	r2, [pc, #244]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa0a 	bl	8000ca4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fa06 	bl	8000ca4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e066      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	4b35      	ldr	r3, [pc, #212]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x530>
 80018b2:	e05e      	b.n	8001972 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b4:	4b31      	ldr	r3, [pc, #196]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a30      	ldr	r2, [pc, #192]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f9f0 	bl	8000ca4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f9ec 	bl	8000ca4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e04c      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	4b28      	ldr	r3, [pc, #160]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018e6:	4b25      	ldr	r3, [pc, #148]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	4924      	ldr	r1, [pc, #144]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 80018ec:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_RCC_OscConfig+0x620>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	60cb      	str	r3, [r1, #12]
 80018f2:	e03e      	b.n	8001972 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e039      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <HAL_RCC_OscConfig+0x618>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	429a      	cmp	r2, r3
 8001912:	d12c      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	3b01      	subs	r3, #1
 8001920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d123      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d11b      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d113      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d109      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	019f800c 	.word	0x019f800c
 8001984:	feeefffc 	.word	0xfeeefffc

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e11e      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b91      	ldr	r3, [pc, #580]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b8e      	ldr	r3, [pc, #568]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	498c      	ldr	r1, [pc, #560]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b8a      	ldr	r3, [pc, #552]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e106      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d073      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d129      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	4b81      	ldr	r3, [pc, #516]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0f4      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019f4:	f000 f966 	bl	8001cc4 <RCC_GetSysClockFreqFromPLLSource>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf0 <HAL_RCC_ClockConfig+0x268>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d93f      	bls.n	8001a82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a02:	4b7a      	ldr	r3, [pc, #488]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d033      	beq.n	8001a82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d12f      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2a:	4a70      	ldr	r2, [pc, #448]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e024      	b.n	8001a82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a40:	4b6a      	ldr	r3, [pc, #424]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0c6      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b66      	ldr	r3, [pc, #408]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0be      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a60:	f000 f8ce 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4a61      	ldr	r2, [pc, #388]	@ (8001bf0 <HAL_RCC_ClockConfig+0x268>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d909      	bls.n	8001a82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a76:	4a5d      	ldr	r2, [pc, #372]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b5a      	ldr	r3, [pc, #360]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4957      	ldr	r1, [pc, #348]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a94:	f7ff f906 	bl	8000ca4 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f902 	bl	8000ca4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e095      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a42      	ldr	r2, [pc, #264]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ae6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001af4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001afc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b39      	ldr	r3, [pc, #228]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4936      	ldr	r1, [pc, #216]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b80      	cmp	r3, #128	@ 0x80
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b1e:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d21d      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 020f 	bic.w	r2, r3, #15
 8001b40:	4929      	ldr	r1, [pc, #164]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f8ac 	bl	8000ca4 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f8a8 	bl	8000ca4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e03b      	b.n	8001bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1ed      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4917      	ldr	r1, [pc, #92]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490f      	ldr	r1, [pc, #60]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb2:	f000 f825 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <HAL_RCC_ClockConfig+0x264>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <HAL_RCC_ClockConfig+0x26c>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f818 	bl	8000c0c <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	04c4b400 	.word	0x04c4b400
 8001bf4:	080024cc 	.word	0x080024cc
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c06:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e047      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c24:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e03e      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d136      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c54:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	68d2      	ldr	r2, [r2, #12]
 8001c60:	0a12      	lsrs	r2, r2, #8
 8001c62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
      break;
 8001c6c:	e00c      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c6e:	4a13      	ldr	r2, [pc, #76]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	0a12      	lsrs	r2, r2, #8
 8001c7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
      break;
 8001c86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0e5b      	lsrs	r3, r3, #25
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e001      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca8:	693b      	ldr	r3, [r7, #16]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10c      	bne.n	8001d02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce8:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	0a12      	lsrs	r2, r2, #8
 8001cf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
    break;
 8001d00:	e00c      	b.n	8001d1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d0c:	68d2      	ldr	r2, [r2, #12]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    break;
 8001d1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0e5b      	lsrs	r3, r3, #25
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	00f42400 	.word	0x00f42400

08001d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e09d      	b.n	8001e9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d72:	d009      	beq.n	8001d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	e005      	b.n	8001d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fba6 	bl	80004f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001dc8:	d902      	bls.n	8001dd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e002      	b.n	8001dd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001dde:	d007      	beq.n	8001df0 <HAL_SPI_Init+0xa0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	f003 0204 	and.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eb6:	f7fe fef5 	bl	8000ca4 <HAL_GetTick>
 8001eba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e15c      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_SPI_Transmit+0x36>
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e154      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_SPI_Transmit+0x48>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e14d      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f40:	d10f      	bne.n	8001f62 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6c:	2b40      	cmp	r3, #64	@ 0x40
 8001f6e:	d007      	beq.n	8001f80 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f88:	d952      	bls.n	8002030 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_Transmit+0xf2>
 8001f92:	8b7b      	ldrh	r3, [r7, #26]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d145      	bne.n	8002024 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa8:	1c9a      	adds	r2, r3, #2
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fbc:	e032      	b.n	8002024 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d112      	bne.n	8001ff2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ff0:	e018      	b.n	8002024 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff2:	f7fe fe57 	bl	8000ca4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d803      	bhi.n	800200a <HAL_SPI_Transmit+0x164>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d102      	bne.n	8002010 <HAL_SPI_Transmit+0x16a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0b2      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1c7      	bne.n	8001fbe <HAL_SPI_Transmit+0x118>
 800202e:	e083      	b.n	8002138 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_SPI_Transmit+0x198>
 8002038:	8b7b      	ldrh	r3, [r7, #26]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d177      	bne.n	800212e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d912      	bls.n	800206e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204c:	881a      	ldrh	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	1c9a      	adds	r2, r3, #2
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b02      	subs	r3, #2
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800206c:	e05f      	b.n	800212e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002094:	e04b      	b.n	800212e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d12b      	bne.n	80020fc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d912      	bls.n	80020d4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020be:	1c9a      	adds	r2, r3, #2
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b02      	subs	r3, #2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020d2:	e02c      	b.n	800212e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020fa:	e018      	b.n	800212e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020fc:	f7fe fdd2 	bl	8000ca4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d803      	bhi.n	8002114 <HAL_SPI_Transmit+0x26e>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d102      	bne.n	800211a <HAL_SPI_Transmit+0x274>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e02d      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ae      	bne.n	8002096 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f947 	bl	80023d0 <SPI_EndRxTxTransaction>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002188:	2300      	movs	r3, #0
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021a4:	f7fe fd7e 	bl	8000ca4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021b4:	f7fe fd76 	bl	8000ca4 <HAL_GetTick>
 80021b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	0d1b      	lsrs	r3, r3, #20
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ca:	e054      	b.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d050      	beq.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021d4:	f7fe fd66 	bl	8000ca4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d902      	bls.n	80021ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d13d      	bne.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002202:	d111      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800220c:	d004      	beq.n	8002218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002216:	d107      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002230:	d10f      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e017      	b.n	8002296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3b01      	subs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	429a      	cmp	r2, r3
 8002292:	d19b      	bne.n	80021cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80022b6:	f7fe fcf5 	bl	8000ca4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80022c6:	f7fe fced 	bl	8000ca4 <HAL_GetTick>
 80022ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00da      	lsls	r2, r3, #3
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	0d1b      	lsrs	r3, r3, #20
 80022e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80022ec:	e060      	b.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80022f4:	d107      	bne.n	8002306 <SPI_WaitFifoStateUntilTimeout+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002304:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d050      	beq.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800230e:	f7fe fcc9 	bl	8000ca4 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231a:	429a      	cmp	r2, r3
 800231c:	d902      	bls.n	8002324 <SPI_WaitFifoStateUntilTimeout+0x80>
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	2b00      	cmp	r3, #0
 8002322:	d13d      	bne.n	80023a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800233c:	d111      	bne.n	8002362 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002346:	d004      	beq.n	8002352 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002350:	d107      	bne.n	8002362 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800236a:	d10f      	bne.n	800238c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800238a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e010      	b.n	80023c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d196      	bne.n	80022ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000000 	.word	0x20000000

080023d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff ff5b 	bl	80022a4 <SPI_WaitFifoStateUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e027      	b.n	8002454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fec0 	bl	8002194 <SPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e014      	b.n	8002454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ff34 	bl	80022a4 <SPI_WaitFifoStateUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e000      	b.n	8002454 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <memset>:
 800245c:	4402      	add	r2, r0
 800245e:	4603      	mov	r3, r0
 8002460:	4293      	cmp	r3, r2
 8002462:	d100      	bne.n	8002466 <memset+0xa>
 8002464:	4770      	bx	lr
 8002466:	f803 1b01 	strb.w	r1, [r3], #1
 800246a:	e7f9      	b.n	8002460 <memset+0x4>

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	4d0d      	ldr	r5, [pc, #52]	@ (80024a4 <__libc_init_array+0x38>)
 8002470:	4c0d      	ldr	r4, [pc, #52]	@ (80024a8 <__libc_init_array+0x3c>)
 8002472:	1b64      	subs	r4, r4, r5
 8002474:	10a4      	asrs	r4, r4, #2
 8002476:	2600      	movs	r6, #0
 8002478:	42a6      	cmp	r6, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	4d0b      	ldr	r5, [pc, #44]	@ (80024ac <__libc_init_array+0x40>)
 800247e:	4c0c      	ldr	r4, [pc, #48]	@ (80024b0 <__libc_init_array+0x44>)
 8002480:	f000 f818 	bl	80024b4 <_init>
 8002484:	1b64      	subs	r4, r4, r5
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	2600      	movs	r6, #0
 800248a:	42a6      	cmp	r6, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f855 3b04 	ldr.w	r3, [r5], #4
 8002494:	4798      	blx	r3
 8002496:	3601      	adds	r6, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f855 3b04 	ldr.w	r3, [r5], #4
 800249e:	4798      	blx	r3
 80024a0:	3601      	adds	r6, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	080024dc 	.word	0x080024dc
 80024a8:	080024dc 	.word	0x080024dc
 80024ac:	080024dc 	.word	0x080024dc
 80024b0:	080024e0 	.word	0x080024e0

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
