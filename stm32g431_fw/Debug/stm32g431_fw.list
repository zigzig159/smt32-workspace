
stm32g431_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001628  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e00  08005e00  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005e08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000070  08005e78  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08005e78  000076b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8f2  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284f  00000000  00000000  00014992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000171e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a75  00000000  00000000  00017fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1c8  00000000  00000000  00018a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f4b  00000000  00000000  00036c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6a65  00000000  00000000  00048b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff5bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  000ff600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001031e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080047b8 	.word	0x080047b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080047b8 	.word	0x080047b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	4604      	mov	r4, r0
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4623      	mov	r3, r4
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	4603      	mov	r3, r0
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	460b      	mov	r3, r1
 80002d8:	717b      	strb	r3, [r7, #5]
 80002da:	4613      	mov	r3, r2
 80002dc:	807b      	strh	r3, [r7, #2]
    uint8_t   function_char;
    uint8_t   i,j;

    function_char = Character;
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	75fb      	strb	r3, [r7, #23]

    if (function_char < ' ') {
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	2b1f      	cmp	r3, #31
 80002e6:	d802      	bhi.n	80002ee <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	e002      	b.n	80002f4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80002ee:	7dfb      	ldrb	r3, [r7, #23]
 80002f0:	3b20      	subs	r3, #32
 80002f2:	75fb      	strb	r3, [r7, #23]
    }

    char temp[CHAR_WIDTH];
    for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	753b      	strb	r3, [r7, #20]
 80002f8:	e012      	b.n	8000320 <ILI9341_Draw_Char+0x60>
    {
    temp[k] = font[function_char][k];
 80002fa:	7dfa      	ldrb	r2, [r7, #23]
 80002fc:	7d38      	ldrb	r0, [r7, #20]
 80002fe:	7d39      	ldrb	r1, [r7, #20]
 8000300:	4c3b      	ldr	r4, [pc, #236]	@ (80003f0 <ILI9341_Draw_Char+0x130>)
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	4423      	add	r3, r4
 800030c:	4403      	add	r3, r0
 800030e:	781a      	ldrb	r2, [r3, #0]
 8000310:	f101 0318 	add.w	r3, r1, #24
 8000314:	443b      	add	r3, r7
 8000316:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800031a:	7d3b      	ldrb	r3, [r7, #20]
 800031c:	3301      	adds	r3, #1
 800031e:	753b      	strb	r3, [r7, #20]
 8000320:	7d3b      	ldrb	r3, [r7, #20]
 8000322:	2b05      	cmp	r3, #5
 8000324:	d9e9      	bls.n	80002fa <ILI9341_Draw_Char+0x3a>
    }

    // Draw pixels
    ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	b298      	uxth	r0, r3
 800032a:	797b      	ldrb	r3, [r7, #5]
 800032c:	b299      	uxth	r1, r3
 800032e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000330:	461a      	mov	r2, r3
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	4413      	add	r3, r2
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	b29a      	uxth	r2, r3
 800033a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	b29c      	uxth	r4, r3
 8000340:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4623      	mov	r3, r4
 8000346:	f000 fc5d 	bl	8000c04 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800034a:	2300      	movs	r3, #0
 800034c:	757b      	strb	r3, [r7, #21]
 800034e:	e047      	b.n	80003e0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	75bb      	strb	r3, [r7, #22]
 8000354:	e03e      	b.n	80003d4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {
 8000356:	7d7b      	ldrb	r3, [r7, #21]
 8000358:	3318      	adds	r3, #24
 800035a:	443b      	add	r3, r7
 800035c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000360:	461a      	mov	r2, r3
 8000362:	7dbb      	ldrb	r3, [r7, #22]
 8000364:	fa42 f303 	asr.w	r3, r2, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d02e      	beq.n	80003ce <ILI9341_Draw_Char+0x10e>
              if(Size == 1)
 8000370:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000372:	2b01      	cmp	r3, #1
 8000374:	d110      	bne.n	8000398 <ILI9341_Draw_Char+0xd8>
              {
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	b29a      	uxth	r2, r3
 800037a:	7d7b      	ldrb	r3, [r7, #21]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4413      	add	r3, r2
 8000380:	b298      	uxth	r0, r3
 8000382:	797b      	ldrb	r3, [r7, #5]
 8000384:	b29a      	uxth	r2, r3
 8000386:	7dbb      	ldrb	r3, [r7, #22]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4413      	add	r3, r2
 800038c:	b29b      	uxth	r3, r3
 800038e:	887a      	ldrh	r2, [r7, #2]
 8000390:	4619      	mov	r1, r3
 8000392:	f000 fb4d 	bl	8000a30 <ILI9341_Draw_Pixel>
 8000396:	e01a      	b.n	80003ce <ILI9341_Draw_Char+0x10e>
              }
              else
              {
              ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	b29a      	uxth	r2, r3
 800039c:	7d7b      	ldrb	r3, [r7, #21]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80003a2:	fb11 f303 	smulbb	r3, r1, r3
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	4413      	add	r3, r2
 80003aa:	b298      	uxth	r0, r3
 80003ac:	797b      	ldrb	r3, [r7, #5]
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	7dbb      	ldrb	r3, [r7, #22]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80003b6:	fb11 f303 	smulbb	r3, r1, r3
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	4413      	add	r3, r2
 80003be:	b299      	uxth	r1, r3
 80003c0:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 80003c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80003c4:	887b      	ldrh	r3, [r7, #2]
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	4623      	mov	r3, r4
 80003ca:	f000 fc1b 	bl	8000c04 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80003ce:	7dbb      	ldrb	r3, [r7, #22]
 80003d0:	3301      	adds	r3, #1
 80003d2:	75bb      	strb	r3, [r7, #22]
 80003d4:	7dbb      	ldrb	r3, [r7, #22]
 80003d6:	2b07      	cmp	r3, #7
 80003d8:	d9bd      	bls.n	8000356 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80003da:	7d7b      	ldrb	r3, [r7, #21]
 80003dc:	3301      	adds	r3, #1
 80003de:	757b      	strb	r3, [r7, #21]
 80003e0:	7d7b      	ldrb	r3, [r7, #21]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d9b4      	bls.n	8000350 <ILI9341_Draw_Char+0x90>
              }
            }
        }
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	371c      	adds	r7, #28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd90      	pop	{r4, r7, pc}
 80003f0:	08004828 	.word	0x08004828

080003f4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af02      	add	r7, sp, #8
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	4608      	mov	r0, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	4603      	mov	r3, r0
 8000404:	70fb      	strb	r3, [r7, #3]
 8000406:	460b      	mov	r3, r1
 8000408:	70bb      	strb	r3, [r7, #2]
 800040a:	4613      	mov	r3, r2
 800040c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800040e:	e017      	b.n	8000440 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	7818      	ldrb	r0, [r3, #0]
 8000418:	883c      	ldrh	r4, [r7, #0]
 800041a:	78ba      	ldrb	r2, [r7, #2]
 800041c:	78f9      	ldrb	r1, [r7, #3]
 800041e:	8bbb      	ldrh	r3, [r7, #28]
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	8b3b      	ldrh	r3, [r7, #24]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	4623      	mov	r3, r4
 8000428:	f7ff ff4a 	bl	80002c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800042c:	8b3b      	ldrh	r3, [r7, #24]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	4413      	add	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	4413      	add	r3, r2
 800043e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1e3      	bne.n	8000410 <ILI9341_Draw_Text+0x1c>
    }
}
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bd90      	pop	{r4, r7, pc}
	...

08000454 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET); //CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800045e:	1df9      	adds	r1, r7, #7
 8000460:	2301      	movs	r3, #1
 8000462:	2201      	movs	r2, #1
 8000464:	4803      	ldr	r0, [pc, #12]	@ (8000474 <ILI9341_SPI_Send+0x20>)
 8000466:	f003 fa2c 	bl	80038c2 <HAL_SPI_Transmit>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000504 	.word	0x20000504

08000478 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048c:	f001 fd06 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049a:	f001 fcff 	bl	8001e9c <HAL_GPIO_WritePin>
  ILI9341_SPI_Send(Command);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffd7 	bl	8000454 <ILI9341_SPI_Send>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f001 fcf4 	bl	8001e9c <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 fce4 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 fcdd 	bl	8001e9c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffb5 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f4:	f001 fcd2 	bl	8001e9c <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	4603      	mov	r3, r0
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	807b      	strh	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800051e:	202a      	movs	r0, #42	@ 0x2a
 8000520:	f7ff ffaa 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	0a1b      	lsrs	r3, r3, #8
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffc5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffc0 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffb9 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ffb4 	bl	80004bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000554:	202b      	movs	r0, #43	@ 0x2b
 8000556:	f7ff ff8f 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffaa 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000568:	88bb      	ldrh	r3, [r7, #4]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffa5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff9e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000580:	883b      	ldrh	r3, [r7, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff99 	bl	80004bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800058a:	202c      	movs	r0, #44	@ 0x2c
 800058c:	f7ff ff74 	bl	8000478 <ILI9341_Write_Command>
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <ILI9341_Reset+0x38>)
 80005a2:	f001 fc7b 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005a6:	20c8      	movs	r0, #200	@ 0xc8
 80005a8:	f001 f9f0 	bl	800198c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b6:	f001 fc71 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005ba:	20c8      	movs	r0, #200	@ 0xc8
 80005bc:	f001 f9e6 	bl	800198c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <ILI9341_Reset+0x38>)
 80005c6:	f001 fc69 	bl	8001e9c <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000400 	.word	0x48000400

080005d4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = Rotation;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80005e2:	2036      	movs	r0, #54	@ 0x36
 80005e4:	f7ff ff48 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 f9cf 	bl	800198c <HAL_Delay>

switch(screen_rotation)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d837      	bhi.n	8000664 <ILI9341_Set_Rotation+0x90>
 80005f4:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <ILI9341_Set_Rotation+0x28>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	08000623 	.word	0x08000623
 8000604:	08000639 	.word	0x08000639
 8000608:	0800064f 	.word	0x0800064f
  {
    case SCREEN_VERTICAL_1:
      ILI9341_Write_Data(0x40|0x08);
 800060c:	2048      	movs	r0, #72	@ 0x48
 800060e:	f7ff ff55 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH = 240;
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000614:	22f0      	movs	r2, #240	@ 0xf0
 8000616:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 800061a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800061e:	801a      	strh	r2, [r3, #0]
      break;
 8000620:	e021      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_1:
      ILI9341_Write_Data(0x20|0x08);
 8000622:	2028      	movs	r0, #40	@ 0x28
 8000624:	f7ff ff4a 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 800062a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800062e:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 8000632:	22f0      	movs	r2, #240	@ 0xf0
 8000634:	801a      	strh	r2, [r3, #0]
      break;
 8000636:	e016      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_VERTICAL_2:
      ILI9341_Write_Data(0x80|0x08);
 8000638:	2088      	movs	r0, #136	@ 0x88
 800063a:	f7ff ff3f 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 240;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000640:	22f0      	movs	r2, #240	@ 0xf0
 8000642:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 8000646:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800064a:	801a      	strh	r2, [r3, #0]
      break;
 800064c:	e00b      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_2:
      ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800064e:	20e8      	movs	r0, #232	@ 0xe8
 8000650:	f7ff ff34 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000656:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800065a:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 800065e:	22f0      	movs	r2, #240	@ 0xf0
 8000660:	801a      	strh	r2, [r3, #0]
      break;
 8000662:	e000      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    default:
      //EXIT IF SCREEN ROTATION NOT VALID!
      break;
 8000664:	bf00      	nop
  }
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000002 	.word	0x20000002
 8000674:	20000000 	.word	0x20000000

08000678 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2102      	movs	r1, #2
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <ILI9341_Enable+0x14>)
 8000682:	f001 fc0b 	bl	8001e9c <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	48000400 	.word	0x48000400

08000690 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000694:	f7ff fff0 	bl	8000678 <ILI9341_Enable>
//ILI9341_SPI_Init();
ILI9341_Reset();
 8000698:	f7ff ff7e 	bl	8000598 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff feeb 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f001 f971 	bl	800198c <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80006aa:	20cb      	movs	r0, #203	@ 0xcb
 80006ac:	f7ff fee4 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80006b0:	2039      	movs	r0, #57	@ 0x39
 80006b2:	f7ff ff03 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80006b6:	202c      	movs	r0, #44	@ 0x2c
 80006b8:	f7ff ff00 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fefd 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80006c2:	2034      	movs	r0, #52	@ 0x34
 80006c4:	f7ff fefa 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fef7 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80006ce:	20cf      	movs	r0, #207	@ 0xcf
 80006d0:	f7ff fed2 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fef1 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80006da:	20c1      	movs	r0, #193	@ 0xc1
 80006dc:	f7ff feee 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80006e0:	2030      	movs	r0, #48	@ 0x30
 80006e2:	f7ff feeb 	bl	80004bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80006e6:	20e8      	movs	r0, #232	@ 0xe8
 80006e8:	f7ff fec6 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80006ec:	2085      	movs	r0, #133	@ 0x85
 80006ee:	f7ff fee5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fee2 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80006f8:	2078      	movs	r0, #120	@ 0x78
 80006fa:	f7ff fedf 	bl	80004bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80006fe:	20ea      	movs	r0, #234	@ 0xea
 8000700:	f7ff feba 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fed9 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fed6 	bl	80004bc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000710:	20ed      	movs	r0, #237	@ 0xed
 8000712:	f7ff feb1 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f7ff fed0 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800071c:	2003      	movs	r0, #3
 800071e:	f7ff fecd 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000722:	2012      	movs	r0, #18
 8000724:	f7ff feca 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000728:	2081      	movs	r0, #129	@ 0x81
 800072a:	f7ff fec7 	bl	80004bc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800072e:	20f7      	movs	r0, #247	@ 0xf7
 8000730:	f7ff fea2 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000734:	2020      	movs	r0, #32
 8000736:	f7ff fec1 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800073a:	20c0      	movs	r0, #192	@ 0xc0
 800073c:	f7ff fe9c 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000740:	2023      	movs	r0, #35	@ 0x23
 8000742:	f7ff febb 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000746:	20c1      	movs	r0, #193	@ 0xc1
 8000748:	f7ff fe96 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800074c:	2010      	movs	r0, #16
 800074e:	f7ff feb5 	bl	80004bc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000752:	20c5      	movs	r0, #197	@ 0xc5
 8000754:	f7ff fe90 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000758:	203e      	movs	r0, #62	@ 0x3e
 800075a:	f7ff feaf 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800075e:	2028      	movs	r0, #40	@ 0x28
 8000760:	f7ff feac 	bl	80004bc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000764:	20c7      	movs	r0, #199	@ 0xc7
 8000766:	f7ff fe87 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800076a:	2086      	movs	r0, #134	@ 0x86
 800076c:	f7ff fea6 	bl	80004bc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000770:	2036      	movs	r0, #54	@ 0x36
 8000772:	f7ff fe81 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000776:	2048      	movs	r0, #72	@ 0x48
 8000778:	f7ff fea0 	bl	80004bc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800077c:	203a      	movs	r0, #58	@ 0x3a
 800077e:	f7ff fe7b 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000782:	2055      	movs	r0, #85	@ 0x55
 8000784:	f7ff fe9a 	bl	80004bc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000788:	20b1      	movs	r0, #177	@ 0xb1
 800078a:	f7ff fe75 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fe94 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000794:	2018      	movs	r0, #24
 8000796:	f7ff fe91 	bl	80004bc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800079a:	20b6      	movs	r0, #182	@ 0xb6
 800079c:	f7ff fe6c 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80007a0:	2008      	movs	r0, #8
 80007a2:	f7ff fe8b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80007a6:	2082      	movs	r0, #130	@ 0x82
 80007a8:	f7ff fe88 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80007ac:	2027      	movs	r0, #39	@ 0x27
 80007ae:	f7ff fe85 	bl	80004bc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80007b2:	20f2      	movs	r0, #242	@ 0xf2
 80007b4:	f7ff fe60 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fe7f 	bl	80004bc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80007be:	2026      	movs	r0, #38	@ 0x26
 80007c0:	f7ff fe5a 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fe79 	bl	80004bc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80007ca:	20e0      	movs	r0, #224	@ 0xe0
 80007cc:	f7ff fe54 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80007d0:	200f      	movs	r0, #15
 80007d2:	f7ff fe73 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80007d6:	2031      	movs	r0, #49	@ 0x31
 80007d8:	f7ff fe70 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80007dc:	202b      	movs	r0, #43	@ 0x2b
 80007de:	f7ff fe6d 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80007e2:	200c      	movs	r0, #12
 80007e4:	f7ff fe6a 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80007e8:	200e      	movs	r0, #14
 80007ea:	f7ff fe67 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80007ee:	2008      	movs	r0, #8
 80007f0:	f7ff fe64 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80007f4:	204e      	movs	r0, #78	@ 0x4e
 80007f6:	f7ff fe61 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80007fa:	20f1      	movs	r0, #241	@ 0xf1
 80007fc:	f7ff fe5e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000800:	2037      	movs	r0, #55	@ 0x37
 8000802:	f7ff fe5b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000806:	2007      	movs	r0, #7
 8000808:	f7ff fe58 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800080c:	2010      	movs	r0, #16
 800080e:	f7ff fe55 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff fe52 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000818:	200e      	movs	r0, #14
 800081a:	f7ff fe4f 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800081e:	2009      	movs	r0, #9
 8000820:	f7ff fe4c 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fe49 	bl	80004bc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800082a:	20e1      	movs	r0, #225	@ 0xe1
 800082c:	f7ff fe24 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fe43 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000836:	200e      	movs	r0, #14
 8000838:	f7ff fe40 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800083c:	2014      	movs	r0, #20
 800083e:	f7ff fe3d 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000842:	2003      	movs	r0, #3
 8000844:	f7ff fe3a 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000848:	2011      	movs	r0, #17
 800084a:	f7ff fe37 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800084e:	2007      	movs	r0, #7
 8000850:	f7ff fe34 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000854:	2031      	movs	r0, #49	@ 0x31
 8000856:	f7ff fe31 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800085a:	20c1      	movs	r0, #193	@ 0xc1
 800085c:	f7ff fe2e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000860:	2048      	movs	r0, #72	@ 0x48
 8000862:	f7ff fe2b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fe28 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800086c:	200f      	movs	r0, #15
 800086e:	f7ff fe25 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff fe22 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000878:	2031      	movs	r0, #49	@ 0x31
 800087a:	f7ff fe1f 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800087e:	2036      	movs	r0, #54	@ 0x36
 8000880:	f7ff fe1c 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000884:	200f      	movs	r0, #15
 8000886:	f7ff fe19 	bl	80004bc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800088a:	2011      	movs	r0, #17
 800088c:	f7ff fdf4 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(120);
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f001 f87b 	bl	800198c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000896:	2029      	movs	r0, #41	@ 0x29
 8000898:	f7ff fdee 	bl	8000478 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe99 	bl	80005d4 <ILI9341_Set_Rotation>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80008a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008ac:	b08d      	sub	sp, #52	@ 0x34
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	466b      	mov	r3, sp
 80008b8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008c6:	d202      	bcs.n	80008ce <ILI9341_Draw_Colour_Burst+0x26>
{
  Buffer_Size = Size;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008cc:	e002      	b.n	80008d4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
  Buffer_Size = BURST_MAX_SIZE;
 80008ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f001 fadd 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f001 fad6 	bl	8001e9c <HAL_GPIO_WritePin>

unsigned char chifted =   Colour>>8;;
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80008fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008fc:	460b      	mov	r3, r1
 80008fe:	3b01      	subs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	2300      	movs	r3, #0
 8000904:	4688      	mov	r8, r1
 8000906:	4699      	mov	r9, r3
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800091c:	2300      	movs	r3, #0
 800091e:	460c      	mov	r4, r1
 8000920:	461d      	mov	r5, r3
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	f04f 0300 	mov.w	r3, #0
 800092a:	00eb      	lsls	r3, r5, #3
 800092c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000930:	00e2      	lsls	r2, r4, #3
 8000932:	1dcb      	adds	r3, r1, #7
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	ebad 0d03 	sub.w	sp, sp, r3
 800093c:	466b      	mov	r3, sp
 800093e:	3300      	adds	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000946:	e00e      	b.n	8000966 <ILI9341_Draw_Colour_Burst+0xbe>
  {
    burst_buffer[j] =   chifted;
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	4413      	add	r3, r2
 800094e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000952:	701a      	strb	r2, [r3, #0]
    burst_buffer[j+1] = Colour;
 8000954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000956:	3301      	adds	r3, #1
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	b2d1      	uxtb	r1, r2
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000962:	3302      	adds	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	429a      	cmp	r2, r3
 800096c:	d3ec      	bcc.n	8000948 <ILI9341_Draw_Colour_Burst+0xa0>
  }

uint32_t Sending_Size = Size*2;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000978:	fbb2 f3f3 	udiv	r3, r2, r3
 800097c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000982:	fbb3 f2f2 	udiv	r2, r3, r2
 8000986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000988:	fb01 f202 	mul.w	r2, r1, r2
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d010      	beq.n	80009b8 <ILI9341_Draw_Colour_Burst+0x110>
{
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
 800099a:	e009      	b.n	80009b0 <ILI9341_Draw_Colour_Burst+0x108>
    {
    HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 800099c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099e:	b29a      	uxth	r2, r3
 80009a0:	230a      	movs	r3, #10
 80009a2:	69b9      	ldr	r1, [r7, #24]
 80009a4:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80009a6:	f002 ff8c 	bl	80038c2 <HAL_SPI_Transmit>
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ac:	3301      	adds	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3f1      	bcc.n	800099c <ILI9341_Draw_Colour_Burst+0xf4>
    }
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	230a      	movs	r3, #10
 80009be:	69b9      	ldr	r1, [r7, #24]
 80009c0:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80009c2:	f002 ff7e 	bl	80038c2 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f001 fa64 	bl	8001e9c <HAL_GPIO_WritePin>
 80009d4:	46b5      	mov	sp, r6
}
 80009d6:	bf00      	nop
 80009d8:	3734      	adds	r7, #52	@ 0x34
 80009da:	46bd      	mov	sp, r7
 80009dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009e0:	20000504 	.word	0x20000504

080009e4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <ILI9341_Fill_Screen+0x44>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <ILI9341_Fill_Screen+0x48>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fd7f 	bl	8000500 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <ILI9341_Fill_Screen+0x44>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <ILI9341_Fill_Screen+0x48>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	fb02 f303 	mul.w	r3, r2, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff44 	bl	80008a8 <ILI9341_Draw_Colour_Burst>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000002 	.word	0x20000002
 8000a2c:	20000000 	.word	0x20000000

08000a30 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	80bb      	strh	r3, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000a42:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <ILI9341_Draw_Pixel+0x1c8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	88fa      	ldrh	r2, [r7, #6]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f080 80d0 	bcs.w	8000bf0 <ILI9341_Draw_Pixel+0x1c0>
 8000a50:	4b6a      	ldr	r3, [pc, #424]	@ (8000bfc <ILI9341_Draw_Pixel+0x1cc>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	88ba      	ldrh	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f080 80c9 	bcs.w	8000bf0 <ILI9341_Draw_Pixel+0x1c0>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a68:	f001 fa18 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f001 fa11 	bl	8001e9c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000a7a:	202a      	movs	r0, #42	@ 0x2a
 8000a7c:	f7ff fcea 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f001 fa07 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f001 fa00 	bl	8001e9c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f001 f9f9 	bl	8001e9c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	753b      	strb	r3, [r7, #20]
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	757b      	strb	r3, [r7, #21]
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	3301      	adds	r3, #1
 8000abe:	121b      	asrs	r3, r3, #8
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	75bb      	strb	r3, [r7, #22]
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000ace:	f107 0114 	add.w	r1, r7, #20
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	484a      	ldr	r0, [pc, #296]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000ad8:	f002 fef3 	bl	80038c2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f001 f9d9 	bl	8001e9c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f001 f9d2 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f001 f9cb 	bl	8001e9c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000b06:	202b      	movs	r0, #43	@ 0x2b
 8000b08:	f7ff fca4 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f001 f9c1 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b24:	f001 f9ba 	bl	8001e9c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f001 f9b3 	bl	8001e9c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	743b      	strb	r3, [r7, #16]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	747b      	strb	r3, [r7, #17]
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	121b      	asrs	r3, r3, #8
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	74bb      	strb	r3, [r7, #18]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000b5a:	f107 0110 	add.w	r1, r7, #16
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2204      	movs	r2, #4
 8000b62:	4827      	ldr	r0, [pc, #156]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000b64:	f002 fead 	bl	80038c2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f001 f993 	bl	8001e9c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f001 f98c 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f001 f985 	bl	8001e9c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000b92:	202c      	movs	r0, #44	@ 0x2c
 8000b94:	f7ff fc5e 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f001 f97b 	bl	8001e9c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f001 f974 	bl	8001e9c <HAL_GPIO_WritePin>

//COLOUR
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f001 f96d 	bl	8001e9c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	733b      	strb	r3, [r7, #12]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000bd2:	f107 010c 	add.w	r1, r7, #12
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000bdc:	f002 fe71 	bl	80038c2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f001 f957 	bl	8001e9c <HAL_GPIO_WritePin>
 8000bee:	e000      	b.n	8000bf2 <ILI9341_Draw_Pixel+0x1c2>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000bf0:	bf00      	nop

}
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000002 	.word	0x20000002
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000504 	.word	0x20000504

08000c04 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	4603      	mov	r3, r0
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d23d      	bcs.n	8000caa <ILI9341_Draw_Rectangle+0xa6>
 8000c2e:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d237      	bcs.n	8000caa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000c3a:	88fa      	ldrh	r2, [r7, #6]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c42:	8812      	ldrh	r2, [r2, #0]
 8000c44:	b292      	uxth	r2, r2
 8000c46:	4293      	cmp	r3, r2
 8000c48:	dd05      	ble.n	8000c56 <ILI9341_Draw_Rectangle+0x52>
  {
    Width=LCD_WIDTH-X;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	807b      	strh	r3, [r7, #2]
  }
if((Y+Height-1)>=LCD_HEIGHT)
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	883b      	ldrh	r3, [r7, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	b292      	uxth	r2, r2
 8000c62:	4293      	cmp	r3, r2
 8000c64:	dd05      	ble.n	8000c72 <ILI9341_Draw_Rectangle+0x6e>
  {
    Height=LCD_HEIGHT-Y;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	803b      	strh	r3, [r7, #0]
  }
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29c      	uxth	r4, r3
 8000c7e:	88ba      	ldrh	r2, [r7, #4]
 8000c80:	883b      	ldrh	r3, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	88b9      	ldrh	r1, [r7, #4]
 8000c8c:	88f8      	ldrh	r0, [r7, #6]
 8000c8e:	4622      	mov	r2, r4
 8000c90:	f7ff fc36 	bl	8000500 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe00 	bl	80008a8 <ILI9341_Draw_Colour_Burst>
 8000ca8:	e000      	b.n	8000cac <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000caa:	bf00      	nop
}
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000002 	.word	0x20000002
 8000cb8:	20000000 	.word	0x20000000

08000cbc <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2178      	movs	r1, #120	@ 0x78
 8000cda:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <ssd1306_write_command+0x2c>)
 8000cdc:	f001 f992 	bl	8002004 <HAL_I2C_Mem_Write>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000498 	.word	0x20000498

08000cec <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af04      	add	r7, sp, #16
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 8000cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	2240      	movs	r2, #64	@ 0x40
 8000d0a:	2178      	movs	r1, #120	@ 0x78
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <ssd1306_write_data+0x30>)
 8000d0e:	f001 f979 	bl	8002004 <HAL_I2C_Mem_Write>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000498 	.word	0x20000498

08000d20 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8000d2a:	208d      	movs	r0, #141	@ 0x8d
 8000d2c:	f7ff ffc6 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffc2 	bl	8000cbc <ssd1306_write_command>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 8000d4a:	2081      	movs	r0, #129	@ 0x81
 8000d4c:	f7ff ffb6 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(value);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffb2 	bl	8000cbc <ssd1306_write_command>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <entire_display_off>:

void entire_display_off()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 8000d64:	20a4      	movs	r0, #164	@ 0xa4
 8000d66:	f7ff ffa9 	bl	8000cbc <ssd1306_write_command>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 8000d72:	20a6      	movs	r0, #166	@ 0xa6
 8000d74:	f7ff ffa2 	bl	8000cbc <ssd1306_write_command>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 8000d80:	20af      	movs	r0, #175	@ 0xaf
 8000d82:	f7ff ff9b 	bl	8000cbc <ssd1306_write_command>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff90 	bl	8000cbc <ssd1306_write_command>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff83 	bl	8000cbc <ssd1306_write_command>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff76 	bl	8000cbc <ssd1306_write_command>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff69 	bl	8000cbc <ssd1306_write_command>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff5c 	bl	8000cbc <ssd1306_write_command>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 8000e16:	20a8      	movs	r0, #168	@ 0xa8
 8000e18:	f7ff ff50 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(mux);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff4c 	bl	8000cbc <ssd1306_write_command>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff3f 	bl	8000cbc <ssd1306_write_command>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 8000e50:	20d3      	movs	r0, #211	@ 0xd3
 8000e52:	f7ff ff33 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff2f 	bl	8000cbc <ssd1306_write_command>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460a      	mov	r2, r1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	4613      	mov	r3, r2
 8000e74:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	b25a      	sxtb	r2, r3
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	015b      	lsls	r3, r3, #5
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 8000e8e:	20da      	movs	r0, #218	@ 0xda
 8000e90:	f7ff ff14 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff10 	bl	8000cbc <ssd1306_write_command>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 8000ec4:	20d5      	movs	r0, #213	@ 0xd5
 8000ec6:	f7ff fef9 	bl	8000cbc <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fef5 	bl	8000cbc <ssd1306_write_command>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 8000ede:	203f      	movs	r0, #63	@ 0x3f
 8000ee0:	f7ff ff94 	bl	8000e0c <set_multiplex_ratio>

    set_display_offset(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ffae 	bl	8000e46 <set_display_offset>

    set_display_start_line(0x40);
 8000eea:	2040      	movs	r0, #64	@ 0x40
 8000eec:	f7ff ff74 	bl	8000dd8 <set_display_start_line>

    set_segment_remap(0xA1);
 8000ef0:	20a1      	movs	r0, #161	@ 0xa1
 8000ef2:	f7ff ff7e 	bl	8000df2 <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 8000ef6:	20c8      	movs	r0, #200	@ 0xc8
 8000ef8:	f7ff ff98 	bl	8000e2c <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff ffb1 	bl	8000e66 <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 8000f04:	207f      	movs	r0, #127	@ 0x7f
 8000f06:	f7ff ff1b 	bl	8000d40 <set_contrast_control>

    entire_display_off();
 8000f0a:	f7ff ff29 	bl	8000d60 <entire_display_off>

    set_normal_display();
 8000f0e:	f7ff ff2e 	bl	8000d6e <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 8000f12:	2108      	movs	r1, #8
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ffc5 	bl	8000ea4 <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f7ff ff00 	bl	8000d20 <charge_bump_setting>

    set_display_on();
 8000f20:	f7ff ff2c 	bl	8000d7c <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 8000f24:	f000 f82e 	bl	8000f84 <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f944 	bl	80011b8 <ssd1306_set_cursor>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	e017      	b.n	8000f70 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3b50      	subs	r3, #80	@ 0x50
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff38 	bl	8000dbe <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff1b 	bl	8000d8a <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f7ff ff25 	bl	8000da4 <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <ssd1306_update_screen+0x4c>)
 8000f60:	4413      	add	r3, r2
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fec1 	bl	8000cec <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b07      	cmp	r3, #7
 8000f74:	dde4      	ble.n	8000f40 <ssd1306_update_screen+0xc>
    }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000008c 	.word	0x2000008c

08000f84 <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	e007      	b.n	8000fa0 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <ssd1306_black_screen+0x30>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa6:	dbf3      	blt.n	8000f90 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8000fa8:	f7ff ffc4 	bl	8000f34 <ssd1306_update_screen>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000008c 	.word	0x2000008c

08000fb8 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b2d8      	uxtb	r0, r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <ssd1306_black_pixel+0x54>)
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	b25a      	sxtb	r2, r3
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b259      	sxtb	r1, r3
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	01db      	lsls	r3, r3, #7
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2c9      	uxtb	r1, r1
 8000ffc:	4a03      	ldr	r2, [pc, #12]	@ (800100c <ssd1306_black_pixel+0x54>)
 8000ffe:	54d1      	strb	r1, [r2, r3]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	2000008c 	.word	0x2000008c

08001010 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001020:	79fa      	ldrb	r2, [r7, #7]
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	b2d8      	uxtb	r0, r3
 8001028:	4603      	mov	r3, r0
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	4413      	add	r3, r2
 800102e:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <ssd1306_white_pixel+0x50>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	b25a      	sxtb	r2, r3
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	b25b      	sxtb	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b259      	sxtb	r1, r3
 8001046:	79fa      	ldrb	r2, [r7, #7]
 8001048:	4603      	mov	r3, r0
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	4413      	add	r3, r2
 800104e:	b2c9      	uxtb	r1, r1
 8001050:	4a03      	ldr	r2, [pc, #12]	@ (8001060 <ssd1306_white_pixel+0x50>)
 8001052:	54d1      	strb	r1, [r2, r3]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	2000008c 	.word	0x2000008c

08001064 <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b1f      	cmp	r3, #31
 800107a:	d902      	bls.n	8001082 <ssd1306_write_char+0x1e>
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001080:	d901      	bls.n	8001086 <ssd1306_write_char+0x22>
        return 0;
 8001082:	2300      	movs	r3, #0
 8001084:	e060      	b.n	8001148 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 8001086:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <ssd1306_write_char+0xec>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	7a3b      	ldrb	r3, [r7, #8]
 800108e:	4413      	add	r3, r2
 8001090:	2b80      	cmp	r3, #128	@ 0x80
 8001092:	dc06      	bgt.n	80010a2 <ssd1306_write_char+0x3e>
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <ssd1306_write_char+0xec>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	461a      	mov	r2, r3
 800109a:	7a7b      	ldrb	r3, [r7, #9]
 800109c:	4413      	add	r3, r2
 800109e:	2b40      	cmp	r3, #64	@ 0x40
 80010a0:	dd01      	ble.n	80010a6 <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e050      	b.n	8001148 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e040      	b.n	800112e <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3b20      	subs	r3, #32
 80010b2:	7a79      	ldrb	r1, [r7, #9]
 80010b4:	fb03 f101 	mul.w	r1, r3, r1
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	440b      	add	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	e029      	b.n	800111e <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00f      	beq.n	80010fa <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <ssd1306_write_char+0xec>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b2d8      	uxtb	r0, r3
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <ssd1306_write_char+0xec>)
 80010e8:	785a      	ldrb	r2, [r3, #1]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff ff8c 	bl	8001010 <ssd1306_white_pixel>
 80010f8:	e00e      	b.n	8001118 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <ssd1306_write_char+0xec>)
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4413      	add	r3, r2
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <ssd1306_write_char+0xec>)
 8001108:	785a      	ldrb	r2, [r3, #1]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff ff50 	bl	8000fb8 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	3301      	adds	r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	461a      	mov	r2, r3
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4293      	cmp	r3, r2
 8001126:	dbd0      	blt.n	80010ca <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	461a      	mov	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4293      	cmp	r3, r2
 8001136:	dbb9      	blt.n	80010ac <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <ssd1306_write_char+0xec>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	7a3b      	ldrb	r3, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <ssd1306_write_char+0xec>)
 8001144:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000048c 	.word	0x2000048c

08001154 <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001162:	607a      	str	r2, [r7, #4]
    current_font = font;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <ssd1306_write_string+0x60>)
 8001166:	461a      	mov	r2, r3
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001170:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 8001174:	e014      	b.n	80011a0 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001184:	f7ff ff6e 	bl	8001064 <ssd1306_write_char>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d002      	beq.n	800119a <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e008      	b.n	80011ac <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
    while(*str)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e6      	bne.n	8001176 <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000490 	.word	0x20000490

080011b8 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 80011c8:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <ssd1306_set_cursor+0x28>)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <ssd1306_set_cursor+0x28>)
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	7053      	strb	r3, [r2, #1]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	2000048c 	.word	0x2000048c

080011e4 <ssd1306_enter>:

void ssd1306_enter()
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    cursor.x = 0;
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <ssd1306_enter+0x24>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <ssd1306_enter+0x24>)
 80011f0:	785a      	ldrb	r2, [r3, #1]
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <ssd1306_enter+0x28>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <ssd1306_enter+0x24>)
 80011fc:	705a      	strb	r2, [r3, #1]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	2000048c 	.word	0x2000048c
 800120c:	20000490 	.word	0x20000490

08001210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a29      	ldr	r2, [pc, #164]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a23      	ldr	r2, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_GPIO_Init+0xc0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <MX_GPIO_Init+0xc4>)
 8001276:	f000 fe11 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001284:	f000 fe0a 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001288:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800128c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_GPIO_Init+0xc4>)
 80012a2:	f000 fc79 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 80012a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f000 fc69 	bl	8001b98 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000800 	.word	0x48000800

080012d8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_I2C2_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <MX_I2C2_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_I2C2_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <MX_I2C2_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_I2C2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_I2C2_Init+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_I2C2_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_I2C2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001312:	480e      	ldr	r0, [pc, #56]	@ (800134c <MX_I2C2_Init+0x74>)
 8001314:	f000 fdda 	bl	8001ecc <HAL_I2C_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800131e:	f000 f978 	bl	8001612 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001322:	2100      	movs	r1, #0
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <MX_I2C2_Init+0x74>)
 8001326:	f001 f9ef 	bl	8002708 <HAL_I2CEx_ConfigAnalogFilter>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001330:	f000 f96f 	bl	8001612 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_I2C2_Init+0x74>)
 8001338:	f001 fa31 	bl	800279e <HAL_I2CEx_ConfigDigitalFilter>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 f966 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000498 	.word	0x20000498
 8001350:	40005800 	.word	0x40005800
 8001354:	40b285c2 	.word	0x40b285c2

08001358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09c      	sub	sp, #112	@ 0x70
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	2244      	movs	r2, #68	@ 0x44
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fd9d 	bl	8003eb8 <memset>
  if(i2cHandle->Instance==I2C2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <HAL_I2C_MspInit+0xe0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d153      	bne.n	8001430 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fff9 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013a0:	f000 f937 	bl	8001612 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d4:	2310      	movs	r3, #16
 80013d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e4:	2304      	movs	r3, #4
 80013e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013ec:	4619      	mov	r1, r3
 80013ee:	4814      	ldr	r0, [pc, #80]	@ (8001440 <HAL_I2C_MspInit+0xe8>)
 80013f0:	f000 fbd2 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001406:	2304      	movs	r3, #4
 8001408:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001414:	f000 fbc0 	bl	8001b98 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 800141e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_I2C_MspInit+0xe4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	3770      	adds	r7, #112	@ 0x70
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005800 	.word	0x40005800
 800143c:	40021000 	.word	0x40021000
 8001440:	48000800 	.word	0x48000800

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 fa2e 	bl	80018aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f895 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f7ff fedd 	bl	8001210 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001456:	f000 f8e3 	bl	8001620 <MX_SPI1_Init>
  MX_I2C2_Init();
 800145a:	f7ff ff3d 	bl	80012d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 800145e:	f7ff fd3c 	bl	8000eda <ssd1306_init>

    ssd1306_set_cursor(5, 0);
 8001462:	2100      	movs	r1, #0
 8001464:	2005      	movs	r0, #5
 8001466:	f7ff fea7 	bl	80011b8 <ssd1306_set_cursor>

    ssd1306_write_string(font6x8, "G431 ssd1603");
 800146a:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <main+0x110>)
 800146c:	4a3a      	ldr	r2, [pc, #232]	@ (8001558 <main+0x114>)
 800146e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001472:	f7ff fe6f 	bl	8001154 <ssd1306_write_string>
    ssd1306_enter();
 8001476:	f7ff feb5 	bl	80011e4 <ssd1306_enter>
    ssd1306_set_cursor(5, 8);
 800147a:	2108      	movs	r1, #8
 800147c:	2005      	movs	r0, #5
 800147e:	f7ff fe9b 	bl	80011b8 <ssd1306_set_cursor>
    ssd1306_write_string(font6x8, "revolution 1.1");
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <main+0x110>)
 8001484:	4a35      	ldr	r2, [pc, #212]	@ (800155c <main+0x118>)
 8001486:	e893 0003 	ldmia.w	r3, {r0, r1}
 800148a:	f7ff fe63 	bl	8001154 <ssd1306_write_string>

    ssd1306_set_cursor(5, 24);
 800148e:	2118      	movs	r1, #24
 8001490:	2005      	movs	r0, #5
 8001492:	f7ff fe91 	bl	80011b8 <ssd1306_set_cursor>
    ssd1306_write_string(font6x8, "build BY JANG");
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <main+0x110>)
 8001498:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <main+0x11c>)
 800149a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800149e:	f7ff fe59 	bl	8001154 <ssd1306_write_string>

    ssd1306_set_cursor(5, 40);
 80014a2:	2128      	movs	r1, #40	@ 0x28
 80014a4:	2005      	movs	r0, #5
 80014a6:	f7ff fe87 	bl	80011b8 <ssd1306_set_cursor>
    ssd1306_write_string(font11x18, "            ");
 80014aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <main+0x120>)
 80014ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <main+0x124>)
 80014ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014b2:	f7ff fe4f 	bl	8001154 <ssd1306_write_string>
    ssd1306_update_screen();
 80014b6:	f7ff fd3d 	bl	8000f34 <ssd1306_update_screen>

   ST7789_FillScreen(COLOR_BLACK);
   ST7789_FillRect(10, 10, 100, 60, COLOR_YELLOW);
   ST7789_DrawRect(8, 8, 104, 64, COLOR_WHITE);
   ST7789_DrawPixel(120, 120, COLOR_CYAN);*/
   ILI9341_Init();
 80014ba:	f7ff f8e9 	bl	8000690 <ILI9341_Init>
   ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80014be:	2003      	movs	r0, #3
 80014c0:	f7ff f888 	bl	80005d4 <ILI9341_Set_Rotation>
   HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	@ 0x64
 80014c6:	f000 fa61 	bl	800198c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    sprintf(time, "Count: %lu", count);
 80014ca:	4b28      	ldr	r3, [pc, #160]	@ (800156c <main+0x128>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4927      	ldr	r1, [pc, #156]	@ (8001570 <main+0x12c>)
 80014d2:	4828      	ldr	r0, [pc, #160]	@ (8001574 <main+0x130>)
 80014d4:	f002 fcd0 	bl	8003e78 <siprintf>


    ssd1306_set_cursor(5, 40);
 80014d8:	2128      	movs	r1, #40	@ 0x28
 80014da:	2005      	movs	r0, #5
 80014dc:	f7ff fe6c 	bl	80011b8 <ssd1306_set_cursor>
    ssd1306_write_string(font11x18, time);
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <main+0x120>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <main+0x130>)
 80014e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e8:	f7ff fe34 	bl	8001154 <ssd1306_write_string>
    ssd1306_update_screen();
 80014ec:	f7ff fd22 	bl	8000f34 <ssd1306_update_screen>
    HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 fa4b 	bl	800198c <HAL_Delay>
    ILI9341_Draw_Text((const char *)time, 10, 10, BLACK, 2, WHITE );
 80014f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2302      	movs	r3, #2
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	220a      	movs	r2, #10
 8001504:	210a      	movs	r1, #10
 8001506:	481b      	ldr	r0, [pc, #108]	@ (8001574 <main+0x130>)
 8001508:	f7fe ff74 	bl	80003f4 <ILI9341_Draw_Text>

    HAL_Delay(50);
 800150c:	2032      	movs	r0, #50	@ 0x32
 800150e:	f000 fa3d 	bl	800198c <HAL_Delay>


    if (count>100)
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <main+0x128>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d916      	bls.n	8001548 <main+0x104>
      {
          count = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <main+0x128>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
          ssd1306_set_cursor(5, 40);
 8001520:	2128      	movs	r1, #40	@ 0x28
 8001522:	2005      	movs	r0, #5
 8001524:	f7ff fe48 	bl	80011b8 <ssd1306_set_cursor>
          ssd1306_write_string(font11x18,"Count: 0   ");
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <main+0x120>)
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <main+0x134>)
 800152c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001530:	f7ff fe10 	bl	8001154 <ssd1306_write_string>
          ssd1306_update_screen();
 8001534:	f7ff fcfe 	bl	8000f34 <ssd1306_update_screen>

          ILI9341_Fill_Screen(WHITE);
 8001538:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800153c:	f7ff fa52 	bl	80009e4 <ILI9341_Fill_Screen>

          HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f000 fa23 	bl	800198c <HAL_Delay>
 8001546:	e7c0      	b.n	80014ca <main+0x86>
      }
    else
      {
          count++;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <main+0x128>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a07      	ldr	r2, [pc, #28]	@ (800156c <main+0x128>)
 8001550:	6013      	str	r3, [r2, #0]
    sprintf(time, "Count: %lu", count);
 8001552:	e7ba      	b.n	80014ca <main+0x86>
 8001554:	20000004 	.word	0x20000004
 8001558:	080047d0 	.word	0x080047d0
 800155c:	080047e0 	.word	0x080047e0
 8001560:	080047f0 	.word	0x080047f0
 8001564:	2000000c 	.word	0x2000000c
 8001568:	08004800 	.word	0x08004800
 800156c:	20000500 	.word	0x20000500
 8001570:	08004810 	.word	0x08004810
 8001574:	200004ec 	.word	0x200004ec
 8001578:	0800481c 	.word	0x0800481c

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	2238      	movs	r2, #56	@ 0x38
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fc94 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 f94a 	bl	8002838 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2340      	movs	r3, #64	@ 0x40
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b6:	2302      	movs	r3, #2
 80015b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015be:	2355      	movs	r3, #85	@ 0x55
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 f9e4 	bl	80029a0 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015de:	f000 f818 	bl	8001612 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2104      	movs	r1, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fce2 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001606:	f000 f804 	bl	8001612 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3750      	adds	r7, #80	@ 0x50
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161a:	bf00      	nop
 800161c:	e7fd      	b.n	800161a <Error_Handler+0x8>
	...

08001620 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <MX_SPI1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_SPI1_Init+0x74>)
 800162c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <MX_SPI1_Init+0x74>)
 800163a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800163e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_SPI1_Init+0x74>)
 800164e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001652:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001656:	2210      	movs	r2, #16
 8001658:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_SPI1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_SPI1_Init+0x74>)
 800166e:	2207      	movs	r2, #7
 8001670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_SPI1_Init+0x74>)
 800167a:	2208      	movs	r2, #8
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_SPI1_Init+0x74>)
 8001680:	f002 f874 	bl	800376c <HAL_SPI_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f7ff ffc2 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000504 	.word	0x20000504
 8001698:	40013000 	.word	0x40013000

0800169c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <HAL_SPI_MspInit+0x7c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d128      	bne.n	8001710 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016ee:	23a0      	movs	r3, #160	@ 0xa0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fe:	2305      	movs	r3, #5
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f000 fa44 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40013000 	.word	0x40013000
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_MspInit+0x44>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	@ 0x60
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_MspInit+0x44>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_MspInit+0x44>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_MspInit+0x44>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001756:	f001 f913 	bl	8002980 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 f8c7 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f002 fb66 	bl	8003ec8 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20008000 	.word	0x20008000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000568 	.word	0x20000568
 8001830:	200006b8 	.word	0x200006b8

08001834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001858:	480d      	ldr	r0, [pc, #52]	@ (8001890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f002 fb25 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188a:	f7ff fddb 	bl	8001444 <main>

0800188e <LoopForever>:

LoopForever:
    b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   r0, =_estack
 8001890:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800189c:	08005e08 	.word	0x08005e08
  ldr r2, =_sbss
 80018a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018a4:	200006b8 	.word	0x200006b8

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>

080018aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f93d 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f80e 	bl	80018dc <HAL_InitTick>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e001      	b.n	80018d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018cc:	f7ff ff28 	bl	8001720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d0:	79fb      	ldrb	r3, [r7, #7]

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_InitTick+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d022      	beq.n	8001936 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_InitTick+0x6c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <HAL_InitTick+0x68>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f93a 	bl	8001b7e <HAL_SYSTICK_Config>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d809      	bhi.n	800192a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	f04f 30ff 	mov.w	r0, #4294967295
 800191e:	f000 f914 	bl	8001b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <HAL_InitTick+0x70>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e007      	b.n	800193a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e004      	b.n	800193a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000001c 	.word	0x2000001c
 8001948:	20000014 	.word	0x20000014
 800194c:	20000018 	.word	0x20000018

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x1c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_IncTick+0x20>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4413      	add	r3, r2
 800195e:	4a03      	ldr	r2, [pc, #12]	@ (800196c <HAL_IncTick+0x1c>)
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	2000056c 	.word	0x2000056c
 8001970:	2000001c 	.word	0x2000001c

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000056c 	.word	0x2000056c

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d004      	beq.n	80019b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_Delay+0x40>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b0:	bf00      	nop
 80019b2:	f7ff ffdf 	bl	8001974 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d8f7      	bhi.n	80019b2 <HAL_Delay+0x26>
  {
  }
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000001c 	.word	0x2000001c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	@ (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	@ (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	@ 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff47 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff5e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff90 	bl	8001a88 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5f 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffb2 	bl	8001af0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ba6:	e15a      	b.n	8001e5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 814c 	beq.w	8001e58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d123      	bne.n	8001cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a6 	beq.w	8001e58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d10:	4a5a      	ldr	r2, [pc, #360]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d18:	4b58      	ldr	r3, [pc, #352]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d24:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d4e:	d01f      	beq.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d019      	beq.n	8001d8c <HAL_GPIO_Init+0x1f4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_GPIO_Init+0x1f0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4a      	ldr	r2, [pc, #296]	@ (8001e8c <HAL_GPIO_Init+0x2f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1ec>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1e8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1e4>
 8001d78:	2305      	movs	r3, #5
 8001d7a:	e00a      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	e008      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e006      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e004      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d90:	2300      	movs	r3, #0
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da2:	4937      	ldr	r1, [pc, #220]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd4:	4a30      	ldr	r2, [pc, #192]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfe:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e52:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f ae9d 	bne.w	8001ba8 <HAL_GPIO_Init+0x10>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010000 	.word	0x40010000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48000800 	.word	0x48000800
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	48001000 	.word	0x48001000
 8001e94:	48001400 	.word	0x48001400
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08d      	b.n	8001ffa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fa30 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	@ 0x24
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e006      	b.n	8001f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d108      	bne.n	8001f6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	e007      	b.n	8001f7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69d9      	ldr	r1, [r3, #28]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	f040 80f9 	bne.w	800221e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_I2C_Mem_Write+0x34>
 8002032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0ed      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Mem_Write+0x4e>
 800204e:	2302      	movs	r3, #2
 8002050:	e0e6      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800205a:	f7ff fc8b 	bl	8001974 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2319      	movs	r3, #25
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f955 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d1      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2221      	movs	r2, #33	@ 0x21
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2240      	movs	r2, #64	@ 0x40
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800209c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a4:	88f8      	ldrh	r0, [r7, #6]
 80020a6:	893a      	ldrh	r2, [r7, #8]
 80020a8:	8979      	ldrh	r1, [r7, #10]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4603      	mov	r3, r0
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8b9 	bl	800222c <I2C_RequestMemoryWrite>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0a9      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2bff      	cmp	r3, #255	@ 0xff
 80020d4:	d90e      	bls.n	80020f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	22ff      	movs	r2, #255	@ 0xff
 80020da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fad9 	bl	80026a4 <I2C_TransferConfig>
 80020f2:	e00f      	b.n	8002114 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002102:	b2da      	uxtb	r2, r3
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	2300      	movs	r3, #0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fac8 	bl	80026a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f958 	bl	80023ce <I2C_WaitOnTXISFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07b      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <HAL_I2C_Mem_Write+0x1c8>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d130      	bne.n	80021cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	@ 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f8d1 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e04d      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2bff      	cmp	r3, #255	@ 0xff
 800218c:	d90e      	bls.n	80021ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	22ff      	movs	r2, #255	@ 0xff
 8002192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002198:	b2da      	uxtb	r2, r3
 800219a:	8979      	ldrh	r1, [r7, #10]
 800219c:	2300      	movs	r3, #0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fa7d 	bl	80026a4 <I2C_TransferConfig>
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	8979      	ldrh	r1, [r7, #10]
 80021be:	2300      	movs	r3, #0
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa6c 	bl	80026a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d19e      	bne.n	8002114 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f93e 	bl	800245c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e01a      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2220      	movs	r2, #32
 80021f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_I2C_Mem_Write+0x224>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	fe00e800 	.word	0xfe00e800

0800222c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <I2C_RequestMemoryWrite+0xa4>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa25 	bl	80026a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8b5 	bl	80023ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e02c      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002274:	893b      	ldrh	r3, [r7, #8]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	629a      	str	r2, [r3, #40]	@ 0x28
 800227e:	e015      	b.n	80022ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	69b9      	ldr	r1, [r7, #24]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f89b 	bl	80023ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e012      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a2:	893b      	ldrh	r3, [r7, #8]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2200      	movs	r2, #0
 80022b4:	2180      	movs	r1, #128	@ 0x80
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f830 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	80002000 	.word	0x80002000

080022d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d103      	bne.n	80022f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d007      	beq.n	8002310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	619a      	str	r2, [r3, #24]
  }
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232c:	e03b      	b.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8d6 	bl	80024e4 <I2C_IsErrorOccurred>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e041      	b.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d02d      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff fb13 	bl	8001974 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x44>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d122      	bne.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d113      	bne.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d0b4      	beq.n	800232e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023da:	e033      	b.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f87f 	bl	80024e4 <I2C_IsErrorOccurred>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e031      	b.n	8002454 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d025      	beq.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f8:	f7ff fabc 	bl	8001974 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d302      	bcc.n	800240e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11a      	bne.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d013      	beq.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b02      	cmp	r3, #2
 8002450:	d1c4      	bne.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002468:	e02f      	b.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f838 	bl	80024e4 <I2C_IsErrorOccurred>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e02d      	b.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7ff fa79 	bl	8001974 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11a      	bne.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d013      	beq.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d1c8      	bne.n	800246a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d068      	beq.n	80025e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002518:	e049      	b.n	80025ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d045      	beq.n	80025ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7ff fa27 	bl	8001974 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_IsErrorOccurred+0x54>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d13a      	bne.n	80025ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002542:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800254a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800255a:	d121      	bne.n	80025a0 <I2C_IsErrorOccurred+0xbc>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002562:	d01d      	beq.n	80025a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b20      	cmp	r3, #32
 8002568:	d01a      	beq.n	80025a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002578:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800257a:	f7ff f9fb 	bl	8001974 <HAL_GetTick>
 800257e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002580:	e00e      	b.n	80025a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002582:	f7ff f9f7 	bl	8001974 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b19      	cmp	r3, #25
 800258e:	d907      	bls.n	80025a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800259e:	e006      	b.n	80025ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d1e9      	bne.n	8002582 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d003      	beq.n	80025c4 <I2C_IsErrorOccurred+0xe0>
 80025bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0aa      	beq.n	800251a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f043 0308 	orr.w	r3, r3, #8
 800261c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002626:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff fe3b 	bl	80022d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <I2C_IsErrorOccurred+0x1bc>)
 800266a:	400b      	ands	r3, r1
 800266c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002696:	4618      	mov	r0, r3
 8002698:	3728      	adds	r7, #40	@ 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	fe00e800 	.word	0xfe00e800

080026a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	817b      	strh	r3, [r7, #10]
 80026b2:	4613      	mov	r3, r2
 80026b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026bc:	7a7b      	ldrb	r3, [r7, #9]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	0d5b      	lsrs	r3, r3, #21
 80026de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <I2C_TransferConfig+0x60>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	43db      	mvns	r3, r3
 80026e8:	ea02 0103 	and.w	r1, r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	03ff63ff 	.word	0x03ff63ff

08002708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	d138      	bne.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002728:	2302      	movs	r3, #2
 800272a:	e032      	b.n	8002792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800275a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d139      	bne.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027be:	2302      	movs	r3, #2
 80027c0:	e033      	b.n	800282a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2224      	movs	r2, #36	@ 0x24
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d141      	bne.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002846:	4b4b      	ldr	r3, [pc, #300]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002852:	d131      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002854:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800285a:	4a46      	ldr	r2, [pc, #280]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002864:	4b43      	ldr	r3, [pc, #268]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800286c:	4a41      	ldr	r2, [pc, #260]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002874:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2232      	movs	r2, #50	@ 0x32
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a3f      	ldr	r2, [pc, #252]	@ (800297c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	0c9b      	lsrs	r3, r3, #18
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288a:	e002      	b.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002892:	4b38      	ldr	r3, [pc, #224]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289e:	d102      	bne.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f2      	bne.n	800288c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a6:	4b33      	ldr	r3, [pc, #204]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b2:	d158      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e057      	b.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028be:	4a2d      	ldr	r2, [pc, #180]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028c8:	e04d      	b.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028d0:	d141      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028d2:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028de:	d131      	bne.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e6:	4a23      	ldr	r2, [pc, #140]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f0:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2232      	movs	r2, #50	@ 0x32
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a1c      	ldr	r2, [pc, #112]	@ (800297c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002916:	e002      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b01      	subs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292a:	d102      	bne.n	8002932 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f2      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293e:	d112      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e011      	b.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002950:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002954:	e007      	b.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002956:	4b07      	ldr	r3, [pc, #28]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295e:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002964:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40007000 	.word	0x40007000
 8002978:	20000014 	.word	0x20000014
 800297c:	431bde83 	.word	0x431bde83

08002980 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800298a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800298e:	6093      	str	r3, [r2, #8]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40007000 	.word	0x40007000

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e2fe      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d075      	beq.n	8002aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029be:	4b97      	ldr	r3, [pc, #604]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c8:	4b94      	ldr	r3, [pc, #592]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0x3e>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_OscConfig+0x44>
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b8d      	ldr	r3, [pc, #564]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x108>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e2d9      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x74>
 8002a06:	4b85      	ldr	r3, [pc, #532]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a84      	ldr	r2, [pc, #528]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x98>
 8002a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7e      	ldr	r2, [pc, #504]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a38:	4b78      	ldr	r3, [pc, #480]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a77      	ldr	r2, [pc, #476]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b75      	ldr	r3, [pc, #468]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a74      	ldr	r2, [pc, #464]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe ff8c 	bl	8001974 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe ff88 	bl	8001974 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	@ 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e29e      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a72:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe ff78 	bl	8001974 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe ff74 	bl	8001974 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	@ 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e28a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a9a:	4b60      	ldr	r3, [pc, #384]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0xe8>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d075      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d102      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x136>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_OscConfig+0x13c>
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11f      	bne.n	8002b1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002adc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_OscConfig+0x154>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e25d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b49      	ldr	r3, [pc, #292]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	4946      	ldr	r1, [pc, #280]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b08:	4b45      	ldr	r3, [pc, #276]	@ (8002c20 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fee5 	bl	80018dc <HAL_InitTick>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d043      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e249      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b24:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3c      	ldr	r2, [pc, #240]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe ff20 	bl	8001974 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe ff1c 	bl	8001974 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e232      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4a:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	492d      	ldr	r1, [pc, #180]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	e01a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fefc 	bl	8001974 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fe fef8 	bl	8001974 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e20e      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b92:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x1e0>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d041      	beq.n	8002c32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bbc:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fed5 	bl	8001974 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fed1 	bl	8001974 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1e7      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ef      	beq.n	8002bce <HAL_RCC_OscConfig+0x22e>
 8002bee:	e020      	b.n	8002c32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf6:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe feb8 	bl	8001974 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c06:	e00d      	b.n	8002c24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe feb4 	bl	8001974 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d906      	bls.n	8002c24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1ca      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c24:	4b8c      	ldr	r3, [pc, #560]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ea      	bne.n	8002c08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a6 	beq.w	8002d8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c44:	4b84      	ldr	r3, [pc, #528]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2b4>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x2b6>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c66:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <HAL_RCC_OscConfig+0x4bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c82:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCC_OscConfig+0x4bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x4bc>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fe71 	bl	8001974 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe fe6d 	bl	8001974 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e183      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e5c <HAL_RCC_OscConfig+0x4bc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_RCC_OscConfig+0x32e>
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ccc:	e024      	b.n	8002d18 <HAL_RCC_OscConfig+0x378>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d110      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x358>
 8002cd6:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf6:	e00f      	b.n	8002d18 <HAL_RCC_OscConfig+0x378>
 8002cf8:	4b57      	ldr	r3, [pc, #348]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	4a56      	ldr	r2, [pc, #344]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d016      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fe28 	bl	8001974 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe fe24 	bl	8001974 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e138      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ed      	beq.n	8002d28 <HAL_RCC_OscConfig+0x388>
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fe11 	bl	8001974 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fe0d 	bl	8001974 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e121      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ed      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b35      	ldr	r3, [pc, #212]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	4a34      	ldr	r2, [pc, #208]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002da6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fde0 	bl	8001974 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db8:	f7fe fddc 	bl	8001974 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0f2      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dca:	4b23      	ldr	r3, [pc, #140]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x418>
 8002dd8:	e01b      	b.n	8002e12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dda:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002de0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fdc3 	bl	8001974 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7fe fdbf 	bl	8001974 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0d5      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80c9 	beq.w	8002fae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	f000 8083 	beq.w	8002f30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d15e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_RCC_OscConfig+0x4b8>)
 8002e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd99 	bl	8001974 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e44:	e00c      	b.n	8002e60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fd95 	bl	8001974 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d905      	bls.n	8002e60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0ab      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b52      	ldr	r3, [pc, #328]	@ (8002fbc <HAL_RCC_OscConfig+0x61c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a11      	ldr	r1, [r2, #32]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e86:	0212      	lsls	r2, r2, #8
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e8e:	0852      	lsrs	r2, r2, #1
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0552      	lsls	r2, r2, #21
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0652      	lsls	r2, r2, #25
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ea6:	06d2      	lsls	r2, r2, #27
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4943      	ldr	r1, [pc, #268]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a40      	ldr	r2, [pc, #256]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fd54 	bl	8001974 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fd50 	bl	8001974 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e066      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b35      	ldr	r3, [pc, #212]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x530>
 8002eee:	e05e      	b.n	8002fae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a30      	ldr	r2, [pc, #192]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd3a 	bl	8001974 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fd36 	bl	8001974 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e04c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f16:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f22:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	4924      	ldr	r1, [pc, #144]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002f28:	4b25      	ldr	r3, [pc, #148]	@ (8002fc0 <HAL_RCC_OscConfig+0x620>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
 8002f2e:	e03e      	b.n	8002fae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e039      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d12c      	bne.n	8002faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d123      	bne.n	8002faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d11b      	bne.n	8002faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d113      	bne.n	8002faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	019f800c 	.word	0x019f800c
 8002fc0:	feeefffc 	.word	0xfeeefffc

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e11e      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b91      	ldr	r3, [pc, #580]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b8e      	ldr	r3, [pc, #568]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	498c      	ldr	r1, [pc, #560]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e106      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d073      	beq.n	8003100 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d129      	bne.n	8003074 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003020:	4b81      	ldr	r3, [pc, #516]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0f4      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003030:	f000 f966 	bl	8003300 <RCC_GetSysClockFreqFromPLLSource>
 8003034:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4a7c      	ldr	r2, [pc, #496]	@ (800322c <HAL_RCC_ClockConfig+0x268>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d93f      	bls.n	80030be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800303e:	4b7a      	ldr	r3, [pc, #488]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003052:	2b00      	cmp	r3, #0
 8003054:	d033      	beq.n	80030be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800305a:	2b00      	cmp	r3, #0
 800305c:	d12f      	bne.n	80030be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800305e:	4b72      	ldr	r3, [pc, #456]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003066:	4a70      	ldr	r2, [pc, #448]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800306c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800306e:	2380      	movs	r3, #128	@ 0x80
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e024      	b.n	80030be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307c:	4b6a      	ldr	r3, [pc, #424]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0c6      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308c:	4b66      	ldr	r3, [pc, #408]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0be      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800309c:	f000 f8ce 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4a61      	ldr	r2, [pc, #388]	@ (800322c <HAL_RCC_ClockConfig+0x268>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d909      	bls.n	80030be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80030b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030ba:	2380      	movs	r3, #128	@ 0x80
 80030bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b5a      	ldr	r3, [pc, #360]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4957      	ldr	r1, [pc, #348]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fc50 	bl	8001974 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fe fc4c 	bl	8001974 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e095      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d023      	beq.n	8003154 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b43      	ldr	r3, [pc, #268]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a42      	ldr	r2, [pc, #264]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800311e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003122:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003130:	4b3d      	ldr	r3, [pc, #244]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003138:	4a3b      	ldr	r2, [pc, #236]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800313a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800313e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4936      	ldr	r1, [pc, #216]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
 8003152:	e008      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b80      	cmp	r3, #128	@ 0x80
 8003158:	d105      	bne.n	8003166 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800315a:	4b33      	ldr	r3, [pc, #204]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4a32      	ldr	r2, [pc, #200]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 8003160:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003164:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003166:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d21d      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 020f 	bic.w	r2, r3, #15
 800317c:	4929      	ldr	r1, [pc, #164]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003184:	f7fe fbf6 	bl	8001974 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe fbf2 	bl	8001974 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e03b      	b.n	800321a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_RCC_ClockConfig+0x260>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1ed      	bne.n	800318c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4917      	ldr	r1, [pc, #92]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031da:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	490f      	ldr	r1, [pc, #60]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ee:	f000 f825 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <HAL_RCC_ClockConfig+0x264>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490c      	ldr	r1, [pc, #48]	@ (8003230 <HAL_RCC_ClockConfig+0x26c>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_RCC_ClockConfig+0x270>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fb62 	bl	80018dc <HAL_InitTick>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
 800322c:	04c4b400 	.word	0x04c4b400
 8003230:	08005db4 	.word	0x08005db4
 8003234:	20000014 	.word	0x20000014
 8003238:	20000018 	.word	0x20000018

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003242:	4b2c      	ldr	r3, [pc, #176]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b04      	cmp	r3, #4
 800324c:	d102      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800324e:	4b2a      	ldr	r3, [pc, #168]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e047      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003254:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d102      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003260:	4b26      	ldr	r3, [pc, #152]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e03e      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003266:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d136      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3301      	adds	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003290:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329a:	68d2      	ldr	r2, [r2, #12]
 800329c:	0a12      	lsrs	r2, r2, #8
 800329e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
      break;
 80032a8:	e00c      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032aa:	4a13      	ldr	r2, [pc, #76]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	4a10      	ldr	r2, [pc, #64]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	0a12      	lsrs	r2, r2, #8
 80032b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
      break;
 80032c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0e5b      	lsrs	r3, r3, #25
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e001      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032e4:	693b      	ldr	r3, [r7, #16]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003306:	4b1e      	ldr	r3, [pc, #120]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d10c      	bne.n	800333e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003324:	4a17      	ldr	r2, [pc, #92]	@ (8003384 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800332e:	68d2      	ldr	r2, [r2, #12]
 8003330:	0a12      	lsrs	r2, r2, #8
 8003332:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	617b      	str	r3, [r7, #20]
    break;
 800333c:	e00c      	b.n	8003358 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4a0e      	ldr	r2, [pc, #56]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003348:	68d2      	ldr	r2, [r2, #12]
 800334a:	0a12      	lsrs	r2, r2, #8
 800334c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    break;
 8003356:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0e5b      	lsrs	r3, r3, #25
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40021000 	.word	0x40021000
 8003384:	007a1200 	.word	0x007a1200
 8003388:	00f42400 	.word	0x00f42400

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003394:	2300      	movs	r3, #0
 8003396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003398:	2300      	movs	r3, #0
 800339a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8098 	beq.w	80034da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b43      	ldr	r3, [pc, #268]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	4b40      	ldr	r3, [pc, #256]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c6:	4b3d      	ldr	r3, [pc, #244]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d6:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a39      	ldr	r2, [pc, #228]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e2:	f7fe fac7 	bl	8001974 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e8:	e009      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fac3 	bl	8001974 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d902      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	74fb      	strb	r3, [r7, #19]
        break;
 80033fc:	e005      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033fe:	4b30      	ldr	r3, [pc, #192]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ef      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d159      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003410:	4b2a      	ldr	r3, [pc, #168]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01e      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	d019      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800342c:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003438:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003448:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fa83 	bl	8001974 <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	e00b      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fa7f 	bl	8001974 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d902      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	74fb      	strb	r3, [r7, #19]
            break;
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ec      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349e:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	4903      	ldr	r1, [pc, #12]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034b4:	e008      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	74bb      	strb	r3, [r7, #18]
 80034ba:	e005      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c8:	7c7b      	ldrb	r3, [r7, #17]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4ba6      	ldr	r3, [pc, #664]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	4aa5      	ldr	r2, [pc, #660]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e6:	4ba0      	ldr	r3, [pc, #640]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f023 0203 	bic.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	499c      	ldr	r1, [pc, #624]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003508:	4b97      	ldr	r3, [pc, #604]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 020c 	bic.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4994      	ldr	r1, [pc, #592]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800352a:	4b8f      	ldr	r3, [pc, #572]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	498b      	ldr	r1, [pc, #556]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800354c:	4b86      	ldr	r3, [pc, #536]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	4983      	ldr	r1, [pc, #524]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800356e:	4b7e      	ldr	r3, [pc, #504]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	497a      	ldr	r1, [pc, #488]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003590:	4b75      	ldr	r3, [pc, #468]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4972      	ldr	r1, [pc, #456]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4969      	ldr	r1, [pc, #420]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d4:	4b64      	ldr	r3, [pc, #400]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4961      	ldr	r1, [pc, #388]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	4958      	ldr	r1, [pc, #352]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	4950      	ldr	r1, [pc, #320]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b4b      	ldr	r3, [pc, #300]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a4a      	ldr	r2, [pc, #296]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003642:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003650:	4b45      	ldr	r3, [pc, #276]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4942      	ldr	r1, [pc, #264]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a3c      	ldr	r2, [pc, #240]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003688:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	4934      	ldr	r1, [pc, #208]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c0:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ce:	4926      	ldr	r1, [pc, #152]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	4918      	ldr	r1, [pc, #96]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003722:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003730:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	490a      	ldr	r1, [pc, #40]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800375c:	7cbb      	ldrb	r3, [r7, #18]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000

0800376c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e09d      	b.n	80038ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378e:	d009      	beq.n	80037a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
 8003796:	e005      	b.n	80037a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd ff6c 	bl	800169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e4:	d902      	bls.n	80037ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e002      	b.n	80037f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037fa:	d007      	beq.n	800380c <HAL_SPI_Init+0xa0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003804:	d002      	beq.n	800380c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384e:	ea42 0103 	orr.w	r1, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	0c1b      	lsrs	r3, r3, #16
 8003868:	f003 0204 	and.w	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003888:	ea42 0103 	orr.w	r1, r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b088      	sub	sp, #32
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d2:	f7fe f84f 	bl	8001974 <HAL_GetTick>
 80038d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	e15c      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_Transmit+0x36>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e154      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_SPI_Transmit+0x48>
 8003906:	2302      	movs	r3, #2
 8003908:	e14d      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2203      	movs	r2, #3
 8003916:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395c:	d10f      	bne.n	800397e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800396c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800397c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d007      	beq.n	800399c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039a4:	d952      	bls.n	8003a4c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Transmit+0xf2>
 80039ae:	8b7b      	ldrh	r3, [r7, #26]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d145      	bne.n	8003a40 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	881a      	ldrh	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d8:	e032      	b.n	8003a40 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d112      	bne.n	8003a0e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	881a      	ldrh	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a0c:	e018      	b.n	8003a40 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0e:	f7fd ffb1 	bl	8001974 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_Transmit+0x164>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Transmit+0x16a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0b2      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1c7      	bne.n	80039da <HAL_SPI_Transmit+0x118>
 8003a4a:	e083      	b.n	8003b54 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_Transmit+0x198>
 8003a54:	8b7b      	ldrh	r3, [r7, #26]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d177      	bne.n	8003b4a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d912      	bls.n	8003a8a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b02      	subs	r3, #2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a88:	e05f      	b.n	8003b4a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ab0:	e04b      	b.n	8003b4a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d12b      	bne.n	8003b18 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d912      	bls.n	8003af0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	1c9a      	adds	r2, r3, #2
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b02      	subs	r3, #2
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aee:	e02c      	b.n	8003b4a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b16:	e018      	b.n	8003b4a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b18:	f7fd ff2c 	bl	8001974 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d803      	bhi.n	8003b30 <HAL_SPI_Transmit+0x26e>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d102      	bne.n	8003b36 <HAL_SPI_Transmit+0x274>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e02d      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ae      	bne.n	8003ab2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f947 	bl	8003dec <SPI_EndRxTxTransaction>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc0:	f7fd fed8 	bl	8001974 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd0:	f7fd fed0 	bl	8001974 <HAL_GetTick>
 8003bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	015b      	lsls	r3, r3, #5
 8003bdc:	0d1b      	lsrs	r3, r3, #20
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be6:	e054      	b.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d050      	beq.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf0:	f7fd fec0 	bl	8001974 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d902      	bls.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d13d      	bne.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c1e:	d111      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d004      	beq.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d107      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4c:	d10f      	bne.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e017      	b.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d19b      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000014 	.word	0x20000014

08003cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cd2:	f7fd fe4f 	bl	8001974 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ce2:	f7fd fe47 	bl	8001974 <HAL_GetTick>
 8003ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00da      	lsls	r2, r3, #3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	0d1b      	lsrs	r3, r3, #20
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d08:	e060      	b.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d10:	d107      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d050      	beq.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2a:	f7fd fe23 	bl	8001974 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13d      	bne.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d58:	d111      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d62:	d004      	beq.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	d107      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	d10f      	bne.n	8003da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e010      	b.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d196      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000014 	.word	0x20000014

08003dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff5b 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e027      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	@ 0x80
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fec0 	bl	8003bb0 <SPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e014      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff ff34 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e000      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <siprintf>:
 8003e78:	b40e      	push	{r1, r2, r3}
 8003e7a:	b500      	push	{lr}
 8003e7c:	b09c      	sub	sp, #112	@ 0x70
 8003e7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e80:	9002      	str	r0, [sp, #8]
 8003e82:	9006      	str	r0, [sp, #24]
 8003e84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e88:	4809      	ldr	r0, [pc, #36]	@ (8003eb0 <siprintf+0x38>)
 8003e8a:	9107      	str	r1, [sp, #28]
 8003e8c:	9104      	str	r1, [sp, #16]
 8003e8e:	4909      	ldr	r1, [pc, #36]	@ (8003eb4 <siprintf+0x3c>)
 8003e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e94:	9105      	str	r1, [sp, #20]
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	a902      	add	r1, sp, #8
 8003e9c:	f000 f994 	bl	80041c8 <_svfiprintf_r>
 8003ea0:	9b02      	ldr	r3, [sp, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	b01c      	add	sp, #112	@ 0x70
 8003ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eac:	b003      	add	sp, #12
 8003eae:	4770      	bx	lr
 8003eb0:	20000020 	.word	0x20000020
 8003eb4:	ffff0208 	.word	0xffff0208

08003eb8 <memset>:
 8003eb8:	4402      	add	r2, r0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <__errno>:
 8003ec8:	4b01      	ldr	r3, [pc, #4]	@ (8003ed0 <__errno+0x8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000020 	.word	0x20000020

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f0c <__libc_init_array+0x38>)
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f10 <__libc_init_array+0x3c>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	2600      	movs	r6, #0
 8003ee0:	42a6      	cmp	r6, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8003f14 <__libc_init_array+0x40>)
 8003ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8003f18 <__libc_init_array+0x44>)
 8003ee8:	f000 fc66 	bl	80047b8 <_init>
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	42a6      	cmp	r6, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efc:	4798      	blx	r3
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f06:	4798      	blx	r3
 8003f08:	3601      	adds	r6, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	08005e00 	.word	0x08005e00
 8003f10:	08005e00 	.word	0x08005e00
 8003f14:	08005e00 	.word	0x08005e00
 8003f18:	08005e04 	.word	0x08005e04

08003f1c <__retarget_lock_acquire_recursive>:
 8003f1c:	4770      	bx	lr

08003f1e <__retarget_lock_release_recursive>:
 8003f1e:	4770      	bx	lr

08003f20 <_free_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4605      	mov	r5, r0
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d041      	beq.n	8003fac <_free_r+0x8c>
 8003f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2c:	1f0c      	subs	r4, r1, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfb8      	it	lt
 8003f32:	18e4      	addlt	r4, r4, r3
 8003f34:	f000 f8e0 	bl	80040f8 <__malloc_lock>
 8003f38:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb0 <_free_r+0x90>)
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	b933      	cbnz	r3, 8003f4c <_free_r+0x2c>
 8003f3e:	6063      	str	r3, [r4, #4]
 8003f40:	6014      	str	r4, [r2, #0]
 8003f42:	4628      	mov	r0, r5
 8003f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f48:	f000 b8dc 	b.w	8004104 <__malloc_unlock>
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d908      	bls.n	8003f62 <_free_r+0x42>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	1821      	adds	r1, r4, r0
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf01      	itttt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	1809      	addeq	r1, r1, r0
 8003f5e:	6021      	streq	r1, [r4, #0]
 8003f60:	e7ed      	b.n	8003f3e <_free_r+0x1e>
 8003f62:	461a      	mov	r2, r3
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b10b      	cbz	r3, 8003f6c <_free_r+0x4c>
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	d9fa      	bls.n	8003f62 <_free_r+0x42>
 8003f6c:	6811      	ldr	r1, [r2, #0]
 8003f6e:	1850      	adds	r0, r2, r1
 8003f70:	42a0      	cmp	r0, r4
 8003f72:	d10b      	bne.n	8003f8c <_free_r+0x6c>
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	4401      	add	r1, r0
 8003f78:	1850      	adds	r0, r2, r1
 8003f7a:	4283      	cmp	r3, r0
 8003f7c:	6011      	str	r1, [r2, #0]
 8003f7e:	d1e0      	bne.n	8003f42 <_free_r+0x22>
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	6053      	str	r3, [r2, #4]
 8003f86:	4408      	add	r0, r1
 8003f88:	6010      	str	r0, [r2, #0]
 8003f8a:	e7da      	b.n	8003f42 <_free_r+0x22>
 8003f8c:	d902      	bls.n	8003f94 <_free_r+0x74>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	e7d6      	b.n	8003f42 <_free_r+0x22>
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	1821      	adds	r1, r4, r0
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	bf04      	itt	eq
 8003f9c:	6819      	ldreq	r1, [r3, #0]
 8003f9e:	685b      	ldreq	r3, [r3, #4]
 8003fa0:	6063      	str	r3, [r4, #4]
 8003fa2:	bf04      	itt	eq
 8003fa4:	1809      	addeq	r1, r1, r0
 8003fa6:	6021      	streq	r1, [r4, #0]
 8003fa8:	6054      	str	r4, [r2, #4]
 8003faa:	e7ca      	b.n	8003f42 <_free_r+0x22>
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	bf00      	nop
 8003fb0:	200006b4 	.word	0x200006b4

08003fb4 <sbrk_aligned>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003ff4 <sbrk_aligned+0x40>)
 8003fb8:	460c      	mov	r4, r1
 8003fba:	6831      	ldr	r1, [r6, #0]
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b911      	cbnz	r1, 8003fc6 <sbrk_aligned+0x12>
 8003fc0:	f000 fba6 	bl	8004710 <_sbrk_r>
 8003fc4:	6030      	str	r0, [r6, #0]
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 fba1 	bl	8004710 <_sbrk_r>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	d103      	bne.n	8003fda <sbrk_aligned+0x26>
 8003fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	1cc4      	adds	r4, r0, #3
 8003fdc:	f024 0403 	bic.w	r4, r4, #3
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d0f8      	beq.n	8003fd6 <sbrk_aligned+0x22>
 8003fe4:	1a21      	subs	r1, r4, r0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 fb92 	bl	8004710 <_sbrk_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d1f2      	bne.n	8003fd6 <sbrk_aligned+0x22>
 8003ff0:	e7ef      	b.n	8003fd2 <sbrk_aligned+0x1e>
 8003ff2:	bf00      	nop
 8003ff4:	200006b0 	.word	0x200006b0

08003ff8 <_malloc_r>:
 8003ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ffc:	1ccd      	adds	r5, r1, #3
 8003ffe:	f025 0503 	bic.w	r5, r5, #3
 8004002:	3508      	adds	r5, #8
 8004004:	2d0c      	cmp	r5, #12
 8004006:	bf38      	it	cc
 8004008:	250c      	movcc	r5, #12
 800400a:	2d00      	cmp	r5, #0
 800400c:	4606      	mov	r6, r0
 800400e:	db01      	blt.n	8004014 <_malloc_r+0x1c>
 8004010:	42a9      	cmp	r1, r5
 8004012:	d904      	bls.n	800401e <_malloc_r+0x26>
 8004014:	230c      	movs	r3, #12
 8004016:	6033      	str	r3, [r6, #0]
 8004018:	2000      	movs	r0, #0
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040f4 <_malloc_r+0xfc>
 8004022:	f000 f869 	bl	80040f8 <__malloc_lock>
 8004026:	f8d8 3000 	ldr.w	r3, [r8]
 800402a:	461c      	mov	r4, r3
 800402c:	bb44      	cbnz	r4, 8004080 <_malloc_r+0x88>
 800402e:	4629      	mov	r1, r5
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff ffbf 	bl	8003fb4 <sbrk_aligned>
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	4604      	mov	r4, r0
 800403a:	d158      	bne.n	80040ee <_malloc_r+0xf6>
 800403c:	f8d8 4000 	ldr.w	r4, [r8]
 8004040:	4627      	mov	r7, r4
 8004042:	2f00      	cmp	r7, #0
 8004044:	d143      	bne.n	80040ce <_malloc_r+0xd6>
 8004046:	2c00      	cmp	r4, #0
 8004048:	d04b      	beq.n	80040e2 <_malloc_r+0xea>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	4639      	mov	r1, r7
 800404e:	4630      	mov	r0, r6
 8004050:	eb04 0903 	add.w	r9, r4, r3
 8004054:	f000 fb5c 	bl	8004710 <_sbrk_r>
 8004058:	4581      	cmp	r9, r0
 800405a:	d142      	bne.n	80040e2 <_malloc_r+0xea>
 800405c:	6821      	ldr	r1, [r4, #0]
 800405e:	1a6d      	subs	r5, r5, r1
 8004060:	4629      	mov	r1, r5
 8004062:	4630      	mov	r0, r6
 8004064:	f7ff ffa6 	bl	8003fb4 <sbrk_aligned>
 8004068:	3001      	adds	r0, #1
 800406a:	d03a      	beq.n	80040e2 <_malloc_r+0xea>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	442b      	add	r3, r5
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	f8d8 3000 	ldr.w	r3, [r8]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	bb62      	cbnz	r2, 80040d4 <_malloc_r+0xdc>
 800407a:	f8c8 7000 	str.w	r7, [r8]
 800407e:	e00f      	b.n	80040a0 <_malloc_r+0xa8>
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	1b52      	subs	r2, r2, r5
 8004084:	d420      	bmi.n	80040c8 <_malloc_r+0xd0>
 8004086:	2a0b      	cmp	r2, #11
 8004088:	d917      	bls.n	80040ba <_malloc_r+0xc2>
 800408a:	1961      	adds	r1, r4, r5
 800408c:	42a3      	cmp	r3, r4
 800408e:	6025      	str	r5, [r4, #0]
 8004090:	bf18      	it	ne
 8004092:	6059      	strne	r1, [r3, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	bf08      	it	eq
 8004098:	f8c8 1000 	streq.w	r1, [r8]
 800409c:	5162      	str	r2, [r4, r5]
 800409e:	604b      	str	r3, [r1, #4]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f82f 	bl	8004104 <__malloc_unlock>
 80040a6:	f104 000b 	add.w	r0, r4, #11
 80040aa:	1d23      	adds	r3, r4, #4
 80040ac:	f020 0007 	bic.w	r0, r0, #7
 80040b0:	1ac2      	subs	r2, r0, r3
 80040b2:	bf1c      	itt	ne
 80040b4:	1a1b      	subne	r3, r3, r0
 80040b6:	50a3      	strne	r3, [r4, r2]
 80040b8:	e7af      	b.n	800401a <_malloc_r+0x22>
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	bf0c      	ite	eq
 80040c0:	f8c8 2000 	streq.w	r2, [r8]
 80040c4:	605a      	strne	r2, [r3, #4]
 80040c6:	e7eb      	b.n	80040a0 <_malloc_r+0xa8>
 80040c8:	4623      	mov	r3, r4
 80040ca:	6864      	ldr	r4, [r4, #4]
 80040cc:	e7ae      	b.n	800402c <_malloc_r+0x34>
 80040ce:	463c      	mov	r4, r7
 80040d0:	687f      	ldr	r7, [r7, #4]
 80040d2:	e7b6      	b.n	8004042 <_malloc_r+0x4a>
 80040d4:	461a      	mov	r2, r3
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d1fb      	bne.n	80040d4 <_malloc_r+0xdc>
 80040dc:	2300      	movs	r3, #0
 80040de:	6053      	str	r3, [r2, #4]
 80040e0:	e7de      	b.n	80040a0 <_malloc_r+0xa8>
 80040e2:	230c      	movs	r3, #12
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 f80c 	bl	8004104 <__malloc_unlock>
 80040ec:	e794      	b.n	8004018 <_malloc_r+0x20>
 80040ee:	6005      	str	r5, [r0, #0]
 80040f0:	e7d6      	b.n	80040a0 <_malloc_r+0xa8>
 80040f2:	bf00      	nop
 80040f4:	200006b4 	.word	0x200006b4

080040f8 <__malloc_lock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__malloc_lock+0x8>)
 80040fa:	f7ff bf0f 	b.w	8003f1c <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	200006ac 	.word	0x200006ac

08004104 <__malloc_unlock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_unlock+0x8>)
 8004106:	f7ff bf0a 	b.w	8003f1e <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	200006ac 	.word	0x200006ac

08004110 <__ssputs_r>:
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	688e      	ldr	r6, [r1, #8]
 8004116:	461f      	mov	r7, r3
 8004118:	42be      	cmp	r6, r7
 800411a:	680b      	ldr	r3, [r1, #0]
 800411c:	4682      	mov	sl, r0
 800411e:	460c      	mov	r4, r1
 8004120:	4690      	mov	r8, r2
 8004122:	d82d      	bhi.n	8004180 <__ssputs_r+0x70>
 8004124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800412c:	d026      	beq.n	800417c <__ssputs_r+0x6c>
 800412e:	6965      	ldr	r5, [r4, #20]
 8004130:	6909      	ldr	r1, [r1, #16]
 8004132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004136:	eba3 0901 	sub.w	r9, r3, r1
 800413a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800413e:	1c7b      	adds	r3, r7, #1
 8004140:	444b      	add	r3, r9
 8004142:	106d      	asrs	r5, r5, #1
 8004144:	429d      	cmp	r5, r3
 8004146:	bf38      	it	cc
 8004148:	461d      	movcc	r5, r3
 800414a:	0553      	lsls	r3, r2, #21
 800414c:	d527      	bpl.n	800419e <__ssputs_r+0x8e>
 800414e:	4629      	mov	r1, r5
 8004150:	f7ff ff52 	bl	8003ff8 <_malloc_r>
 8004154:	4606      	mov	r6, r0
 8004156:	b360      	cbz	r0, 80041b2 <__ssputs_r+0xa2>
 8004158:	6921      	ldr	r1, [r4, #16]
 800415a:	464a      	mov	r2, r9
 800415c:	f000 fae8 	bl	8004730 <memcpy>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	6126      	str	r6, [r4, #16]
 800416e:	6165      	str	r5, [r4, #20]
 8004170:	444e      	add	r6, r9
 8004172:	eba5 0509 	sub.w	r5, r5, r9
 8004176:	6026      	str	r6, [r4, #0]
 8004178:	60a5      	str	r5, [r4, #8]
 800417a:	463e      	mov	r6, r7
 800417c:	42be      	cmp	r6, r7
 800417e:	d900      	bls.n	8004182 <__ssputs_r+0x72>
 8004180:	463e      	mov	r6, r7
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	4632      	mov	r2, r6
 8004186:	4641      	mov	r1, r8
 8004188:	f000 faa8 	bl	80046dc <memmove>
 800418c:	68a3      	ldr	r3, [r4, #8]
 800418e:	1b9b      	subs	r3, r3, r6
 8004190:	60a3      	str	r3, [r4, #8]
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	4433      	add	r3, r6
 8004196:	6023      	str	r3, [r4, #0]
 8004198:	2000      	movs	r0, #0
 800419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419e:	462a      	mov	r2, r5
 80041a0:	f000 fad4 	bl	800474c <_realloc_r>
 80041a4:	4606      	mov	r6, r0
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d1e0      	bne.n	800416c <__ssputs_r+0x5c>
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	4650      	mov	r0, sl
 80041ae:	f7ff feb7 	bl	8003f20 <_free_r>
 80041b2:	230c      	movs	r3, #12
 80041b4:	f8ca 3000 	str.w	r3, [sl]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041be:	81a3      	strh	r3, [r4, #12]
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	e7e9      	b.n	800419a <__ssputs_r+0x8a>
	...

080041c8 <_svfiprintf_r>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	4698      	mov	r8, r3
 80041ce:	898b      	ldrh	r3, [r1, #12]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	b09d      	sub	sp, #116	@ 0x74
 80041d4:	4607      	mov	r7, r0
 80041d6:	460d      	mov	r5, r1
 80041d8:	4614      	mov	r4, r2
 80041da:	d510      	bpl.n	80041fe <_svfiprintf_r+0x36>
 80041dc:	690b      	ldr	r3, [r1, #16]
 80041de:	b973      	cbnz	r3, 80041fe <_svfiprintf_r+0x36>
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	f7ff ff09 	bl	8003ff8 <_malloc_r>
 80041e6:	6028      	str	r0, [r5, #0]
 80041e8:	6128      	str	r0, [r5, #16]
 80041ea:	b930      	cbnz	r0, 80041fa <_svfiprintf_r+0x32>
 80041ec:	230c      	movs	r3, #12
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b01d      	add	sp, #116	@ 0x74
 80041f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fa:	2340      	movs	r3, #64	@ 0x40
 80041fc:	616b      	str	r3, [r5, #20]
 80041fe:	2300      	movs	r3, #0
 8004200:	9309      	str	r3, [sp, #36]	@ 0x24
 8004202:	2320      	movs	r3, #32
 8004204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004208:	f8cd 800c 	str.w	r8, [sp, #12]
 800420c:	2330      	movs	r3, #48	@ 0x30
 800420e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043ac <_svfiprintf_r+0x1e4>
 8004212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004216:	f04f 0901 	mov.w	r9, #1
 800421a:	4623      	mov	r3, r4
 800421c:	469a      	mov	sl, r3
 800421e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004222:	b10a      	cbz	r2, 8004228 <_svfiprintf_r+0x60>
 8004224:	2a25      	cmp	r2, #37	@ 0x25
 8004226:	d1f9      	bne.n	800421c <_svfiprintf_r+0x54>
 8004228:	ebba 0b04 	subs.w	fp, sl, r4
 800422c:	d00b      	beq.n	8004246 <_svfiprintf_r+0x7e>
 800422e:	465b      	mov	r3, fp
 8004230:	4622      	mov	r2, r4
 8004232:	4629      	mov	r1, r5
 8004234:	4638      	mov	r0, r7
 8004236:	f7ff ff6b 	bl	8004110 <__ssputs_r>
 800423a:	3001      	adds	r0, #1
 800423c:	f000 80a7 	beq.w	800438e <_svfiprintf_r+0x1c6>
 8004240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004242:	445a      	add	r2, fp
 8004244:	9209      	str	r2, [sp, #36]	@ 0x24
 8004246:	f89a 3000 	ldrb.w	r3, [sl]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 809f 	beq.w	800438e <_svfiprintf_r+0x1c6>
 8004250:	2300      	movs	r3, #0
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800425a:	f10a 0a01 	add.w	sl, sl, #1
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	9307      	str	r3, [sp, #28]
 8004262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004266:	931a      	str	r3, [sp, #104]	@ 0x68
 8004268:	4654      	mov	r4, sl
 800426a:	2205      	movs	r2, #5
 800426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004270:	484e      	ldr	r0, [pc, #312]	@ (80043ac <_svfiprintf_r+0x1e4>)
 8004272:	f7fb ffd5 	bl	8000220 <memchr>
 8004276:	9a04      	ldr	r2, [sp, #16]
 8004278:	b9d8      	cbnz	r0, 80042b2 <_svfiprintf_r+0xea>
 800427a:	06d0      	lsls	r0, r2, #27
 800427c:	bf44      	itt	mi
 800427e:	2320      	movmi	r3, #32
 8004280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004284:	0711      	lsls	r1, r2, #28
 8004286:	bf44      	itt	mi
 8004288:	232b      	movmi	r3, #43	@ 0x2b
 800428a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800428e:	f89a 3000 	ldrb.w	r3, [sl]
 8004292:	2b2a      	cmp	r3, #42	@ 0x2a
 8004294:	d015      	beq.n	80042c2 <_svfiprintf_r+0xfa>
 8004296:	9a07      	ldr	r2, [sp, #28]
 8004298:	4654      	mov	r4, sl
 800429a:	2000      	movs	r0, #0
 800429c:	f04f 0c0a 	mov.w	ip, #10
 80042a0:	4621      	mov	r1, r4
 80042a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a6:	3b30      	subs	r3, #48	@ 0x30
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d94b      	bls.n	8004344 <_svfiprintf_r+0x17c>
 80042ac:	b1b0      	cbz	r0, 80042dc <_svfiprintf_r+0x114>
 80042ae:	9207      	str	r2, [sp, #28]
 80042b0:	e014      	b.n	80042dc <_svfiprintf_r+0x114>
 80042b2:	eba0 0308 	sub.w	r3, r0, r8
 80042b6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	9304      	str	r3, [sp, #16]
 80042be:	46a2      	mov	sl, r4
 80042c0:	e7d2      	b.n	8004268 <_svfiprintf_r+0xa0>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	1d19      	adds	r1, r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	9103      	str	r1, [sp, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfbb      	ittet	lt
 80042ce:	425b      	neglt	r3, r3
 80042d0:	f042 0202 	orrlt.w	r2, r2, #2
 80042d4:	9307      	strge	r3, [sp, #28]
 80042d6:	9307      	strlt	r3, [sp, #28]
 80042d8:	bfb8      	it	lt
 80042da:	9204      	strlt	r2, [sp, #16]
 80042dc:	7823      	ldrb	r3, [r4, #0]
 80042de:	2b2e      	cmp	r3, #46	@ 0x2e
 80042e0:	d10a      	bne.n	80042f8 <_svfiprintf_r+0x130>
 80042e2:	7863      	ldrb	r3, [r4, #1]
 80042e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e6:	d132      	bne.n	800434e <_svfiprintf_r+0x186>
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	9203      	str	r2, [sp, #12]
 80042f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042f4:	3402      	adds	r4, #2
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043bc <_svfiprintf_r+0x1f4>
 80042fc:	7821      	ldrb	r1, [r4, #0]
 80042fe:	2203      	movs	r2, #3
 8004300:	4650      	mov	r0, sl
 8004302:	f7fb ff8d 	bl	8000220 <memchr>
 8004306:	b138      	cbz	r0, 8004318 <_svfiprintf_r+0x150>
 8004308:	9b04      	ldr	r3, [sp, #16]
 800430a:	eba0 000a 	sub.w	r0, r0, sl
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	4082      	lsls	r2, r0
 8004312:	4313      	orrs	r3, r2
 8004314:	3401      	adds	r4, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431c:	4824      	ldr	r0, [pc, #144]	@ (80043b0 <_svfiprintf_r+0x1e8>)
 800431e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004322:	2206      	movs	r2, #6
 8004324:	f7fb ff7c 	bl	8000220 <memchr>
 8004328:	2800      	cmp	r0, #0
 800432a:	d036      	beq.n	800439a <_svfiprintf_r+0x1d2>
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <_svfiprintf_r+0x1ec>)
 800432e:	bb1b      	cbnz	r3, 8004378 <_svfiprintf_r+0x1b0>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	3307      	adds	r3, #7
 8004334:	f023 0307 	bic.w	r3, r3, #7
 8004338:	3308      	adds	r3, #8
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433e:	4433      	add	r3, r6
 8004340:	9309      	str	r3, [sp, #36]	@ 0x24
 8004342:	e76a      	b.n	800421a <_svfiprintf_r+0x52>
 8004344:	fb0c 3202 	mla	r2, ip, r2, r3
 8004348:	460c      	mov	r4, r1
 800434a:	2001      	movs	r0, #1
 800434c:	e7a8      	b.n	80042a0 <_svfiprintf_r+0xd8>
 800434e:	2300      	movs	r3, #0
 8004350:	3401      	adds	r4, #1
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 0c0a 	mov.w	ip, #10
 800435a:	4620      	mov	r0, r4
 800435c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004360:	3a30      	subs	r2, #48	@ 0x30
 8004362:	2a09      	cmp	r2, #9
 8004364:	d903      	bls.n	800436e <_svfiprintf_r+0x1a6>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0c6      	beq.n	80042f8 <_svfiprintf_r+0x130>
 800436a:	9105      	str	r1, [sp, #20]
 800436c:	e7c4      	b.n	80042f8 <_svfiprintf_r+0x130>
 800436e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004372:	4604      	mov	r4, r0
 8004374:	2301      	movs	r3, #1
 8004376:	e7f0      	b.n	800435a <_svfiprintf_r+0x192>
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	462a      	mov	r2, r5
 800437e:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <_svfiprintf_r+0x1f0>)
 8004380:	a904      	add	r1, sp, #16
 8004382:	4638      	mov	r0, r7
 8004384:	f3af 8000 	nop.w
 8004388:	1c42      	adds	r2, r0, #1
 800438a:	4606      	mov	r6, r0
 800438c:	d1d6      	bne.n	800433c <_svfiprintf_r+0x174>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	f53f af2d 	bmi.w	80041f0 <_svfiprintf_r+0x28>
 8004396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004398:	e72c      	b.n	80041f4 <_svfiprintf_r+0x2c>
 800439a:	ab03      	add	r3, sp, #12
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	462a      	mov	r2, r5
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <_svfiprintf_r+0x1f0>)
 80043a2:	a904      	add	r1, sp, #16
 80043a4:	4638      	mov	r0, r7
 80043a6:	f000 f879 	bl	800449c <_printf_i>
 80043aa:	e7ed      	b.n	8004388 <_svfiprintf_r+0x1c0>
 80043ac:	08005dc4 	.word	0x08005dc4
 80043b0:	08005dce 	.word	0x08005dce
 80043b4:	00000000 	.word	0x00000000
 80043b8:	08004111 	.word	0x08004111
 80043bc:	08005dca 	.word	0x08005dca

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4698      	mov	r8, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	3b00      	subs	r3, #0
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800441c:	4641      	mov	r1, r8
 800441e:	4638      	mov	r0, r7
 8004420:	47c8      	blx	r9
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf02      	ittt	eq
 8004432:	68e5      	ldreq	r5, [r4, #12]
 8004434:	6833      	ldreq	r3, [r6, #0]
 8004436:	1aed      	subeq	r5, r5, r3
 8004438:	68a3      	ldr	r3, [r4, #8]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4641      	mov	r1, r8
 800445c:	4638      	mov	r0, r7
 800445e:	47c8      	blx	r9
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	@ 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4641      	mov	r1, r8
 800448e:	4638      	mov	r0, r7
 8004490:	47c8      	blx	r9
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044a4:	2f78      	cmp	r7, #120	@ 0x78
 80044a6:	4691      	mov	r9, r2
 80044a8:	4680      	mov	r8, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	469a      	mov	sl, r3
 80044ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	@ 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d2 	beq.w	8004662 <_printf_i+0x1c6>
 80044be:	2f58      	cmp	r7, #88	@ 0x58
 80044c0:	f000 80b9 	beq.w	8004636 <_printf_i+0x19a>
 80044c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	@ (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004649 	.word	0x08004649
 800450c:	08004573 	.word	0x08004573
 8004510:	08004603 	.word	0x08004603
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	0800466b 	.word	0x0800466b
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004573 	.word	0x08004573
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800460b 	.word	0x0800460b
 8004534:	6833      	ldr	r3, [r6, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e09d      	b.n	8004684 <_printf_i+0x1e8>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	1d19      	adds	r1, r3, #4
 800454e:	6031      	str	r1, [r6, #0]
 8004550:	0606      	lsls	r6, r0, #24
 8004552:	d501      	bpl.n	8004558 <_printf_i+0xbc>
 8004554:	681d      	ldr	r5, [r3, #0]
 8004556:	e003      	b.n	8004560 <_printf_i+0xc4>
 8004558:	0645      	lsls	r5, r0, #25
 800455a:	d5fb      	bpl.n	8004554 <_printf_i+0xb8>
 800455c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004560:	2d00      	cmp	r5, #0
 8004562:	da03      	bge.n	800456c <_printf_i+0xd0>
 8004564:	232d      	movs	r3, #45	@ 0x2d
 8004566:	426d      	negs	r5, r5
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456c:	4859      	ldr	r0, [pc, #356]	@ (80046d4 <_printf_i+0x238>)
 800456e:	230a      	movs	r3, #10
 8004570:	e011      	b.n	8004596 <_printf_i+0xfa>
 8004572:	6821      	ldr	r1, [r4, #0]
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	0608      	lsls	r0, r1, #24
 8004578:	f853 5b04 	ldr.w	r5, [r3], #4
 800457c:	d402      	bmi.n	8004584 <_printf_i+0xe8>
 800457e:	0649      	lsls	r1, r1, #25
 8004580:	bf48      	it	mi
 8004582:	b2ad      	uxthmi	r5, r5
 8004584:	2f6f      	cmp	r7, #111	@ 0x6f
 8004586:	4853      	ldr	r0, [pc, #332]	@ (80046d4 <_printf_i+0x238>)
 8004588:	6033      	str	r3, [r6, #0]
 800458a:	bf14      	ite	ne
 800458c:	230a      	movne	r3, #10
 800458e:	2308      	moveq	r3, #8
 8004590:	2100      	movs	r1, #0
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004596:	6866      	ldr	r6, [r4, #4]
 8004598:	60a6      	str	r6, [r4, #8]
 800459a:	2e00      	cmp	r6, #0
 800459c:	bfa2      	ittt	ge
 800459e:	6821      	ldrge	r1, [r4, #0]
 80045a0:	f021 0104 	bicge.w	r1, r1, #4
 80045a4:	6021      	strge	r1, [r4, #0]
 80045a6:	b90d      	cbnz	r5, 80045ac <_printf_i+0x110>
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	d04b      	beq.n	8004644 <_printf_i+0x1a8>
 80045ac:	4616      	mov	r6, r2
 80045ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b2:	fb03 5711 	mls	r7, r3, r1, r5
 80045b6:	5dc7      	ldrb	r7, [r0, r7]
 80045b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045bc:	462f      	mov	r7, r5
 80045be:	42bb      	cmp	r3, r7
 80045c0:	460d      	mov	r5, r1
 80045c2:	d9f4      	bls.n	80045ae <_printf_i+0x112>
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10b      	bne.n	80045e0 <_printf_i+0x144>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	07df      	lsls	r7, r3, #31
 80045cc:	d508      	bpl.n	80045e0 <_printf_i+0x144>
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6861      	ldr	r1, [r4, #4]
 80045d2:	4299      	cmp	r1, r3
 80045d4:	bfde      	ittt	le
 80045d6:	2330      	movle	r3, #48	@ 0x30
 80045d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e0:	1b92      	subs	r2, r2, r6
 80045e2:	6122      	str	r2, [r4, #16]
 80045e4:	f8cd a000 	str.w	sl, [sp]
 80045e8:	464b      	mov	r3, r9
 80045ea:	aa03      	add	r2, sp, #12
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f7ff fee6 	bl	80043c0 <_printf_common>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d14a      	bne.n	800468e <_printf_i+0x1f2>
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	b004      	add	sp, #16
 80045fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f043 0320 	orr.w	r3, r3, #32
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	4833      	ldr	r0, [pc, #204]	@ (80046d8 <_printf_i+0x23c>)
 800460c:	2778      	movs	r7, #120	@ 0x78
 800460e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	6831      	ldr	r1, [r6, #0]
 8004616:	061f      	lsls	r7, r3, #24
 8004618:	f851 5b04 	ldr.w	r5, [r1], #4
 800461c:	d402      	bmi.n	8004624 <_printf_i+0x188>
 800461e:	065f      	lsls	r7, r3, #25
 8004620:	bf48      	it	mi
 8004622:	b2ad      	uxthmi	r5, r5
 8004624:	6031      	str	r1, [r6, #0]
 8004626:	07d9      	lsls	r1, r3, #31
 8004628:	bf44      	itt	mi
 800462a:	f043 0320 	orrmi.w	r3, r3, #32
 800462e:	6023      	strmi	r3, [r4, #0]
 8004630:	b11d      	cbz	r5, 800463a <_printf_i+0x19e>
 8004632:	2310      	movs	r3, #16
 8004634:	e7ac      	b.n	8004590 <_printf_i+0xf4>
 8004636:	4827      	ldr	r0, [pc, #156]	@ (80046d4 <_printf_i+0x238>)
 8004638:	e7e9      	b.n	800460e <_printf_i+0x172>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	f023 0320 	bic.w	r3, r3, #32
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	e7f6      	b.n	8004632 <_printf_i+0x196>
 8004644:	4616      	mov	r6, r2
 8004646:	e7bd      	b.n	80045c4 <_printf_i+0x128>
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	6961      	ldr	r1, [r4, #20]
 800464e:	1d18      	adds	r0, r3, #4
 8004650:	6030      	str	r0, [r6, #0]
 8004652:	062e      	lsls	r6, r5, #24
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	d501      	bpl.n	800465c <_printf_i+0x1c0>
 8004658:	6019      	str	r1, [r3, #0]
 800465a:	e002      	b.n	8004662 <_printf_i+0x1c6>
 800465c:	0668      	lsls	r0, r5, #25
 800465e:	d5fb      	bpl.n	8004658 <_printf_i+0x1bc>
 8004660:	8019      	strh	r1, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	4616      	mov	r6, r2
 8004668:	e7bc      	b.n	80045e4 <_printf_i+0x148>
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	6032      	str	r2, [r6, #0]
 8004670:	681e      	ldr	r6, [r3, #0]
 8004672:	6862      	ldr	r2, [r4, #4]
 8004674:	2100      	movs	r1, #0
 8004676:	4630      	mov	r0, r6
 8004678:	f7fb fdd2 	bl	8000220 <memchr>
 800467c:	b108      	cbz	r0, 8004682 <_printf_i+0x1e6>
 800467e:	1b80      	subs	r0, r0, r6
 8004680:	6060      	str	r0, [r4, #4]
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	2300      	movs	r3, #0
 8004688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800468c:	e7aa      	b.n	80045e4 <_printf_i+0x148>
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	4632      	mov	r2, r6
 8004692:	4649      	mov	r1, r9
 8004694:	4640      	mov	r0, r8
 8004696:	47d0      	blx	sl
 8004698:	3001      	adds	r0, #1
 800469a:	d0ad      	beq.n	80045f8 <_printf_i+0x15c>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	079b      	lsls	r3, r3, #30
 80046a0:	d413      	bmi.n	80046ca <_printf_i+0x22e>
 80046a2:	68e0      	ldr	r0, [r4, #12]
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	4298      	cmp	r0, r3
 80046a8:	bfb8      	it	lt
 80046aa:	4618      	movlt	r0, r3
 80046ac:	e7a6      	b.n	80045fc <_printf_i+0x160>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4632      	mov	r2, r6
 80046b2:	4649      	mov	r1, r9
 80046b4:	4640      	mov	r0, r8
 80046b6:	47d0      	blx	sl
 80046b8:	3001      	adds	r0, #1
 80046ba:	d09d      	beq.n	80045f8 <_printf_i+0x15c>
 80046bc:	3501      	adds	r5, #1
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	9903      	ldr	r1, [sp, #12]
 80046c2:	1a5b      	subs	r3, r3, r1
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dcf2      	bgt.n	80046ae <_printf_i+0x212>
 80046c8:	e7eb      	b.n	80046a2 <_printf_i+0x206>
 80046ca:	2500      	movs	r5, #0
 80046cc:	f104 0619 	add.w	r6, r4, #25
 80046d0:	e7f5      	b.n	80046be <_printf_i+0x222>
 80046d2:	bf00      	nop
 80046d4:	08005dd5 	.word	0x08005dd5
 80046d8:	08005de6 	.word	0x08005de6

080046dc <memmove>:
 80046dc:	4288      	cmp	r0, r1
 80046de:	b510      	push	{r4, lr}
 80046e0:	eb01 0402 	add.w	r4, r1, r2
 80046e4:	d902      	bls.n	80046ec <memmove+0x10>
 80046e6:	4284      	cmp	r4, r0
 80046e8:	4623      	mov	r3, r4
 80046ea:	d807      	bhi.n	80046fc <memmove+0x20>
 80046ec:	1e43      	subs	r3, r0, #1
 80046ee:	42a1      	cmp	r1, r4
 80046f0:	d008      	beq.n	8004704 <memmove+0x28>
 80046f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046fa:	e7f8      	b.n	80046ee <memmove+0x12>
 80046fc:	4402      	add	r2, r0
 80046fe:	4601      	mov	r1, r0
 8004700:	428a      	cmp	r2, r1
 8004702:	d100      	bne.n	8004706 <memmove+0x2a>
 8004704:	bd10      	pop	{r4, pc}
 8004706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800470a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800470e:	e7f7      	b.n	8004700 <memmove+0x24>

08004710 <_sbrk_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d06      	ldr	r5, [pc, #24]	@ (800472c <_sbrk_r+0x1c>)
 8004714:	2300      	movs	r3, #0
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fd f854 	bl	80017c8 <_sbrk>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_sbrk_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_sbrk_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200006a8 	.word	0x200006a8

08004730 <memcpy>:
 8004730:	440a      	add	r2, r1
 8004732:	4291      	cmp	r1, r2
 8004734:	f100 33ff 	add.w	r3, r0, #4294967295
 8004738:	d100      	bne.n	800473c <memcpy+0xc>
 800473a:	4770      	bx	lr
 800473c:	b510      	push	{r4, lr}
 800473e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004746:	4291      	cmp	r1, r2
 8004748:	d1f9      	bne.n	800473e <memcpy+0xe>
 800474a:	bd10      	pop	{r4, pc}

0800474c <_realloc_r>:
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	4680      	mov	r8, r0
 8004752:	4615      	mov	r5, r2
 8004754:	460c      	mov	r4, r1
 8004756:	b921      	cbnz	r1, 8004762 <_realloc_r+0x16>
 8004758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4611      	mov	r1, r2
 800475e:	f7ff bc4b 	b.w	8003ff8 <_malloc_r>
 8004762:	b92a      	cbnz	r2, 8004770 <_realloc_r+0x24>
 8004764:	f7ff fbdc 	bl	8003f20 <_free_r>
 8004768:	2400      	movs	r4, #0
 800476a:	4620      	mov	r0, r4
 800476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004770:	f000 f81a 	bl	80047a8 <_malloc_usable_size_r>
 8004774:	4285      	cmp	r5, r0
 8004776:	4606      	mov	r6, r0
 8004778:	d802      	bhi.n	8004780 <_realloc_r+0x34>
 800477a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800477e:	d8f4      	bhi.n	800476a <_realloc_r+0x1e>
 8004780:	4629      	mov	r1, r5
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fc38 	bl	8003ff8 <_malloc_r>
 8004788:	4607      	mov	r7, r0
 800478a:	2800      	cmp	r0, #0
 800478c:	d0ec      	beq.n	8004768 <_realloc_r+0x1c>
 800478e:	42b5      	cmp	r5, r6
 8004790:	462a      	mov	r2, r5
 8004792:	4621      	mov	r1, r4
 8004794:	bf28      	it	cs
 8004796:	4632      	movcs	r2, r6
 8004798:	f7ff ffca 	bl	8004730 <memcpy>
 800479c:	4621      	mov	r1, r4
 800479e:	4640      	mov	r0, r8
 80047a0:	f7ff fbbe 	bl	8003f20 <_free_r>
 80047a4:	463c      	mov	r4, r7
 80047a6:	e7e0      	b.n	800476a <_realloc_r+0x1e>

080047a8 <_malloc_usable_size_r>:
 80047a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ac:	1f18      	subs	r0, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfbc      	itt	lt
 80047b2:	580b      	ldrlt	r3, [r1, r0]
 80047b4:	18c0      	addlt	r0, r0, r3
 80047b6:	4770      	bx	lr

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
