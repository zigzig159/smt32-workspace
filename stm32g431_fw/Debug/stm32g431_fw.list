
stm32g431_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080033b8  080033b8  000043b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c8  080036c8  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080036c8  080036c8  000046c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d0  080036d0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036d4  080036d4  000046d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000060  08003738  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003738  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000839a  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2f  00000000  00000000  0000d42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068a  00000000  00000000  0000f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c816  00000000  00000000  0000ffba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac3c  00000000  00000000  0002c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2b99  00000000  00000000  0003740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9fa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000e9fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ec684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080033a0 	.word	0x080033a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080033a0 	.word	0x080033a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	4604      	mov	r4, r0
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4623      	mov	r3, r4
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	4603      	mov	r3, r0
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	460b      	mov	r3, r1
 80002d8:	717b      	strb	r3, [r7, #5]
 80002da:	4613      	mov	r3, r2
 80002dc:	807b      	strh	r3, [r7, #2]
    uint8_t   function_char;
    uint8_t   i,j;

    function_char = Character;
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	75fb      	strb	r3, [r7, #23]

    if (function_char < ' ') {
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	2b1f      	cmp	r3, #31
 80002e6:	d802      	bhi.n	80002ee <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	e002      	b.n	80002f4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80002ee:	7dfb      	ldrb	r3, [r7, #23]
 80002f0:	3b20      	subs	r3, #32
 80002f2:	75fb      	strb	r3, [r7, #23]
    }

    char temp[CHAR_WIDTH];
    for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	753b      	strb	r3, [r7, #20]
 80002f8:	e012      	b.n	8000320 <ILI9341_Draw_Char+0x60>
    {
    temp[k] = font[function_char][k];
 80002fa:	7dfa      	ldrb	r2, [r7, #23]
 80002fc:	7d38      	ldrb	r0, [r7, #20]
 80002fe:	7d39      	ldrb	r1, [r7, #20]
 8000300:	4c3b      	ldr	r4, [pc, #236]	@ (80003f0 <ILI9341_Draw_Char+0x130>)
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	4423      	add	r3, r4
 800030c:	4403      	add	r3, r0
 800030e:	781a      	ldrb	r2, [r3, #0]
 8000310:	f101 0318 	add.w	r3, r1, #24
 8000314:	443b      	add	r3, r7
 8000316:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800031a:	7d3b      	ldrb	r3, [r7, #20]
 800031c:	3301      	adds	r3, #1
 800031e:	753b      	strb	r3, [r7, #20]
 8000320:	7d3b      	ldrb	r3, [r7, #20]
 8000322:	2b05      	cmp	r3, #5
 8000324:	d9e9      	bls.n	80002fa <ILI9341_Draw_Char+0x3a>
    }

    // Draw pixels
    ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	b298      	uxth	r0, r3
 800032a:	797b      	ldrb	r3, [r7, #5]
 800032c:	b299      	uxth	r1, r3
 800032e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000330:	461a      	mov	r2, r3
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	4413      	add	r3, r2
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	b29a      	uxth	r2, r3
 800033a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	b29c      	uxth	r4, r3
 8000340:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4623      	mov	r3, r4
 8000346:	f000 fc5d 	bl	8000c04 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800034a:	2300      	movs	r3, #0
 800034c:	757b      	strb	r3, [r7, #21]
 800034e:	e047      	b.n	80003e0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	75bb      	strb	r3, [r7, #22]
 8000354:	e03e      	b.n	80003d4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {
 8000356:	7d7b      	ldrb	r3, [r7, #21]
 8000358:	3318      	adds	r3, #24
 800035a:	443b      	add	r3, r7
 800035c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000360:	461a      	mov	r2, r3
 8000362:	7dbb      	ldrb	r3, [r7, #22]
 8000364:	fa42 f303 	asr.w	r3, r2, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d02e      	beq.n	80003ce <ILI9341_Draw_Char+0x10e>
              if(Size == 1)
 8000370:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000372:	2b01      	cmp	r3, #1
 8000374:	d110      	bne.n	8000398 <ILI9341_Draw_Char+0xd8>
              {
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	b29a      	uxth	r2, r3
 800037a:	7d7b      	ldrb	r3, [r7, #21]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4413      	add	r3, r2
 8000380:	b298      	uxth	r0, r3
 8000382:	797b      	ldrb	r3, [r7, #5]
 8000384:	b29a      	uxth	r2, r3
 8000386:	7dbb      	ldrb	r3, [r7, #22]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4413      	add	r3, r2
 800038c:	b29b      	uxth	r3, r3
 800038e:	887a      	ldrh	r2, [r7, #2]
 8000390:	4619      	mov	r1, r3
 8000392:	f000 fb4d 	bl	8000a30 <ILI9341_Draw_Pixel>
 8000396:	e01a      	b.n	80003ce <ILI9341_Draw_Char+0x10e>
              }
              else
              {
              ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	b29a      	uxth	r2, r3
 800039c:	7d7b      	ldrb	r3, [r7, #21]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80003a2:	fb11 f303 	smulbb	r3, r1, r3
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	4413      	add	r3, r2
 80003aa:	b298      	uxth	r0, r3
 80003ac:	797b      	ldrb	r3, [r7, #5]
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	7dbb      	ldrb	r3, [r7, #22]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80003b6:	fb11 f303 	smulbb	r3, r1, r3
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	4413      	add	r3, r2
 80003be:	b299      	uxth	r1, r3
 80003c0:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 80003c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80003c4:	887b      	ldrh	r3, [r7, #2]
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	4623      	mov	r3, r4
 80003ca:	f000 fc1b 	bl	8000c04 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80003ce:	7dbb      	ldrb	r3, [r7, #22]
 80003d0:	3301      	adds	r3, #1
 80003d2:	75bb      	strb	r3, [r7, #22]
 80003d4:	7dbb      	ldrb	r3, [r7, #22]
 80003d6:	2b07      	cmp	r3, #7
 80003d8:	d9bd      	bls.n	8000356 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80003da:	7d7b      	ldrb	r3, [r7, #21]
 80003dc:	3301      	adds	r3, #1
 80003de:	757b      	strb	r3, [r7, #21]
 80003e0:	7d7b      	ldrb	r3, [r7, #21]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d9b4      	bls.n	8000350 <ILI9341_Draw_Char+0x90>
              }
            }
        }
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	371c      	adds	r7, #28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd90      	pop	{r4, r7, pc}
 80003f0:	08003444 	.word	0x08003444

080003f4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af02      	add	r7, sp, #8
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	4608      	mov	r0, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	4603      	mov	r3, r0
 8000404:	70fb      	strb	r3, [r7, #3]
 8000406:	460b      	mov	r3, r1
 8000408:	70bb      	strb	r3, [r7, #2]
 800040a:	4613      	mov	r3, r2
 800040c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800040e:	e017      	b.n	8000440 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	7818      	ldrb	r0, [r3, #0]
 8000418:	883c      	ldrh	r4, [r7, #0]
 800041a:	78ba      	ldrb	r2, [r7, #2]
 800041c:	78f9      	ldrb	r1, [r7, #3]
 800041e:	8bbb      	ldrh	r3, [r7, #28]
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	8b3b      	ldrh	r3, [r7, #24]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	4623      	mov	r3, r4
 8000428:	f7ff ff4a 	bl	80002c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800042c:	8b3b      	ldrh	r3, [r7, #24]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	4413      	add	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	4413      	add	r3, r2
 800043e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1e3      	bne.n	8000410 <ILI9341_Draw_Text+0x1c>
    }
}
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bd90      	pop	{r4, r7, pc}
	...

08000454 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET); //CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800045e:	1df9      	adds	r1, r7, #7
 8000460:	2301      	movs	r3, #1
 8000462:	2201      	movs	r2, #1
 8000464:	4803      	ldr	r0, [pc, #12]	@ (8000474 <ILI9341_SPI_Send+0x20>)
 8000466:	f002 f820 	bl	80024aa <HAL_SPI_Transmit>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000007c 	.word	0x2000007c

08000478 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048c:	f001 f9a0 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049a:	f001 f999 	bl	80017d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffd7 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f001 f98e 	bl	80017d0 <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 f97e 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 f977 	bl	80017d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffb5 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f4:	f001 f96c 	bl	80017d0 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	4603      	mov	r3, r0
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	807b      	strh	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800051e:	202a      	movs	r0, #42	@ 0x2a
 8000520:	f7ff ffaa 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	0a1b      	lsrs	r3, r3, #8
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffc5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffc0 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffb9 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ffb4 	bl	80004bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000554:	202b      	movs	r0, #43	@ 0x2b
 8000556:	f7ff ff8f 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffaa 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000568:	88bb      	ldrh	r3, [r7, #4]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffa5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff9e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000580:	883b      	ldrh	r3, [r7, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff99 	bl	80004bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800058a:	202c      	movs	r0, #44	@ 0x2c
 800058c:	f7ff ff74 	bl	8000478 <ILI9341_Write_Command>
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <ILI9341_Reset+0x38>)
 80005a2:	f001 f915 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005a6:	20c8      	movs	r0, #200	@ 0xc8
 80005a8:	f000 fe8a 	bl	80012c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b6:	f001 f90b 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005ba:	20c8      	movs	r0, #200	@ 0xc8
 80005bc:	f000 fe80 	bl	80012c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <ILI9341_Reset+0x38>)
 80005c6:	f001 f903 	bl	80017d0 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000400 	.word	0x48000400

080005d4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = Rotation;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80005e2:	2036      	movs	r0, #54	@ 0x36
 80005e4:	f7ff ff48 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fe69 	bl	80012c0 <HAL_Delay>

switch(screen_rotation)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d837      	bhi.n	8000664 <ILI9341_Set_Rotation+0x90>
 80005f4:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <ILI9341_Set_Rotation+0x28>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	08000623 	.word	0x08000623
 8000604:	08000639 	.word	0x08000639
 8000608:	0800064f 	.word	0x0800064f
  {
    case SCREEN_VERTICAL_1:
      ILI9341_Write_Data(0x40|0x08);
 800060c:	2048      	movs	r0, #72	@ 0x48
 800060e:	f7ff ff55 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH = 240;
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000614:	22f0      	movs	r2, #240	@ 0xf0
 8000616:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 800061a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800061e:	801a      	strh	r2, [r3, #0]
      break;
 8000620:	e021      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_1:
      ILI9341_Write_Data(0x20|0x08);
 8000622:	2028      	movs	r0, #40	@ 0x28
 8000624:	f7ff ff4a 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 800062a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800062e:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 8000632:	22f0      	movs	r2, #240	@ 0xf0
 8000634:	801a      	strh	r2, [r3, #0]
      break;
 8000636:	e016      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_VERTICAL_2:
      ILI9341_Write_Data(0x80|0x08);
 8000638:	2088      	movs	r0, #136	@ 0x88
 800063a:	f7ff ff3f 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 240;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000640:	22f0      	movs	r2, #240	@ 0xf0
 8000642:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 8000646:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800064a:	801a      	strh	r2, [r3, #0]
      break;
 800064c:	e00b      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_2:
      ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800064e:	20e8      	movs	r0, #232	@ 0xe8
 8000650:	f7ff ff34 	bl	80004bc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ILI9341_Set_Rotation+0x9c>)
 8000656:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800065a:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <ILI9341_Set_Rotation+0xa0>)
 800065e:	22f0      	movs	r2, #240	@ 0xf0
 8000660:	801a      	strh	r2, [r3, #0]
      break;
 8000662:	e000      	b.n	8000666 <ILI9341_Set_Rotation+0x92>
    default:
      //EXIT IF SCREEN ROTATION NOT VALID!
      break;
 8000664:	bf00      	nop
  }
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000002 	.word	0x20000002
 8000674:	20000000 	.word	0x20000000

08000678 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2102      	movs	r1, #2
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <ILI9341_Enable+0x14>)
 8000682:	f001 f8a5 	bl	80017d0 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	48000400 	.word	0x48000400

08000690 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000694:	f7ff fff0 	bl	8000678 <ILI9341_Enable>
//ILI9341_SPI_Init();
ILI9341_Reset();
 8000698:	f7ff ff7e 	bl	8000598 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff feeb 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f000 fe0b 	bl	80012c0 <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80006aa:	20cb      	movs	r0, #203	@ 0xcb
 80006ac:	f7ff fee4 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80006b0:	2039      	movs	r0, #57	@ 0x39
 80006b2:	f7ff ff03 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80006b6:	202c      	movs	r0, #44	@ 0x2c
 80006b8:	f7ff ff00 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fefd 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80006c2:	2034      	movs	r0, #52	@ 0x34
 80006c4:	f7ff fefa 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fef7 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80006ce:	20cf      	movs	r0, #207	@ 0xcf
 80006d0:	f7ff fed2 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fef1 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80006da:	20c1      	movs	r0, #193	@ 0xc1
 80006dc:	f7ff feee 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80006e0:	2030      	movs	r0, #48	@ 0x30
 80006e2:	f7ff feeb 	bl	80004bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80006e6:	20e8      	movs	r0, #232	@ 0xe8
 80006e8:	f7ff fec6 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80006ec:	2085      	movs	r0, #133	@ 0x85
 80006ee:	f7ff fee5 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fee2 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80006f8:	2078      	movs	r0, #120	@ 0x78
 80006fa:	f7ff fedf 	bl	80004bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80006fe:	20ea      	movs	r0, #234	@ 0xea
 8000700:	f7ff feba 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fed9 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fed6 	bl	80004bc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000710:	20ed      	movs	r0, #237	@ 0xed
 8000712:	f7ff feb1 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f7ff fed0 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800071c:	2003      	movs	r0, #3
 800071e:	f7ff fecd 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000722:	2012      	movs	r0, #18
 8000724:	f7ff feca 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000728:	2081      	movs	r0, #129	@ 0x81
 800072a:	f7ff fec7 	bl	80004bc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800072e:	20f7      	movs	r0, #247	@ 0xf7
 8000730:	f7ff fea2 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000734:	2020      	movs	r0, #32
 8000736:	f7ff fec1 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800073a:	20c0      	movs	r0, #192	@ 0xc0
 800073c:	f7ff fe9c 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000740:	2023      	movs	r0, #35	@ 0x23
 8000742:	f7ff febb 	bl	80004bc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000746:	20c1      	movs	r0, #193	@ 0xc1
 8000748:	f7ff fe96 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800074c:	2010      	movs	r0, #16
 800074e:	f7ff feb5 	bl	80004bc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000752:	20c5      	movs	r0, #197	@ 0xc5
 8000754:	f7ff fe90 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000758:	203e      	movs	r0, #62	@ 0x3e
 800075a:	f7ff feaf 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800075e:	2028      	movs	r0, #40	@ 0x28
 8000760:	f7ff feac 	bl	80004bc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000764:	20c7      	movs	r0, #199	@ 0xc7
 8000766:	f7ff fe87 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800076a:	2086      	movs	r0, #134	@ 0x86
 800076c:	f7ff fea6 	bl	80004bc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000770:	2036      	movs	r0, #54	@ 0x36
 8000772:	f7ff fe81 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000776:	2048      	movs	r0, #72	@ 0x48
 8000778:	f7ff fea0 	bl	80004bc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800077c:	203a      	movs	r0, #58	@ 0x3a
 800077e:	f7ff fe7b 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000782:	2055      	movs	r0, #85	@ 0x55
 8000784:	f7ff fe9a 	bl	80004bc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000788:	20b1      	movs	r0, #177	@ 0xb1
 800078a:	f7ff fe75 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fe94 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000794:	2018      	movs	r0, #24
 8000796:	f7ff fe91 	bl	80004bc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800079a:	20b6      	movs	r0, #182	@ 0xb6
 800079c:	f7ff fe6c 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80007a0:	2008      	movs	r0, #8
 80007a2:	f7ff fe8b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80007a6:	2082      	movs	r0, #130	@ 0x82
 80007a8:	f7ff fe88 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80007ac:	2027      	movs	r0, #39	@ 0x27
 80007ae:	f7ff fe85 	bl	80004bc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80007b2:	20f2      	movs	r0, #242	@ 0xf2
 80007b4:	f7ff fe60 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fe7f 	bl	80004bc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80007be:	2026      	movs	r0, #38	@ 0x26
 80007c0:	f7ff fe5a 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fe79 	bl	80004bc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80007ca:	20e0      	movs	r0, #224	@ 0xe0
 80007cc:	f7ff fe54 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80007d0:	200f      	movs	r0, #15
 80007d2:	f7ff fe73 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80007d6:	2031      	movs	r0, #49	@ 0x31
 80007d8:	f7ff fe70 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80007dc:	202b      	movs	r0, #43	@ 0x2b
 80007de:	f7ff fe6d 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80007e2:	200c      	movs	r0, #12
 80007e4:	f7ff fe6a 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80007e8:	200e      	movs	r0, #14
 80007ea:	f7ff fe67 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80007ee:	2008      	movs	r0, #8
 80007f0:	f7ff fe64 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80007f4:	204e      	movs	r0, #78	@ 0x4e
 80007f6:	f7ff fe61 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80007fa:	20f1      	movs	r0, #241	@ 0xf1
 80007fc:	f7ff fe5e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000800:	2037      	movs	r0, #55	@ 0x37
 8000802:	f7ff fe5b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000806:	2007      	movs	r0, #7
 8000808:	f7ff fe58 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800080c:	2010      	movs	r0, #16
 800080e:	f7ff fe55 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff fe52 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000818:	200e      	movs	r0, #14
 800081a:	f7ff fe4f 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800081e:	2009      	movs	r0, #9
 8000820:	f7ff fe4c 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fe49 	bl	80004bc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800082a:	20e1      	movs	r0, #225	@ 0xe1
 800082c:	f7ff fe24 	bl	8000478 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fe43 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000836:	200e      	movs	r0, #14
 8000838:	f7ff fe40 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800083c:	2014      	movs	r0, #20
 800083e:	f7ff fe3d 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000842:	2003      	movs	r0, #3
 8000844:	f7ff fe3a 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000848:	2011      	movs	r0, #17
 800084a:	f7ff fe37 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800084e:	2007      	movs	r0, #7
 8000850:	f7ff fe34 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000854:	2031      	movs	r0, #49	@ 0x31
 8000856:	f7ff fe31 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800085a:	20c1      	movs	r0, #193	@ 0xc1
 800085c:	f7ff fe2e 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000860:	2048      	movs	r0, #72	@ 0x48
 8000862:	f7ff fe2b 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fe28 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800086c:	200f      	movs	r0, #15
 800086e:	f7ff fe25 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff fe22 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000878:	2031      	movs	r0, #49	@ 0x31
 800087a:	f7ff fe1f 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800087e:	2036      	movs	r0, #54	@ 0x36
 8000880:	f7ff fe1c 	bl	80004bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000884:	200f      	movs	r0, #15
 8000886:	f7ff fe19 	bl	80004bc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800088a:	2011      	movs	r0, #17
 800088c:	f7ff fdf4 	bl	8000478 <ILI9341_Write_Command>
HAL_Delay(120);
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f000 fd15 	bl	80012c0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000896:	2029      	movs	r0, #41	@ 0x29
 8000898:	f7ff fdee 	bl	8000478 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe99 	bl	80005d4 <ILI9341_Set_Rotation>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80008a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008ac:	b08d      	sub	sp, #52	@ 0x34
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	466b      	mov	r3, sp
 80008b8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008c6:	d202      	bcs.n	80008ce <ILI9341_Draw_Colour_Burst+0x26>
{
  Buffer_Size = Size;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008cc:	e002      	b.n	80008d4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
  Buffer_Size = BURST_MAX_SIZE;
 80008ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f000 ff77 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f000 ff70 	bl	80017d0 <HAL_GPIO_WritePin>

unsigned char chifted =   Colour>>8;;
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80008fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008fc:	460b      	mov	r3, r1
 80008fe:	3b01      	subs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	2300      	movs	r3, #0
 8000904:	4688      	mov	r8, r1
 8000906:	4699      	mov	r9, r3
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800091c:	2300      	movs	r3, #0
 800091e:	460c      	mov	r4, r1
 8000920:	461d      	mov	r5, r3
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	f04f 0300 	mov.w	r3, #0
 800092a:	00eb      	lsls	r3, r5, #3
 800092c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000930:	00e2      	lsls	r2, r4, #3
 8000932:	1dcb      	adds	r3, r1, #7
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	ebad 0d03 	sub.w	sp, sp, r3
 800093c:	466b      	mov	r3, sp
 800093e:	3300      	adds	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000946:	e00e      	b.n	8000966 <ILI9341_Draw_Colour_Burst+0xbe>
  {
    burst_buffer[j] =   chifted;
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	4413      	add	r3, r2
 800094e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000952:	701a      	strb	r2, [r3, #0]
    burst_buffer[j+1] = Colour;
 8000954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000956:	3301      	adds	r3, #1
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	b2d1      	uxtb	r1, r2
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000962:	3302      	adds	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	429a      	cmp	r2, r3
 800096c:	d3ec      	bcc.n	8000948 <ILI9341_Draw_Colour_Burst+0xa0>
  }

uint32_t Sending_Size = Size*2;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000978:	fbb2 f3f3 	udiv	r3, r2, r3
 800097c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000982:	fbb3 f2f2 	udiv	r2, r3, r2
 8000986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000988:	fb01 f202 	mul.w	r2, r1, r2
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d010      	beq.n	80009b8 <ILI9341_Draw_Colour_Burst+0x110>
{
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
 800099a:	e009      	b.n	80009b0 <ILI9341_Draw_Colour_Burst+0x108>
    {
    HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 800099c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099e:	b29a      	uxth	r2, r3
 80009a0:	230a      	movs	r3, #10
 80009a2:	69b9      	ldr	r1, [r7, #24]
 80009a4:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80009a6:	f001 fd80 	bl	80024aa <HAL_SPI_Transmit>
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ac:	3301      	adds	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3f1      	bcc.n	800099c <ILI9341_Draw_Colour_Burst+0xf4>
    }
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	230a      	movs	r3, #10
 80009be:	69b9      	ldr	r1, [r7, #24]
 80009c0:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80009c2:	f001 fd72 	bl	80024aa <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f000 fefe 	bl	80017d0 <HAL_GPIO_WritePin>
 80009d4:	46b5      	mov	sp, r6
}
 80009d6:	bf00      	nop
 80009d8:	3734      	adds	r7, #52	@ 0x34
 80009da:	46bd      	mov	sp, r7
 80009dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009e0:	2000007c 	.word	0x2000007c

080009e4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <ILI9341_Fill_Screen+0x44>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <ILI9341_Fill_Screen+0x48>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fd7f 	bl	8000500 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <ILI9341_Fill_Screen+0x44>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <ILI9341_Fill_Screen+0x48>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	fb02 f303 	mul.w	r3, r2, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff44 	bl	80008a8 <ILI9341_Draw_Colour_Burst>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000002 	.word	0x20000002
 8000a2c:	20000000 	.word	0x20000000

08000a30 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	80bb      	strh	r3, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000a42:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <ILI9341_Draw_Pixel+0x1c8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	88fa      	ldrh	r2, [r7, #6]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f080 80d0 	bcs.w	8000bf0 <ILI9341_Draw_Pixel+0x1c0>
 8000a50:	4b6a      	ldr	r3, [pc, #424]	@ (8000bfc <ILI9341_Draw_Pixel+0x1cc>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	88ba      	ldrh	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f080 80c9 	bcs.w	8000bf0 <ILI9341_Draw_Pixel+0x1c0>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a68:	f000 feb2 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f000 feab 	bl	80017d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000a7a:	202a      	movs	r0, #42	@ 0x2a
 8000a7c:	f7ff fcea 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f000 fea1 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f000 fe9a 	bl	80017d0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f000 fe93 	bl	80017d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	753b      	strb	r3, [r7, #20]
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	757b      	strb	r3, [r7, #21]
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	3301      	adds	r3, #1
 8000abe:	121b      	asrs	r3, r3, #8
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	75bb      	strb	r3, [r7, #22]
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000ace:	f107 0114 	add.w	r1, r7, #20
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	484a      	ldr	r0, [pc, #296]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000ad8:	f001 fce7 	bl	80024aa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f000 fe73 	bl	80017d0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fe6c 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f000 fe65 	bl	80017d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000b06:	202b      	movs	r0, #43	@ 0x2b
 8000b08:	f7ff fca4 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f000 fe5b 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b24:	f000 fe54 	bl	80017d0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f000 fe4d 	bl	80017d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	743b      	strb	r3, [r7, #16]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	747b      	strb	r3, [r7, #17]
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	121b      	asrs	r3, r3, #8
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	74bb      	strb	r3, [r7, #18]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000b5a:	f107 0110 	add.w	r1, r7, #16
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2204      	movs	r2, #4
 8000b62:	4827      	ldr	r0, [pc, #156]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000b64:	f001 fca1 	bl	80024aa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f000 fe2d 	bl	80017d0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f000 fe26 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f000 fe1f 	bl	80017d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000b92:	202c      	movs	r0, #44	@ 0x2c
 8000b94:	f7ff fc5e 	bl	8000454 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f000 fe15 	bl	80017d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f000 fe0e 	bl	80017d0 <HAL_GPIO_WritePin>

//COLOUR
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f000 fe07 	bl	80017d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	733b      	strb	r3, [r7, #12]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000bd2:	f107 010c 	add.w	r1, r7, #12
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <ILI9341_Draw_Pixel+0x1d0>)
 8000bdc:	f001 fc65 	bl	80024aa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f000 fdf1 	bl	80017d0 <HAL_GPIO_WritePin>
 8000bee:	e000      	b.n	8000bf2 <ILI9341_Draw_Pixel+0x1c2>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000bf0:	bf00      	nop

}
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000002 	.word	0x20000002
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	2000007c 	.word	0x2000007c

08000c04 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	4603      	mov	r3, r0
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d23d      	bcs.n	8000caa <ILI9341_Draw_Rectangle+0xa6>
 8000c2e:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d237      	bcs.n	8000caa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000c3a:	88fa      	ldrh	r2, [r7, #6]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c42:	8812      	ldrh	r2, [r2, #0]
 8000c44:	b292      	uxth	r2, r2
 8000c46:	4293      	cmp	r3, r2
 8000c48:	dd05      	ble.n	8000c56 <ILI9341_Draw_Rectangle+0x52>
  {
    Width=LCD_WIDTH-X;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <ILI9341_Draw_Rectangle+0xb0>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	807b      	strh	r3, [r7, #2]
  }
if((Y+Height-1)>=LCD_HEIGHT)
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	883b      	ldrh	r3, [r7, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	b292      	uxth	r2, r2
 8000c62:	4293      	cmp	r3, r2
 8000c64:	dd05      	ble.n	8000c72 <ILI9341_Draw_Rectangle+0x6e>
  {
    Height=LCD_HEIGHT-Y;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <ILI9341_Draw_Rectangle+0xb4>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	803b      	strh	r3, [r7, #0]
  }
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29c      	uxth	r4, r3
 8000c7e:	88ba      	ldrh	r2, [r7, #4]
 8000c80:	883b      	ldrh	r3, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	88b9      	ldrh	r1, [r7, #4]
 8000c8c:	88f8      	ldrh	r0, [r7, #6]
 8000c8e:	4622      	mov	r2, r4
 8000c90:	f7ff fc36 	bl	8000500 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe00 	bl	80008a8 <ILI9341_Draw_Colour_Burst>
 8000ca8:	e000      	b.n	8000cac <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000caa:	bf00      	nop
}
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000002 	.word	0x20000002
 8000cb8:	20000000 	.word	0x20000000

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a29      	ldr	r2, [pc, #164]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000d20:	4817      	ldr	r0, [pc, #92]	@ (8000d80 <MX_GPIO_Init+0xc4>)
 8000d22:	f000 fd55 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f000 fd4e 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000d34:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <MX_GPIO_Init+0xc4>)
 8000d4e:	f000 fbbd 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f000 fbad 	bl	80014cc <HAL_GPIO_Init>

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	@ 0x70
 8000d88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f000 fa28 	bl	80011de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f88f 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f7ff ff93 	bl	8000cbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d96:	f000 f8dd 	bl	8000f54 <MX_SPI1_Init>

   ST7789_FillScreen(COLOR_BLACK);
   ST7789_FillRect(10, 10, 100, 60, COLOR_YELLOW);
   ST7789_DrawRect(8, 8, 104, 64, COLOR_WHITE);
   ST7789_DrawPixel(120, 120, COLOR_CYAN);*/
   ILI9341_Init();
 8000d9a:	f7ff fc79 	bl	8000690 <ILI9341_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    ILI9341_Fill_Screen(WHITE);
 8000d9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000da2:	f7ff fe1f 	bl	80009e4 <ILI9341_Fill_Screen>
        ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000da6:	2003      	movs	r0, #3
 8000da8:	f7ff fc14 	bl	80005d4 <ILI9341_Set_Rotation>
        ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8000dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	220a      	movs	r2, #10
 8000dba:	210a      	movs	r1, #10
 8000dbc:	4835      	ldr	r0, [pc, #212]	@ (8000e94 <main+0x110>)
 8000dbe:	f7ff fb19 	bl	80003f4 <ILI9341_Draw_Text>
        ILI9341_Draw_Text("ILI9341 TFT TEST", 10, 30, RED, 2, WHITE);
 8000dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	2302      	movs	r3, #2
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dd0:	221e      	movs	r2, #30
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	4830      	ldr	r0, [pc, #192]	@ (8000e98 <main+0x114>)
 8000dd6:	f7ff fb0d 	bl	80003f4 <ILI9341_Draw_Text>
        ILI9341_Draw_Text("It is first Test!!", 10, 50, BLUE, 2, WHITE);
 8000dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2302      	movs	r3, #2
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	231f      	movs	r3, #31
 8000de6:	2232      	movs	r2, #50	@ 0x32
 8000de8:	210a      	movs	r1, #10
 8000dea:	482c      	ldr	r0, [pc, #176]	@ (8000e9c <main+0x118>)
 8000dec:	f7ff fb02 	bl	80003f4 <ILI9341_Draw_Text>
        ILI9341_Draw_Text("It is second Test!!", 10, 70, ORANGE, 2, WHITE);
 8000df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	2302      	movs	r3, #2
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000dfe:	2246      	movs	r2, #70	@ 0x46
 8000e00:	210a      	movs	r1, #10
 8000e02:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <main+0x11c>)
 8000e04:	f7ff faf6 	bl	80003f4 <ILI9341_Draw_Text>
        ILI9341_Draw_Text("It is three Test!!", 10, 90, PINK, 2, WHITE);
 8000e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000e16:	225a      	movs	r2, #90	@ 0x5a
 8000e18:	210a      	movs	r1, #10
 8000e1a:	4822      	ldr	r0, [pc, #136]	@ (8000ea4 <main+0x120>)
 8000e1c:	f7ff faea 	bl	80003f4 <ILI9341_Draw_Text>
        ILI9341_Draw_Text("It is four Test!!", 10, 110, NAVY, 2, WHITE);
 8000e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	2302      	movs	r3, #2
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	226e      	movs	r2, #110	@ 0x6e
 8000e2e:	210a      	movs	r1, #10
 8000e30:	481d      	ldr	r0, [pc, #116]	@ (8000ea8 <main+0x124>)
 8000e32:	f7ff fadf 	bl	80003f4 <ILI9341_Draw_Text>
        HAL_Delay(10000);
 8000e36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e3a:	f000 fa41 	bl	80012c0 <HAL_Delay>
        ILI9341_Fill_Screen(WHITE);
 8000e3e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000e42:	f7ff fdcf 	bl	80009e4 <ILI9341_Fill_Screen>

        for(uint16_t i = 0; i <= 100; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8000e4c:	e019      	b.n	8000e82 <main+0xfe>
        {
        sprintf(ch, "Counting: %d", i);
 8000e4e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8000e52:	463b      	mov	r3, r7
 8000e54:	4915      	ldr	r1, [pc, #84]	@ (8000eac <main+0x128>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fe02 	bl	8002a60 <siprintf>
        ILI9341_Draw_Text(ch, 10, 10, BLACK, 3, WHITE);
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2303      	movs	r3, #3
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	210a      	movs	r1, #10
 8000e6e:	f7ff fac1 	bl	80003f4 <ILI9341_Draw_Text>
        HAL_Delay(100);
 8000e72:	2064      	movs	r0, #100	@ 0x64
 8000e74:	f000 fa24 	bl	80012c0 <HAL_Delay>
        for(uint16_t i = 0; i <= 100; i++)
 8000e78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8000e82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000e86:	2b64      	cmp	r3, #100	@ 0x64
 8000e88:	d9e1      	bls.n	8000e4e <main+0xca>
        }

        HAL_Delay(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8e:	f000 fa17 	bl	80012c0 <HAL_Delay>
    ILI9341_Fill_Screen(WHITE);
 8000e92:	e784      	b.n	8000d9e <main+0x1a>
 8000e94:	080033b8 	.word	0x080033b8
 8000e98:	080033d0 	.word	0x080033d0
 8000e9c:	080033e4 	.word	0x080033e4
 8000ea0:	080033f8 	.word	0x080033f8
 8000ea4:	0800340c 	.word	0x0800340c
 8000ea8:	08003420 	.word	0x08003420
 8000eac:	08003434 	.word	0x08003434

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	@ 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2238      	movs	r2, #56	@ 0x38
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fdee 	bl	8002aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 fc94 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2340      	movs	r3, #64	@ 0x40
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ef2:	2355      	movs	r3, #85	@ 0x55
 8000ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fd2e 	bl	8001968 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f12:	f000 f818 	bl	8000f46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f82c 	bl	8001f8c <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f3a:	f000 f804 	bl	8000f46 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	@ 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4a:	b672      	cpsid	i
}
 8000f4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4e:	bf00      	nop
 8000f50:	e7fd      	b.n	8000f4e <Error_Handler+0x8>
	...

08000f54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <MX_SPI1_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f6e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_SPI1_Init+0x74>)
 8000fb4:	f001 f9ce 	bl	8002354 <HAL_SPI_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f7ff ffc2 	bl	8000f46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000007c 	.word	0x2000007c
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_SPI_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d128      	bne.n	8001044 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	4a16      	ldr	r2, [pc, #88]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_SPI_MspInit+0x80>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001022:	23a0      	movs	r3, #160	@ 0xa0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001032:	2305      	movs	r3, #5
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f000 fa44 	bl	80014cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40013000 	.word	0x40013000
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	@ 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	@ 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108a:	f000 fc5d 	bl	8001948 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f8c7 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f001 fcc0 	bl	8002ab0 <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20008000 	.word	0x20008000
 800115c:	00000400 	.word	0x00000400
 8001160:	200000e0 	.word	0x200000e0
 8001164:	20000230 	.word	0x20000230

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff ffea 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopForever+0xe>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopForever+0x16>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fc7f 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011be:	f7ff fde1 	bl	8000d84 <main>

080011c2 <LoopForever>:

LoopForever:
    b LoopForever
 80011c2:	e7fe      	b.n	80011c2 <LoopForever>
  ldr   r0, =_estack
 80011c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011d0:	080036d8 	.word	0x080036d8
  ldr r2, =_sbss
 80011d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011d8:	20000230 	.word	0x20000230

080011dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_2_IRQHandler>

080011de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f93d 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f80e 	bl	8001210 <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e001      	b.n	8001204 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001200:	f7ff ff28 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001204:	79fb      	ldrb	r3, [r7, #7]

}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <HAL_InitTick+0x68>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d022      	beq.n	800126a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_InitTick+0x6c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <HAL_InitTick+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001230:	fbb1 f3f3 	udiv	r3, r1, r3
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f93a 	bl	80014b2 <HAL_SYSTICK_Config>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	d809      	bhi.n	800125e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124a:	2200      	movs	r2, #0
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	f04f 30ff 	mov.w	r0, #4294967295
 8001252:	f000 f914 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_InitTick+0x70>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e007      	b.n	800126e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e004      	b.n	800126e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000004 	.word	0x20000004
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4413      	add	r3, r2
 8001292:	4a03      	ldr	r2, [pc, #12]	@ (80012a0 <HAL_IncTick+0x1c>)
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200000e4 	.word	0x200000e4
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200000e4 	.word	0x200000e4

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d004      	beq.n	80012e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_Delay+0x40>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e4:	bf00      	nop
 80012e6:	f7ff ffdf 	bl	80012a8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d8f7      	bhi.n	80012e6 <HAL_Delay+0x26>
  {
  }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000000c 	.word	0x2000000c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	@ (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff47 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff5e 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffb2 	bl	8001424 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014da:	e15a      	b.n	8001792 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 814c 	beq.w	800178c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d005      	beq.n	800150c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001508:	2b02      	cmp	r3, #2
 800150a:	d130      	bne.n	800156e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001542:	2201      	movs	r2, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 0201 	and.w	r2, r3, #1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d123      	bne.n	80015fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0203 	and.w	r2, r3, #3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001640:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <HAL_GPIO_Init+0x2e4>)
 8001642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001644:	4a5a      	ldr	r2, [pc, #360]	@ (80017b0 <HAL_GPIO_Init+0x2e4>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6613      	str	r3, [r2, #96]	@ 0x60
 800164c:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <HAL_GPIO_Init+0x2e4>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001658:	4a56      	ldr	r2, [pc, #344]	@ (80017b4 <HAL_GPIO_Init+0x2e8>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001682:	d01f      	beq.n	80016c4 <HAL_GPIO_Init+0x1f8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <HAL_GPIO_Init+0x2ec>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x1f4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <HAL_GPIO_Init+0x2f0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1f0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4a      	ldr	r2, [pc, #296]	@ (80017c0 <HAL_GPIO_Init+0x2f4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a49      	ldr	r2, [pc, #292]	@ (80017c4 <HAL_GPIO_Init+0x2f8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a48      	ldr	r2, [pc, #288]	@ (80017c8 <HAL_GPIO_Init+0x2fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1e4>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e00a      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	@ (80017b4 <HAL_GPIO_Init+0x2e8>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e4:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <HAL_GPIO_Init+0x300>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001708:	4a30      	ldr	r2, [pc, #192]	@ (80017cc <HAL_GPIO_Init+0x300>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <HAL_GPIO_Init+0x300>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <HAL_GPIO_Init+0x300>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_GPIO_Init+0x300>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800175c:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <HAL_GPIO_Init+0x300>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_GPIO_Init+0x300>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001786:	4a11      	ldr	r2, [pc, #68]	@ (80017cc <HAL_GPIO_Init+0x300>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f ae9d 	bne.w	80014dc <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001000 	.word	0x48001000
 80017c8:	48001400 	.word	0x48001400
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d141      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800180e:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181a:	d131      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001822:	4a46      	ldr	r2, [pc, #280]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001834:	4a41      	ldr	r2, [pc, #260]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183c:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2232      	movs	r2, #50	@ 0x32
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a3f      	ldr	r2, [pc, #252]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	e002      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001866:	d102      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f2      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187a:	d158      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e057      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001886:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001890:	e04d      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001898:	d141      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800189a:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a6:	d131      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ae:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c0:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2232      	movs	r2, #50	@ 0x32
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018de:	e002      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d102      	bne.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d112      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e011      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800191c:	e007      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40007000 	.word	0x40007000
 8001940:	20000004 	.word	0x20000004
 8001944:	431bde83 	.word	0x431bde83

08001948 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001956:	6093      	str	r3, [r2, #8]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e2fe      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b97      	ldr	r3, [pc, #604]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001990:	4b94      	ldr	r3, [pc, #592]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3e>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b8d      	ldr	r3, [pc, #564]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e2d9      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a84      	ldr	r2, [pc, #528]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7f      	ldr	r3, [pc, #508]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7e      	ldr	r2, [pc, #504]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b7c      	ldr	r3, [pc, #496]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7b      	ldr	r2, [pc, #492]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a77      	ldr	r2, [pc, #476]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a74      	ldr	r2, [pc, #464]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc42 	bl	80012a8 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fc3e 	bl	80012a8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e29e      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc2e 	bl	80012a8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fc2a 	bl	80012a8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	@ 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e28a      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	4b60      	ldr	r3, [pc, #384]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d075      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a88:	4b56      	ldr	r3, [pc, #344]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x136>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x13c>
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d11f      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x154>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e25d      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4946      	ldr	r1, [pc, #280]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ad0:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb9b 	bl	8001210 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d043      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e249      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fbd6 	bl	80012a8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b00:	f7ff fbd2 	bl	80012a8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e232      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	492d      	ldr	r1, [pc, #180]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
 8001b32:	e01a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fbb2 	bl	80012a8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fbae 	bl	80012a8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20e      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e0>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d041      	beq.n	8001bfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb8b 	bl	80012a8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fb87 	bl	80012a8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1e7      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ef      	beq.n	8001b96 <HAL_RCC_OscConfig+0x22e>
 8001bb6:	e020      	b.n	8001bfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb6e 	bl	80012a8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bce:	e00d      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fb6a 	bl	80012a8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d906      	bls.n	8001bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1ca      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	4b8c      	ldr	r3, [pc, #560]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ea      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80a6 	beq.w	8001d54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c0c:	4b84      	ldr	r3, [pc, #528]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2b4>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x2b6>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b7f      	ldr	r3, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a7e      	ldr	r2, [pc, #504]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb27 	bl	80012a8 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fb23 	bl	80012a8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e183      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	4b6c      	ldr	r3, [pc, #432]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d108      	bne.n	8001c96 <HAL_RCC_OscConfig+0x32e>
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c94:	e024      	b.n	8001ce0 <HAL_RCC_OscConfig+0x378>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d110      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001c9e:	4b60      	ldr	r3, [pc, #384]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cae:	4b5c      	ldr	r3, [pc, #368]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x378>
 8001cc0:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc6:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd6:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d016      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fade 	bl	80012a8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fada 	bl	80012a8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e138      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ed      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x388>
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fac7 	bl	80012a8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fac3 	bl	80012a8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e121      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ed      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b35      	ldr	r3, [pc, #212]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	4a34      	ldr	r2, [pc, #208]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03c      	beq.n	8001dda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff fa96 	bl	80012a8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff fa92 	bl	80012a8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0f2      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ef      	beq.n	8001d80 <HAL_RCC_OscConfig+0x418>
 8001da0:	e01b      	b.n	8001dda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff fa79 	bl	80012a8 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dba:	f7ff fa75 	bl	80012a8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0d5      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ef      	bne.n	8001dba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80c9 	beq.w	8001f76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	f000 8083 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d15e      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fa4f 	bl	80012a8 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	e00c      	b.n	8001e28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fa4b 	bl	80012a8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d905      	bls.n	8001e28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0ab      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	4b55      	ldr	r3, [pc, #340]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ec      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e34:	4b52      	ldr	r3, [pc, #328]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b52      	ldr	r3, [pc, #328]	@ (8001f84 <HAL_RCC_OscConfig+0x61c>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6a11      	ldr	r1, [r2, #32]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e44:	3a01      	subs	r2, #1
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e4e:	0212      	lsls	r2, r2, #8
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e56:	0852      	lsrs	r2, r2, #1
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	0552      	lsls	r2, r2, #21
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e62:	0852      	lsrs	r2, r2, #1
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0652      	lsls	r2, r2, #25
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e6e:	06d2      	lsls	r2, r2, #27
 8001e70:	430a      	orrs	r2, r1
 8001e72:	4943      	ldr	r1, [pc, #268]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a3d      	ldr	r2, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa0a 	bl	80012a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fa06 	bl	80012a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e066      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x530>
 8001eb6:	e05e      	b.n	8001f76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f9f0 	bl	80012a8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f9ec 	bl	80012a8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e04c      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eea:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4924      	ldr	r1, [pc, #144]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60cb      	str	r3, [r1, #12]
 8001ef6:	e03e      	b.n	8001f76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e039      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d12c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d123      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d11b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d113      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	019f800c 	.word	0x019f800c
 8001f88:	feeefffc 	.word	0xfeeefffc

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e11e      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b91      	ldr	r3, [pc, #580]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	498c      	ldr	r1, [pc, #560]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b8a      	ldr	r3, [pc, #552]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e106      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d073      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d129      	bne.n	800203c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe8:	4b81      	ldr	r3, [pc, #516]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0f4      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ff8:	f000 f966 	bl	80022c8 <RCC_GetSysClockFreqFromPLLSource>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <HAL_RCC_ClockConfig+0x268>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d93f      	bls.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002006:	4b7a      	ldr	r3, [pc, #488]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d033      	beq.n	8002086 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d12f      	bne.n	8002086 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002026:	4b72      	ldr	r3, [pc, #456]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800202e:	4a70      	ldr	r2, [pc, #448]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002034:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e024      	b.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d107      	bne.n	8002054 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002044:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0c6      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0be      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002064:	f000 f8ce 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4a61      	ldr	r2, [pc, #388]	@ (80021f4 <HAL_RCC_ClockConfig+0x268>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d909      	bls.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002072:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800207a:	4a5d      	ldr	r2, [pc, #372]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 800207c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002080:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b5a      	ldr	r3, [pc, #360]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4957      	ldr	r1, [pc, #348]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f906 	bl	80012a8 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7ff f902 	bl	80012a8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e095      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a42      	ldr	r2, [pc, #264]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020f8:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002100:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4936      	ldr	r1, [pc, #216]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
 800211a:	e008      	b.n	800212e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b80      	cmp	r3, #128	@ 0x80
 8002120:	d105      	bne.n	800212e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a32      	ldr	r2, [pc, #200]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800212c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d21d      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 020f 	bic.w	r2, r3, #15
 8002144:	4929      	ldr	r1, [pc, #164]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800214c:	f7ff f8ac 	bl	80012a8 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff f8a8 	bl	80012a8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e03b      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d1ed      	bne.n	8002154 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4917      	ldr	r1, [pc, #92]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490f      	ldr	r1, [pc, #60]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b6:	f000 f825 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490c      	ldr	r1, [pc, #48]	@ (80021f8 <HAL_RCC_ClockConfig+0x26c>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_RCC_ClockConfig+0x270>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_RCC_ClockConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f818 	bl	8001210 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	04c4b400 	.word	0x04c4b400
 80021f8:	08003684 	.word	0x08003684
 80021fc:	20000004 	.word	0x20000004
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800220a:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d102      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e047      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800221c:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d102      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002228:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e03e      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800222e:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d136      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002262:	68d2      	ldr	r2, [r2, #12]
 8002264:	0a12      	lsrs	r2, r2, #8
 8002266:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
      break;
 8002270:	e00c      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	0a12      	lsrs	r2, r2, #8
 8002280:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0e5b      	lsrs	r3, r3, #25
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	3301      	adds	r3, #1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e001      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022ac:	693b      	ldr	r3, [r7, #16]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	007a1200 	.word	0x007a1200

080022c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d10c      	bne.n	8002306 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ec:	4a17      	ldr	r2, [pc, #92]	@ (800234c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f6:	68d2      	ldr	r2, [r2, #12]
 80022f8:	0a12      	lsrs	r2, r2, #8
 80022fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
    break;
 8002304:	e00c      	b.n	8002320 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	0a12      	lsrs	r2, r2, #8
 8002314:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    break;
 800231e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0e5b      	lsrs	r3, r3, #25
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800233a:	687b      	ldr	r3, [r7, #4]
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	00f42400 	.word	0x00f42400

08002354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e09d      	b.n	80024a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002376:	d009      	beq.n	800238c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	e005      	b.n	800238c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fe12 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023cc:	d902      	bls.n	80023d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e002      	b.n	80023da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_Init+0xa0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023ec:	d002      	beq.n	80023f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002436:	ea42 0103 	orr.w	r1, r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0204 	and.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002470:	ea42 0103 	orr.w	r1, r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ba:	f7fe fef5 	bl	80012a8 <HAL_GetTick>
 80024be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	e15c      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Transmit+0x36>
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e154      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_SPI_Transmit+0x48>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e14d      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002544:	d10f      	bne.n	8002566 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b40      	cmp	r3, #64	@ 0x40
 8002572:	d007      	beq.n	8002584 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800258c:	d952      	bls.n	8002634 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0xf2>
 8002596:	8b7b      	ldrh	r3, [r7, #26]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d145      	bne.n	8002628 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c0:	e032      	b.n	8002628 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d112      	bne.n	80025f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025f4:	e018      	b.n	8002628 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f6:	f7fe fe57 	bl	80012a8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d803      	bhi.n	800260e <HAL_SPI_Transmit+0x164>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d102      	bne.n	8002614 <HAL_SPI_Transmit+0x16a>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0b2      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1c7      	bne.n	80025c2 <HAL_SPI_Transmit+0x118>
 8002632:	e083      	b.n	800273c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_SPI_Transmit+0x198>
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d177      	bne.n	8002732 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d912      	bls.n	8002672 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b02      	subs	r3, #2
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002670:	e05f      	b.n	8002732 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002698:	e04b      	b.n	8002732 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d12b      	bne.n	8002700 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d912      	bls.n	80026d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b02      	subs	r3, #2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026d6:	e02c      	b.n	8002732 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026fe:	e018      	b.n	8002732 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002700:	f7fe fdd2 	bl	80012a8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d803      	bhi.n	8002718 <HAL_SPI_Transmit+0x26e>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d102      	bne.n	800271e <HAL_SPI_Transmit+0x274>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e02d      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ae      	bne.n	800269a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f947 	bl	80029d4 <SPI_EndRxTxTransaction>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800278c:	2300      	movs	r3, #0
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027a8:	f7fe fd7e 	bl	80012a8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027b8:	f7fe fd76 	bl	80012a8 <HAL_GetTick>
 80027bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027be:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	015b      	lsls	r3, r3, #5
 80027c4:	0d1b      	lsrs	r3, r3, #20
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ce:	e054      	b.n	800287a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d050      	beq.n	800287a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027d8:	f7fe fd66 	bl	80012a8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d902      	bls.n	80027ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13d      	bne.n	800286a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002806:	d111      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002810:	d004      	beq.n	800281c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	d107      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002834:	d10f      	bne.n	8002856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e017      	b.n	800289a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3b01      	subs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d19b      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000004 	.word	0x20000004

080028a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028ba:	f7fe fcf5 	bl	80012a8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028ca:	f7fe fced 	bl	80012a8 <HAL_GetTick>
 80028ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028d8:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	0d1b      	lsrs	r3, r3, #20
 80028e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028f0:	e060      	b.n	80029b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028f8:	d107      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d050      	beq.n	80029b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002912:	f7fe fcc9 	bl	80012a8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291e:	429a      	cmp	r2, r3
 8002920:	d902      	bls.n	8002928 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d13d      	bne.n	80029a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002940:	d111      	bne.n	8002966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800294a:	d004      	beq.n	8002956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002954:	d107      	bne.n	8002966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296e:	d10f      	bne.n	8002990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800298e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e010      	b.n	80029c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d196      	bne.n	80028f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000004 	.word	0x20000004

080029d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff ff5b 	bl	80028a8 <SPI_WaitFifoStateUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e027      	b.n	8002a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fec0 	bl	8002798 <SPI_WaitFlagStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e014      	b.n	8002a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ff34 	bl	80028a8 <SPI_WaitFifoStateUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e000      	b.n	8002a58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <siprintf>:
 8002a60:	b40e      	push	{r1, r2, r3}
 8002a62:	b500      	push	{lr}
 8002a64:	b09c      	sub	sp, #112	@ 0x70
 8002a66:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a68:	9002      	str	r0, [sp, #8]
 8002a6a:	9006      	str	r0, [sp, #24]
 8002a6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a70:	4809      	ldr	r0, [pc, #36]	@ (8002a98 <siprintf+0x38>)
 8002a72:	9107      	str	r1, [sp, #28]
 8002a74:	9104      	str	r1, [sp, #16]
 8002a76:	4909      	ldr	r1, [pc, #36]	@ (8002a9c <siprintf+0x3c>)
 8002a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a7c:	9105      	str	r1, [sp, #20]
 8002a7e:	6800      	ldr	r0, [r0, #0]
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	a902      	add	r1, sp, #8
 8002a84:	f000 f994 	bl	8002db0 <_svfiprintf_r>
 8002a88:	9b02      	ldr	r3, [sp, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	b01c      	add	sp, #112	@ 0x70
 8002a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a94:	b003      	add	sp, #12
 8002a96:	4770      	bx	lr
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	ffff0208 	.word	0xffff0208

08002aa0 <memset>:
 8002aa0:	4402      	add	r2, r0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <memset+0xa>
 8002aa8:	4770      	bx	lr
 8002aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002aae:	e7f9      	b.n	8002aa4 <memset+0x4>

08002ab0 <__errno>:
 8002ab0:	4b01      	ldr	r3, [pc, #4]	@ (8002ab8 <__errno+0x8>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000010 	.word	0x20000010

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4d0d      	ldr	r5, [pc, #52]	@ (8002af4 <__libc_init_array+0x38>)
 8002ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8002af8 <__libc_init_array+0x3c>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	4d0b      	ldr	r5, [pc, #44]	@ (8002afc <__libc_init_array+0x40>)
 8002ace:	4c0c      	ldr	r4, [pc, #48]	@ (8002b00 <__libc_init_array+0x44>)
 8002ad0:	f000 fc66 	bl	80033a0 <_init>
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	2600      	movs	r6, #0
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	080036d0 	.word	0x080036d0
 8002af8:	080036d0 	.word	0x080036d0
 8002afc:	080036d0 	.word	0x080036d0
 8002b00:	080036d4 	.word	0x080036d4

08002b04 <__retarget_lock_acquire_recursive>:
 8002b04:	4770      	bx	lr

08002b06 <__retarget_lock_release_recursive>:
 8002b06:	4770      	bx	lr

08002b08 <_free_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d041      	beq.n	8002b94 <_free_r+0x8c>
 8002b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b14:	1f0c      	subs	r4, r1, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bfb8      	it	lt
 8002b1a:	18e4      	addlt	r4, r4, r3
 8002b1c:	f000 f8e0 	bl	8002ce0 <__malloc_lock>
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <_free_r+0x90>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	b933      	cbnz	r3, 8002b34 <_free_r+0x2c>
 8002b26:	6063      	str	r3, [r4, #4]
 8002b28:	6014      	str	r4, [r2, #0]
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b30:	f000 b8dc 	b.w	8002cec <__malloc_unlock>
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	d908      	bls.n	8002b4a <_free_r+0x42>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	1821      	adds	r1, r4, r0
 8002b3c:	428b      	cmp	r3, r1
 8002b3e:	bf01      	itttt	eq
 8002b40:	6819      	ldreq	r1, [r3, #0]
 8002b42:	685b      	ldreq	r3, [r3, #4]
 8002b44:	1809      	addeq	r1, r1, r0
 8002b46:	6021      	streq	r1, [r4, #0]
 8002b48:	e7ed      	b.n	8002b26 <_free_r+0x1e>
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	b10b      	cbz	r3, 8002b54 <_free_r+0x4c>
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d9fa      	bls.n	8002b4a <_free_r+0x42>
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	1850      	adds	r0, r2, r1
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d10b      	bne.n	8002b74 <_free_r+0x6c>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	4401      	add	r1, r0
 8002b60:	1850      	adds	r0, r2, r1
 8002b62:	4283      	cmp	r3, r0
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	d1e0      	bne.n	8002b2a <_free_r+0x22>
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	6053      	str	r3, [r2, #4]
 8002b6e:	4408      	add	r0, r1
 8002b70:	6010      	str	r0, [r2, #0]
 8002b72:	e7da      	b.n	8002b2a <_free_r+0x22>
 8002b74:	d902      	bls.n	8002b7c <_free_r+0x74>
 8002b76:	230c      	movs	r3, #12
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	e7d6      	b.n	8002b2a <_free_r+0x22>
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	1821      	adds	r1, r4, r0
 8002b80:	428b      	cmp	r3, r1
 8002b82:	bf04      	itt	eq
 8002b84:	6819      	ldreq	r1, [r3, #0]
 8002b86:	685b      	ldreq	r3, [r3, #4]
 8002b88:	6063      	str	r3, [r4, #4]
 8002b8a:	bf04      	itt	eq
 8002b8c:	1809      	addeq	r1, r1, r0
 8002b8e:	6021      	streq	r1, [r4, #0]
 8002b90:	6054      	str	r4, [r2, #4]
 8002b92:	e7ca      	b.n	8002b2a <_free_r+0x22>
 8002b94:	bd38      	pop	{r3, r4, r5, pc}
 8002b96:	bf00      	nop
 8002b98:	2000022c 	.word	0x2000022c

08002b9c <sbrk_aligned>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8002bdc <sbrk_aligned+0x40>)
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	6831      	ldr	r1, [r6, #0]
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	b911      	cbnz	r1, 8002bae <sbrk_aligned+0x12>
 8002ba8:	f000 fba6 	bl	80032f8 <_sbrk_r>
 8002bac:	6030      	str	r0, [r6, #0]
 8002bae:	4621      	mov	r1, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 fba1 	bl	80032f8 <_sbrk_r>
 8002bb6:	1c43      	adds	r3, r0, #1
 8002bb8:	d103      	bne.n	8002bc2 <sbrk_aligned+0x26>
 8002bba:	f04f 34ff 	mov.w	r4, #4294967295
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	bd70      	pop	{r4, r5, r6, pc}
 8002bc2:	1cc4      	adds	r4, r0, #3
 8002bc4:	f024 0403 	bic.w	r4, r4, #3
 8002bc8:	42a0      	cmp	r0, r4
 8002bca:	d0f8      	beq.n	8002bbe <sbrk_aligned+0x22>
 8002bcc:	1a21      	subs	r1, r4, r0
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f000 fb92 	bl	80032f8 <_sbrk_r>
 8002bd4:	3001      	adds	r0, #1
 8002bd6:	d1f2      	bne.n	8002bbe <sbrk_aligned+0x22>
 8002bd8:	e7ef      	b.n	8002bba <sbrk_aligned+0x1e>
 8002bda:	bf00      	nop
 8002bdc:	20000228 	.word	0x20000228

08002be0 <_malloc_r>:
 8002be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be4:	1ccd      	adds	r5, r1, #3
 8002be6:	f025 0503 	bic.w	r5, r5, #3
 8002bea:	3508      	adds	r5, #8
 8002bec:	2d0c      	cmp	r5, #12
 8002bee:	bf38      	it	cc
 8002bf0:	250c      	movcc	r5, #12
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	db01      	blt.n	8002bfc <_malloc_r+0x1c>
 8002bf8:	42a9      	cmp	r1, r5
 8002bfa:	d904      	bls.n	8002c06 <_malloc_r+0x26>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	6033      	str	r3, [r6, #0]
 8002c00:	2000      	movs	r0, #0
 8002c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cdc <_malloc_r+0xfc>
 8002c0a:	f000 f869 	bl	8002ce0 <__malloc_lock>
 8002c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c12:	461c      	mov	r4, r3
 8002c14:	bb44      	cbnz	r4, 8002c68 <_malloc_r+0x88>
 8002c16:	4629      	mov	r1, r5
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f7ff ffbf 	bl	8002b9c <sbrk_aligned>
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	4604      	mov	r4, r0
 8002c22:	d158      	bne.n	8002cd6 <_malloc_r+0xf6>
 8002c24:	f8d8 4000 	ldr.w	r4, [r8]
 8002c28:	4627      	mov	r7, r4
 8002c2a:	2f00      	cmp	r7, #0
 8002c2c:	d143      	bne.n	8002cb6 <_malloc_r+0xd6>
 8002c2e:	2c00      	cmp	r4, #0
 8002c30:	d04b      	beq.n	8002cca <_malloc_r+0xea>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	4639      	mov	r1, r7
 8002c36:	4630      	mov	r0, r6
 8002c38:	eb04 0903 	add.w	r9, r4, r3
 8002c3c:	f000 fb5c 	bl	80032f8 <_sbrk_r>
 8002c40:	4581      	cmp	r9, r0
 8002c42:	d142      	bne.n	8002cca <_malloc_r+0xea>
 8002c44:	6821      	ldr	r1, [r4, #0]
 8002c46:	1a6d      	subs	r5, r5, r1
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f7ff ffa6 	bl	8002b9c <sbrk_aligned>
 8002c50:	3001      	adds	r0, #1
 8002c52:	d03a      	beq.n	8002cca <_malloc_r+0xea>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	442b      	add	r3, r5
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	bb62      	cbnz	r2, 8002cbc <_malloc_r+0xdc>
 8002c62:	f8c8 7000 	str.w	r7, [r8]
 8002c66:	e00f      	b.n	8002c88 <_malloc_r+0xa8>
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	1b52      	subs	r2, r2, r5
 8002c6c:	d420      	bmi.n	8002cb0 <_malloc_r+0xd0>
 8002c6e:	2a0b      	cmp	r2, #11
 8002c70:	d917      	bls.n	8002ca2 <_malloc_r+0xc2>
 8002c72:	1961      	adds	r1, r4, r5
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	6025      	str	r5, [r4, #0]
 8002c78:	bf18      	it	ne
 8002c7a:	6059      	strne	r1, [r3, #4]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	bf08      	it	eq
 8002c80:	f8c8 1000 	streq.w	r1, [r8]
 8002c84:	5162      	str	r2, [r4, r5]
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f000 f82f 	bl	8002cec <__malloc_unlock>
 8002c8e:	f104 000b 	add.w	r0, r4, #11
 8002c92:	1d23      	adds	r3, r4, #4
 8002c94:	f020 0007 	bic.w	r0, r0, #7
 8002c98:	1ac2      	subs	r2, r0, r3
 8002c9a:	bf1c      	itt	ne
 8002c9c:	1a1b      	subne	r3, r3, r0
 8002c9e:	50a3      	strne	r3, [r4, r2]
 8002ca0:	e7af      	b.n	8002c02 <_malloc_r+0x22>
 8002ca2:	6862      	ldr	r2, [r4, #4]
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	bf0c      	ite	eq
 8002ca8:	f8c8 2000 	streq.w	r2, [r8]
 8002cac:	605a      	strne	r2, [r3, #4]
 8002cae:	e7eb      	b.n	8002c88 <_malloc_r+0xa8>
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	6864      	ldr	r4, [r4, #4]
 8002cb4:	e7ae      	b.n	8002c14 <_malloc_r+0x34>
 8002cb6:	463c      	mov	r4, r7
 8002cb8:	687f      	ldr	r7, [r7, #4]
 8002cba:	e7b6      	b.n	8002c2a <_malloc_r+0x4a>
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	d1fb      	bne.n	8002cbc <_malloc_r+0xdc>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6053      	str	r3, [r2, #4]
 8002cc8:	e7de      	b.n	8002c88 <_malloc_r+0xa8>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 f80c 	bl	8002cec <__malloc_unlock>
 8002cd4:	e794      	b.n	8002c00 <_malloc_r+0x20>
 8002cd6:	6005      	str	r5, [r0, #0]
 8002cd8:	e7d6      	b.n	8002c88 <_malloc_r+0xa8>
 8002cda:	bf00      	nop
 8002cdc:	2000022c 	.word	0x2000022c

08002ce0 <__malloc_lock>:
 8002ce0:	4801      	ldr	r0, [pc, #4]	@ (8002ce8 <__malloc_lock+0x8>)
 8002ce2:	f7ff bf0f 	b.w	8002b04 <__retarget_lock_acquire_recursive>
 8002ce6:	bf00      	nop
 8002ce8:	20000224 	.word	0x20000224

08002cec <__malloc_unlock>:
 8002cec:	4801      	ldr	r0, [pc, #4]	@ (8002cf4 <__malloc_unlock+0x8>)
 8002cee:	f7ff bf0a 	b.w	8002b06 <__retarget_lock_release_recursive>
 8002cf2:	bf00      	nop
 8002cf4:	20000224 	.word	0x20000224

08002cf8 <__ssputs_r>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	688e      	ldr	r6, [r1, #8]
 8002cfe:	461f      	mov	r7, r3
 8002d00:	42be      	cmp	r6, r7
 8002d02:	680b      	ldr	r3, [r1, #0]
 8002d04:	4682      	mov	sl, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	4690      	mov	r8, r2
 8002d0a:	d82d      	bhi.n	8002d68 <__ssputs_r+0x70>
 8002d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d14:	d026      	beq.n	8002d64 <__ssputs_r+0x6c>
 8002d16:	6965      	ldr	r5, [r4, #20]
 8002d18:	6909      	ldr	r1, [r1, #16]
 8002d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d1e:	eba3 0901 	sub.w	r9, r3, r1
 8002d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d26:	1c7b      	adds	r3, r7, #1
 8002d28:	444b      	add	r3, r9
 8002d2a:	106d      	asrs	r5, r5, #1
 8002d2c:	429d      	cmp	r5, r3
 8002d2e:	bf38      	it	cc
 8002d30:	461d      	movcc	r5, r3
 8002d32:	0553      	lsls	r3, r2, #21
 8002d34:	d527      	bpl.n	8002d86 <__ssputs_r+0x8e>
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7ff ff52 	bl	8002be0 <_malloc_r>
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	b360      	cbz	r0, 8002d9a <__ssputs_r+0xa2>
 8002d40:	6921      	ldr	r1, [r4, #16]
 8002d42:	464a      	mov	r2, r9
 8002d44:	f000 fae8 	bl	8003318 <memcpy>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	6126      	str	r6, [r4, #16]
 8002d56:	6165      	str	r5, [r4, #20]
 8002d58:	444e      	add	r6, r9
 8002d5a:	eba5 0509 	sub.w	r5, r5, r9
 8002d5e:	6026      	str	r6, [r4, #0]
 8002d60:	60a5      	str	r5, [r4, #8]
 8002d62:	463e      	mov	r6, r7
 8002d64:	42be      	cmp	r6, r7
 8002d66:	d900      	bls.n	8002d6a <__ssputs_r+0x72>
 8002d68:	463e      	mov	r6, r7
 8002d6a:	6820      	ldr	r0, [r4, #0]
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	4641      	mov	r1, r8
 8002d70:	f000 faa8 	bl	80032c4 <memmove>
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	1b9b      	subs	r3, r3, r6
 8002d78:	60a3      	str	r3, [r4, #8]
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	4433      	add	r3, r6
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	2000      	movs	r0, #0
 8002d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d86:	462a      	mov	r2, r5
 8002d88:	f000 fad4 	bl	8003334 <_realloc_r>
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d1e0      	bne.n	8002d54 <__ssputs_r+0x5c>
 8002d92:	6921      	ldr	r1, [r4, #16]
 8002d94:	4650      	mov	r0, sl
 8002d96:	f7ff feb7 	bl	8002b08 <_free_r>
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	f8ca 3000 	str.w	r3, [sl]
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	e7e9      	b.n	8002d82 <__ssputs_r+0x8a>
	...

08002db0 <_svfiprintf_r>:
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	4698      	mov	r8, r3
 8002db6:	898b      	ldrh	r3, [r1, #12]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	b09d      	sub	sp, #116	@ 0x74
 8002dbc:	4607      	mov	r7, r0
 8002dbe:	460d      	mov	r5, r1
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	d510      	bpl.n	8002de6 <_svfiprintf_r+0x36>
 8002dc4:	690b      	ldr	r3, [r1, #16]
 8002dc6:	b973      	cbnz	r3, 8002de6 <_svfiprintf_r+0x36>
 8002dc8:	2140      	movs	r1, #64	@ 0x40
 8002dca:	f7ff ff09 	bl	8002be0 <_malloc_r>
 8002dce:	6028      	str	r0, [r5, #0]
 8002dd0:	6128      	str	r0, [r5, #16]
 8002dd2:	b930      	cbnz	r0, 8002de2 <_svfiprintf_r+0x32>
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	b01d      	add	sp, #116	@ 0x74
 8002dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de2:	2340      	movs	r3, #64	@ 0x40
 8002de4:	616b      	str	r3, [r5, #20]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dea:	2320      	movs	r3, #32
 8002dec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002df4:	2330      	movs	r3, #48	@ 0x30
 8002df6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f94 <_svfiprintf_r+0x1e4>
 8002dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dfe:	f04f 0901 	mov.w	r9, #1
 8002e02:	4623      	mov	r3, r4
 8002e04:	469a      	mov	sl, r3
 8002e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e0a:	b10a      	cbz	r2, 8002e10 <_svfiprintf_r+0x60>
 8002e0c:	2a25      	cmp	r2, #37	@ 0x25
 8002e0e:	d1f9      	bne.n	8002e04 <_svfiprintf_r+0x54>
 8002e10:	ebba 0b04 	subs.w	fp, sl, r4
 8002e14:	d00b      	beq.n	8002e2e <_svfiprintf_r+0x7e>
 8002e16:	465b      	mov	r3, fp
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	4638      	mov	r0, r7
 8002e1e:	f7ff ff6b 	bl	8002cf8 <__ssputs_r>
 8002e22:	3001      	adds	r0, #1
 8002e24:	f000 80a7 	beq.w	8002f76 <_svfiprintf_r+0x1c6>
 8002e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e2a:	445a      	add	r2, fp
 8002e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 809f 	beq.w	8002f76 <_svfiprintf_r+0x1c6>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e42:	f10a 0a01 	add.w	sl, sl, #1
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	9307      	str	r3, [sp, #28]
 8002e4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e50:	4654      	mov	r4, sl
 8002e52:	2205      	movs	r2, #5
 8002e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e58:	484e      	ldr	r0, [pc, #312]	@ (8002f94 <_svfiprintf_r+0x1e4>)
 8002e5a:	f7fd f9e1 	bl	8000220 <memchr>
 8002e5e:	9a04      	ldr	r2, [sp, #16]
 8002e60:	b9d8      	cbnz	r0, 8002e9a <_svfiprintf_r+0xea>
 8002e62:	06d0      	lsls	r0, r2, #27
 8002e64:	bf44      	itt	mi
 8002e66:	2320      	movmi	r3, #32
 8002e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e6c:	0711      	lsls	r1, r2, #28
 8002e6e:	bf44      	itt	mi
 8002e70:	232b      	movmi	r3, #43	@ 0x2b
 8002e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e76:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e7c:	d015      	beq.n	8002eaa <_svfiprintf_r+0xfa>
 8002e7e:	9a07      	ldr	r2, [sp, #28]
 8002e80:	4654      	mov	r4, sl
 8002e82:	2000      	movs	r0, #0
 8002e84:	f04f 0c0a 	mov.w	ip, #10
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e8e:	3b30      	subs	r3, #48	@ 0x30
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d94b      	bls.n	8002f2c <_svfiprintf_r+0x17c>
 8002e94:	b1b0      	cbz	r0, 8002ec4 <_svfiprintf_r+0x114>
 8002e96:	9207      	str	r2, [sp, #28]
 8002e98:	e014      	b.n	8002ec4 <_svfiprintf_r+0x114>
 8002e9a:	eba0 0308 	sub.w	r3, r0, r8
 8002e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	9304      	str	r3, [sp, #16]
 8002ea6:	46a2      	mov	sl, r4
 8002ea8:	e7d2      	b.n	8002e50 <_svfiprintf_r+0xa0>
 8002eaa:	9b03      	ldr	r3, [sp, #12]
 8002eac:	1d19      	adds	r1, r3, #4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	9103      	str	r1, [sp, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bfbb      	ittet	lt
 8002eb6:	425b      	neglt	r3, r3
 8002eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8002ebc:	9307      	strge	r3, [sp, #28]
 8002ebe:	9307      	strlt	r3, [sp, #28]
 8002ec0:	bfb8      	it	lt
 8002ec2:	9204      	strlt	r2, [sp, #16]
 8002ec4:	7823      	ldrb	r3, [r4, #0]
 8002ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ec8:	d10a      	bne.n	8002ee0 <_svfiprintf_r+0x130>
 8002eca:	7863      	ldrb	r3, [r4, #1]
 8002ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ece:	d132      	bne.n	8002f36 <_svfiprintf_r+0x186>
 8002ed0:	9b03      	ldr	r3, [sp, #12]
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	9203      	str	r2, [sp, #12]
 8002ed8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002edc:	3402      	adds	r4, #2
 8002ede:	9305      	str	r3, [sp, #20]
 8002ee0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002fa4 <_svfiprintf_r+0x1f4>
 8002ee4:	7821      	ldrb	r1, [r4, #0]
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	4650      	mov	r0, sl
 8002eea:	f7fd f999 	bl	8000220 <memchr>
 8002eee:	b138      	cbz	r0, 8002f00 <_svfiprintf_r+0x150>
 8002ef0:	9b04      	ldr	r3, [sp, #16]
 8002ef2:	eba0 000a 	sub.w	r0, r0, sl
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	4082      	lsls	r2, r0
 8002efa:	4313      	orrs	r3, r2
 8002efc:	3401      	adds	r4, #1
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f04:	4824      	ldr	r0, [pc, #144]	@ (8002f98 <_svfiprintf_r+0x1e8>)
 8002f06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f0a:	2206      	movs	r2, #6
 8002f0c:	f7fd f988 	bl	8000220 <memchr>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d036      	beq.n	8002f82 <_svfiprintf_r+0x1d2>
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <_svfiprintf_r+0x1ec>)
 8002f16:	bb1b      	cbnz	r3, 8002f60 <_svfiprintf_r+0x1b0>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	3307      	adds	r3, #7
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	3308      	adds	r3, #8
 8002f22:	9303      	str	r3, [sp, #12]
 8002f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f26:	4433      	add	r3, r6
 8002f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f2a:	e76a      	b.n	8002e02 <_svfiprintf_r+0x52>
 8002f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f30:	460c      	mov	r4, r1
 8002f32:	2001      	movs	r0, #1
 8002f34:	e7a8      	b.n	8002e88 <_svfiprintf_r+0xd8>
 8002f36:	2300      	movs	r3, #0
 8002f38:	3401      	adds	r4, #1
 8002f3a:	9305      	str	r3, [sp, #20]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f04f 0c0a 	mov.w	ip, #10
 8002f42:	4620      	mov	r0, r4
 8002f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f48:	3a30      	subs	r2, #48	@ 0x30
 8002f4a:	2a09      	cmp	r2, #9
 8002f4c:	d903      	bls.n	8002f56 <_svfiprintf_r+0x1a6>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0c6      	beq.n	8002ee0 <_svfiprintf_r+0x130>
 8002f52:	9105      	str	r1, [sp, #20]
 8002f54:	e7c4      	b.n	8002ee0 <_svfiprintf_r+0x130>
 8002f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e7f0      	b.n	8002f42 <_svfiprintf_r+0x192>
 8002f60:	ab03      	add	r3, sp, #12
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	462a      	mov	r2, r5
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <_svfiprintf_r+0x1f0>)
 8002f68:	a904      	add	r1, sp, #16
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f3af 8000 	nop.w
 8002f70:	1c42      	adds	r2, r0, #1
 8002f72:	4606      	mov	r6, r0
 8002f74:	d1d6      	bne.n	8002f24 <_svfiprintf_r+0x174>
 8002f76:	89ab      	ldrh	r3, [r5, #12]
 8002f78:	065b      	lsls	r3, r3, #25
 8002f7a:	f53f af2d 	bmi.w	8002dd8 <_svfiprintf_r+0x28>
 8002f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f80:	e72c      	b.n	8002ddc <_svfiprintf_r+0x2c>
 8002f82:	ab03      	add	r3, sp, #12
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462a      	mov	r2, r5
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <_svfiprintf_r+0x1f0>)
 8002f8a:	a904      	add	r1, sp, #16
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	f000 f879 	bl	8003084 <_printf_i>
 8002f92:	e7ed      	b.n	8002f70 <_svfiprintf_r+0x1c0>
 8002f94:	08003694 	.word	0x08003694
 8002f98:	0800369e 	.word	0x0800369e
 8002f9c:	00000000 	.word	0x00000000
 8002fa0:	08002cf9 	.word	0x08002cf9
 8002fa4:	0800369a 	.word	0x0800369a

08002fa8 <_printf_common>:
 8002fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	4616      	mov	r6, r2
 8002fae:	4698      	mov	r8, r3
 8002fb0:	688a      	ldr	r2, [r1, #8]
 8002fb2:	690b      	ldr	r3, [r1, #16]
 8002fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bfb8      	it	lt
 8002fbc:	4613      	movlt	r3, r2
 8002fbe:	6033      	str	r3, [r6, #0]
 8002fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	b10a      	cbz	r2, 8002fce <_printf_common+0x26>
 8002fca:	3301      	adds	r3, #1
 8002fcc:	6033      	str	r3, [r6, #0]
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	0699      	lsls	r1, r3, #26
 8002fd2:	bf42      	ittt	mi
 8002fd4:	6833      	ldrmi	r3, [r6, #0]
 8002fd6:	3302      	addmi	r3, #2
 8002fd8:	6033      	strmi	r3, [r6, #0]
 8002fda:	6825      	ldr	r5, [r4, #0]
 8002fdc:	f015 0506 	ands.w	r5, r5, #6
 8002fe0:	d106      	bne.n	8002ff0 <_printf_common+0x48>
 8002fe2:	f104 0a19 	add.w	sl, r4, #25
 8002fe6:	68e3      	ldr	r3, [r4, #12]
 8002fe8:	6832      	ldr	r2, [r6, #0]
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	42ab      	cmp	r3, r5
 8002fee:	dc26      	bgt.n	800303e <_printf_common+0x96>
 8002ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	3b00      	subs	r3, #0
 8002ff8:	bf18      	it	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	0692      	lsls	r2, r2, #26
 8002ffe:	d42b      	bmi.n	8003058 <_printf_common+0xb0>
 8003000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003004:	4641      	mov	r1, r8
 8003006:	4638      	mov	r0, r7
 8003008:	47c8      	blx	r9
 800300a:	3001      	adds	r0, #1
 800300c:	d01e      	beq.n	800304c <_printf_common+0xa4>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	6922      	ldr	r2, [r4, #16]
 8003012:	f003 0306 	and.w	r3, r3, #6
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf02      	ittt	eq
 800301a:	68e5      	ldreq	r5, [r4, #12]
 800301c:	6833      	ldreq	r3, [r6, #0]
 800301e:	1aed      	subeq	r5, r5, r3
 8003020:	68a3      	ldr	r3, [r4, #8]
 8003022:	bf0c      	ite	eq
 8003024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003028:	2500      	movne	r5, #0
 800302a:	4293      	cmp	r3, r2
 800302c:	bfc4      	itt	gt
 800302e:	1a9b      	subgt	r3, r3, r2
 8003030:	18ed      	addgt	r5, r5, r3
 8003032:	2600      	movs	r6, #0
 8003034:	341a      	adds	r4, #26
 8003036:	42b5      	cmp	r5, r6
 8003038:	d11a      	bne.n	8003070 <_printf_common+0xc8>
 800303a:	2000      	movs	r0, #0
 800303c:	e008      	b.n	8003050 <_printf_common+0xa8>
 800303e:	2301      	movs	r3, #1
 8003040:	4652      	mov	r2, sl
 8003042:	4641      	mov	r1, r8
 8003044:	4638      	mov	r0, r7
 8003046:	47c8      	blx	r9
 8003048:	3001      	adds	r0, #1
 800304a:	d103      	bne.n	8003054 <_printf_common+0xac>
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003054:	3501      	adds	r5, #1
 8003056:	e7c6      	b.n	8002fe6 <_printf_common+0x3e>
 8003058:	18e1      	adds	r1, r4, r3
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	2030      	movs	r0, #48	@ 0x30
 800305e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003062:	4422      	add	r2, r4
 8003064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800306c:	3302      	adds	r3, #2
 800306e:	e7c7      	b.n	8003000 <_printf_common+0x58>
 8003070:	2301      	movs	r3, #1
 8003072:	4622      	mov	r2, r4
 8003074:	4641      	mov	r1, r8
 8003076:	4638      	mov	r0, r7
 8003078:	47c8      	blx	r9
 800307a:	3001      	adds	r0, #1
 800307c:	d0e6      	beq.n	800304c <_printf_common+0xa4>
 800307e:	3601      	adds	r6, #1
 8003080:	e7d9      	b.n	8003036 <_printf_common+0x8e>
	...

08003084 <_printf_i>:
 8003084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003088:	7e0f      	ldrb	r7, [r1, #24]
 800308a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800308c:	2f78      	cmp	r7, #120	@ 0x78
 800308e:	4691      	mov	r9, r2
 8003090:	4680      	mov	r8, r0
 8003092:	460c      	mov	r4, r1
 8003094:	469a      	mov	sl, r3
 8003096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800309a:	d807      	bhi.n	80030ac <_printf_i+0x28>
 800309c:	2f62      	cmp	r7, #98	@ 0x62
 800309e:	d80a      	bhi.n	80030b6 <_printf_i+0x32>
 80030a0:	2f00      	cmp	r7, #0
 80030a2:	f000 80d2 	beq.w	800324a <_printf_i+0x1c6>
 80030a6:	2f58      	cmp	r7, #88	@ 0x58
 80030a8:	f000 80b9 	beq.w	800321e <_printf_i+0x19a>
 80030ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030b4:	e03a      	b.n	800312c <_printf_i+0xa8>
 80030b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030ba:	2b15      	cmp	r3, #21
 80030bc:	d8f6      	bhi.n	80030ac <_printf_i+0x28>
 80030be:	a101      	add	r1, pc, #4	@ (adr r1, 80030c4 <_printf_i+0x40>)
 80030c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	08003131 	.word	0x08003131
 80030cc:	080030ad 	.word	0x080030ad
 80030d0:	080030ad 	.word	0x080030ad
 80030d4:	080030ad 	.word	0x080030ad
 80030d8:	080030ad 	.word	0x080030ad
 80030dc:	08003131 	.word	0x08003131
 80030e0:	080030ad 	.word	0x080030ad
 80030e4:	080030ad 	.word	0x080030ad
 80030e8:	080030ad 	.word	0x080030ad
 80030ec:	080030ad 	.word	0x080030ad
 80030f0:	08003231 	.word	0x08003231
 80030f4:	0800315b 	.word	0x0800315b
 80030f8:	080031eb 	.word	0x080031eb
 80030fc:	080030ad 	.word	0x080030ad
 8003100:	080030ad 	.word	0x080030ad
 8003104:	08003253 	.word	0x08003253
 8003108:	080030ad 	.word	0x080030ad
 800310c:	0800315b 	.word	0x0800315b
 8003110:	080030ad 	.word	0x080030ad
 8003114:	080030ad 	.word	0x080030ad
 8003118:	080031f3 	.word	0x080031f3
 800311c:	6833      	ldr	r3, [r6, #0]
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6032      	str	r2, [r6, #0]
 8003124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800312c:	2301      	movs	r3, #1
 800312e:	e09d      	b.n	800326c <_printf_i+0x1e8>
 8003130:	6833      	ldr	r3, [r6, #0]
 8003132:	6820      	ldr	r0, [r4, #0]
 8003134:	1d19      	adds	r1, r3, #4
 8003136:	6031      	str	r1, [r6, #0]
 8003138:	0606      	lsls	r6, r0, #24
 800313a:	d501      	bpl.n	8003140 <_printf_i+0xbc>
 800313c:	681d      	ldr	r5, [r3, #0]
 800313e:	e003      	b.n	8003148 <_printf_i+0xc4>
 8003140:	0645      	lsls	r5, r0, #25
 8003142:	d5fb      	bpl.n	800313c <_printf_i+0xb8>
 8003144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003148:	2d00      	cmp	r5, #0
 800314a:	da03      	bge.n	8003154 <_printf_i+0xd0>
 800314c:	232d      	movs	r3, #45	@ 0x2d
 800314e:	426d      	negs	r5, r5
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003154:	4859      	ldr	r0, [pc, #356]	@ (80032bc <_printf_i+0x238>)
 8003156:	230a      	movs	r3, #10
 8003158:	e011      	b.n	800317e <_printf_i+0xfa>
 800315a:	6821      	ldr	r1, [r4, #0]
 800315c:	6833      	ldr	r3, [r6, #0]
 800315e:	0608      	lsls	r0, r1, #24
 8003160:	f853 5b04 	ldr.w	r5, [r3], #4
 8003164:	d402      	bmi.n	800316c <_printf_i+0xe8>
 8003166:	0649      	lsls	r1, r1, #25
 8003168:	bf48      	it	mi
 800316a:	b2ad      	uxthmi	r5, r5
 800316c:	2f6f      	cmp	r7, #111	@ 0x6f
 800316e:	4853      	ldr	r0, [pc, #332]	@ (80032bc <_printf_i+0x238>)
 8003170:	6033      	str	r3, [r6, #0]
 8003172:	bf14      	ite	ne
 8003174:	230a      	movne	r3, #10
 8003176:	2308      	moveq	r3, #8
 8003178:	2100      	movs	r1, #0
 800317a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800317e:	6866      	ldr	r6, [r4, #4]
 8003180:	60a6      	str	r6, [r4, #8]
 8003182:	2e00      	cmp	r6, #0
 8003184:	bfa2      	ittt	ge
 8003186:	6821      	ldrge	r1, [r4, #0]
 8003188:	f021 0104 	bicge.w	r1, r1, #4
 800318c:	6021      	strge	r1, [r4, #0]
 800318e:	b90d      	cbnz	r5, 8003194 <_printf_i+0x110>
 8003190:	2e00      	cmp	r6, #0
 8003192:	d04b      	beq.n	800322c <_printf_i+0x1a8>
 8003194:	4616      	mov	r6, r2
 8003196:	fbb5 f1f3 	udiv	r1, r5, r3
 800319a:	fb03 5711 	mls	r7, r3, r1, r5
 800319e:	5dc7      	ldrb	r7, [r0, r7]
 80031a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031a4:	462f      	mov	r7, r5
 80031a6:	42bb      	cmp	r3, r7
 80031a8:	460d      	mov	r5, r1
 80031aa:	d9f4      	bls.n	8003196 <_printf_i+0x112>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d10b      	bne.n	80031c8 <_printf_i+0x144>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	07df      	lsls	r7, r3, #31
 80031b4:	d508      	bpl.n	80031c8 <_printf_i+0x144>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	6861      	ldr	r1, [r4, #4]
 80031ba:	4299      	cmp	r1, r3
 80031bc:	bfde      	ittt	le
 80031be:	2330      	movle	r3, #48	@ 0x30
 80031c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031c8:	1b92      	subs	r2, r2, r6
 80031ca:	6122      	str	r2, [r4, #16]
 80031cc:	f8cd a000 	str.w	sl, [sp]
 80031d0:	464b      	mov	r3, r9
 80031d2:	aa03      	add	r2, sp, #12
 80031d4:	4621      	mov	r1, r4
 80031d6:	4640      	mov	r0, r8
 80031d8:	f7ff fee6 	bl	8002fa8 <_printf_common>
 80031dc:	3001      	adds	r0, #1
 80031de:	d14a      	bne.n	8003276 <_printf_i+0x1f2>
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	b004      	add	sp, #16
 80031e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	4833      	ldr	r0, [pc, #204]	@ (80032c0 <_printf_i+0x23c>)
 80031f4:	2778      	movs	r7, #120	@ 0x78
 80031f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	6831      	ldr	r1, [r6, #0]
 80031fe:	061f      	lsls	r7, r3, #24
 8003200:	f851 5b04 	ldr.w	r5, [r1], #4
 8003204:	d402      	bmi.n	800320c <_printf_i+0x188>
 8003206:	065f      	lsls	r7, r3, #25
 8003208:	bf48      	it	mi
 800320a:	b2ad      	uxthmi	r5, r5
 800320c:	6031      	str	r1, [r6, #0]
 800320e:	07d9      	lsls	r1, r3, #31
 8003210:	bf44      	itt	mi
 8003212:	f043 0320 	orrmi.w	r3, r3, #32
 8003216:	6023      	strmi	r3, [r4, #0]
 8003218:	b11d      	cbz	r5, 8003222 <_printf_i+0x19e>
 800321a:	2310      	movs	r3, #16
 800321c:	e7ac      	b.n	8003178 <_printf_i+0xf4>
 800321e:	4827      	ldr	r0, [pc, #156]	@ (80032bc <_printf_i+0x238>)
 8003220:	e7e9      	b.n	80031f6 <_printf_i+0x172>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f023 0320 	bic.w	r3, r3, #32
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	e7f6      	b.n	800321a <_printf_i+0x196>
 800322c:	4616      	mov	r6, r2
 800322e:	e7bd      	b.n	80031ac <_printf_i+0x128>
 8003230:	6833      	ldr	r3, [r6, #0]
 8003232:	6825      	ldr	r5, [r4, #0]
 8003234:	6961      	ldr	r1, [r4, #20]
 8003236:	1d18      	adds	r0, r3, #4
 8003238:	6030      	str	r0, [r6, #0]
 800323a:	062e      	lsls	r6, r5, #24
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	d501      	bpl.n	8003244 <_printf_i+0x1c0>
 8003240:	6019      	str	r1, [r3, #0]
 8003242:	e002      	b.n	800324a <_printf_i+0x1c6>
 8003244:	0668      	lsls	r0, r5, #25
 8003246:	d5fb      	bpl.n	8003240 <_printf_i+0x1bc>
 8003248:	8019      	strh	r1, [r3, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	4616      	mov	r6, r2
 8003250:	e7bc      	b.n	80031cc <_printf_i+0x148>
 8003252:	6833      	ldr	r3, [r6, #0]
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	6032      	str	r2, [r6, #0]
 8003258:	681e      	ldr	r6, [r3, #0]
 800325a:	6862      	ldr	r2, [r4, #4]
 800325c:	2100      	movs	r1, #0
 800325e:	4630      	mov	r0, r6
 8003260:	f7fc ffde 	bl	8000220 <memchr>
 8003264:	b108      	cbz	r0, 800326a <_printf_i+0x1e6>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	6060      	str	r0, [r4, #4]
 800326a:	6863      	ldr	r3, [r4, #4]
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	2300      	movs	r3, #0
 8003270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003274:	e7aa      	b.n	80031cc <_printf_i+0x148>
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	4632      	mov	r2, r6
 800327a:	4649      	mov	r1, r9
 800327c:	4640      	mov	r0, r8
 800327e:	47d0      	blx	sl
 8003280:	3001      	adds	r0, #1
 8003282:	d0ad      	beq.n	80031e0 <_printf_i+0x15c>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	079b      	lsls	r3, r3, #30
 8003288:	d413      	bmi.n	80032b2 <_printf_i+0x22e>
 800328a:	68e0      	ldr	r0, [r4, #12]
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	4298      	cmp	r0, r3
 8003290:	bfb8      	it	lt
 8003292:	4618      	movlt	r0, r3
 8003294:	e7a6      	b.n	80031e4 <_printf_i+0x160>
 8003296:	2301      	movs	r3, #1
 8003298:	4632      	mov	r2, r6
 800329a:	4649      	mov	r1, r9
 800329c:	4640      	mov	r0, r8
 800329e:	47d0      	blx	sl
 80032a0:	3001      	adds	r0, #1
 80032a2:	d09d      	beq.n	80031e0 <_printf_i+0x15c>
 80032a4:	3501      	adds	r5, #1
 80032a6:	68e3      	ldr	r3, [r4, #12]
 80032a8:	9903      	ldr	r1, [sp, #12]
 80032aa:	1a5b      	subs	r3, r3, r1
 80032ac:	42ab      	cmp	r3, r5
 80032ae:	dcf2      	bgt.n	8003296 <_printf_i+0x212>
 80032b0:	e7eb      	b.n	800328a <_printf_i+0x206>
 80032b2:	2500      	movs	r5, #0
 80032b4:	f104 0619 	add.w	r6, r4, #25
 80032b8:	e7f5      	b.n	80032a6 <_printf_i+0x222>
 80032ba:	bf00      	nop
 80032bc:	080036a5 	.word	0x080036a5
 80032c0:	080036b6 	.word	0x080036b6

080032c4 <memmove>:
 80032c4:	4288      	cmp	r0, r1
 80032c6:	b510      	push	{r4, lr}
 80032c8:	eb01 0402 	add.w	r4, r1, r2
 80032cc:	d902      	bls.n	80032d4 <memmove+0x10>
 80032ce:	4284      	cmp	r4, r0
 80032d0:	4623      	mov	r3, r4
 80032d2:	d807      	bhi.n	80032e4 <memmove+0x20>
 80032d4:	1e43      	subs	r3, r0, #1
 80032d6:	42a1      	cmp	r1, r4
 80032d8:	d008      	beq.n	80032ec <memmove+0x28>
 80032da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032e2:	e7f8      	b.n	80032d6 <memmove+0x12>
 80032e4:	4402      	add	r2, r0
 80032e6:	4601      	mov	r1, r0
 80032e8:	428a      	cmp	r2, r1
 80032ea:	d100      	bne.n	80032ee <memmove+0x2a>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032f6:	e7f7      	b.n	80032e8 <memmove+0x24>

080032f8 <_sbrk_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	@ (8003314 <_sbrk_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7fd fefa 	bl	80010fc <_sbrk>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_sbrk_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_sbrk_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000220 	.word	0x20000220

08003318 <memcpy>:
 8003318:	440a      	add	r2, r1
 800331a:	4291      	cmp	r1, r2
 800331c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003320:	d100      	bne.n	8003324 <memcpy+0xc>
 8003322:	4770      	bx	lr
 8003324:	b510      	push	{r4, lr}
 8003326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800332a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800332e:	4291      	cmp	r1, r2
 8003330:	d1f9      	bne.n	8003326 <memcpy+0xe>
 8003332:	bd10      	pop	{r4, pc}

08003334 <_realloc_r>:
 8003334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003338:	4680      	mov	r8, r0
 800333a:	4615      	mov	r5, r2
 800333c:	460c      	mov	r4, r1
 800333e:	b921      	cbnz	r1, 800334a <_realloc_r+0x16>
 8003340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003344:	4611      	mov	r1, r2
 8003346:	f7ff bc4b 	b.w	8002be0 <_malloc_r>
 800334a:	b92a      	cbnz	r2, 8003358 <_realloc_r+0x24>
 800334c:	f7ff fbdc 	bl	8002b08 <_free_r>
 8003350:	2400      	movs	r4, #0
 8003352:	4620      	mov	r0, r4
 8003354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003358:	f000 f81a 	bl	8003390 <_malloc_usable_size_r>
 800335c:	4285      	cmp	r5, r0
 800335e:	4606      	mov	r6, r0
 8003360:	d802      	bhi.n	8003368 <_realloc_r+0x34>
 8003362:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003366:	d8f4      	bhi.n	8003352 <_realloc_r+0x1e>
 8003368:	4629      	mov	r1, r5
 800336a:	4640      	mov	r0, r8
 800336c:	f7ff fc38 	bl	8002be0 <_malloc_r>
 8003370:	4607      	mov	r7, r0
 8003372:	2800      	cmp	r0, #0
 8003374:	d0ec      	beq.n	8003350 <_realloc_r+0x1c>
 8003376:	42b5      	cmp	r5, r6
 8003378:	462a      	mov	r2, r5
 800337a:	4621      	mov	r1, r4
 800337c:	bf28      	it	cs
 800337e:	4632      	movcs	r2, r6
 8003380:	f7ff ffca 	bl	8003318 <memcpy>
 8003384:	4621      	mov	r1, r4
 8003386:	4640      	mov	r0, r8
 8003388:	f7ff fbbe 	bl	8002b08 <_free_r>
 800338c:	463c      	mov	r4, r7
 800338e:	e7e0      	b.n	8003352 <_realloc_r+0x1e>

08003390 <_malloc_usable_size_r>:
 8003390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003394:	1f18      	subs	r0, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfbc      	itt	lt
 800339a:	580b      	ldrlt	r3, [r1, r0]
 800339c:	18c0      	addlt	r0, r0, r3
 800339e:	4770      	bx	lr

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
