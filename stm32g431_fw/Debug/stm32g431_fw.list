
stm32g431_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013cc  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d40  08005d40  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d48  08005d48  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d4c  08005d4c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005d50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000084  08005dd4  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08005dd4  000075fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001354c  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7a  00000000  00000000  0001a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbf  00000000  00000000  0001e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003981  00000000  00000000  0001f0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163fe  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc59e  00000000  00000000  00038e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f53f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004370  00000000  00000000  000f5438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f97a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800495c 	.word	0x0800495c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	0800495c 	.word	0x0800495c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET); //CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2301      	movs	r3, #1
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <ILI9341_SPI_Send+0x20>)
 800051a:	f003 f84c 	bl	80035b6 <HAL_SPI_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000500 	.word	0x20000500

0800052c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800053c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000540:	f001 faee 	bl	8001b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800054a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054e:	f001 fae7 	bl	8001b20 <HAL_GPIO_WritePin>
  ILI9341_SPI_Send(Command);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffd7 	bl	8000508 <ILI9341_SPI_Send>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000564:	f001 fadc 	bl	8001b20 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000584:	f001 facc 	bl	8001b20 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800058e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000592:	f001 fac5 	bl	8001b20 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffb5 	bl	8000508 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f001 faba 	bl	8001b20 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <ILI9341_Reset>:
ILI9341_Write_Command(0x2C);
}

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <ILI9341_Reset+0x38>)
 80005be:	f001 faaf 	bl	8001b20 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005c2:	20c8      	movs	r0, #200	@ 0xc8
 80005c4:	f001 f824 	bl	8001610 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f001 faa5 	bl	8001b20 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80005d6:	20c8      	movs	r0, #200	@ 0xc8
 80005d8:	f001 f81a 	bl	8001610 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <ILI9341_Reset+0x38>)
 80005e2:	f001 fa9d 	bl	8001b20 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000400 	.word	0x48000400

080005f0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = Rotation;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80005fe:	2036      	movs	r0, #54	@ 0x36
 8000600:	f7ff ff94 	bl	800052c <ILI9341_Write_Command>
HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 f803 	bl	8001610 <HAL_Delay>

switch(screen_rotation)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d837      	bhi.n	8000680 <ILI9341_Set_Rotation+0x90>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <ILI9341_Set_Rotation+0x28>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800063f 	.word	0x0800063f
 8000620:	08000655 	.word	0x08000655
 8000624:	0800066b 	.word	0x0800066b
  {
    case SCREEN_VERTICAL_1:
      ILI9341_Write_Data(0x40|0x08);
 8000628:	2048      	movs	r0, #72	@ 0x48
 800062a:	f7ff ffa1 	bl	8000570 <ILI9341_Write_Data>
      LCD_WIDTH = 240;
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <ILI9341_Set_Rotation+0x9c>)
 8000630:	22f0      	movs	r2, #240	@ 0xf0
 8000632:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <ILI9341_Set_Rotation+0xa0>)
 8000636:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800063a:	801a      	strh	r2, [r3, #0]
      break;
 800063c:	e021      	b.n	8000682 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_1:
      ILI9341_Write_Data(0x20|0x08);
 800063e:	2028      	movs	r0, #40	@ 0x28
 8000640:	f7ff ff96 	bl	8000570 <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <ILI9341_Set_Rotation+0x9c>)
 8000646:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800064a:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <ILI9341_Set_Rotation+0xa0>)
 800064e:	22f0      	movs	r2, #240	@ 0xf0
 8000650:	801a      	strh	r2, [r3, #0]
      break;
 8000652:	e016      	b.n	8000682 <ILI9341_Set_Rotation+0x92>
    case SCREEN_VERTICAL_2:
      ILI9341_Write_Data(0x80|0x08);
 8000654:	2088      	movs	r0, #136	@ 0x88
 8000656:	f7ff ff8b 	bl	8000570 <ILI9341_Write_Data>
      LCD_WIDTH  = 240;
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <ILI9341_Set_Rotation+0x9c>)
 800065c:	22f0      	movs	r2, #240	@ 0xf0
 800065e:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <ILI9341_Set_Rotation+0xa0>)
 8000662:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000666:	801a      	strh	r2, [r3, #0]
      break;
 8000668:	e00b      	b.n	8000682 <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_2:
      ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800066a:	20e8      	movs	r0, #232	@ 0xe8
 800066c:	f7ff ff80 	bl	8000570 <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <ILI9341_Set_Rotation+0x9c>)
 8000672:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000676:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <ILI9341_Set_Rotation+0xa0>)
 800067a:	22f0      	movs	r2, #240	@ 0xf0
 800067c:	801a      	strh	r2, [r3, #0]
      break;
 800067e:	e000      	b.n	8000682 <ILI9341_Set_Rotation+0x92>
    default:
      //EXIT IF SCREEN ROTATION NOT VALID!
      break;
 8000680:	bf00      	nop
  }
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000002 	.word	0x20000002
 8000690:	20000000 	.word	0x20000000

08000694 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2102      	movs	r1, #2
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <ILI9341_Enable+0x14>)
 800069e:	f001 fa3f 	bl	8001b20 <HAL_GPIO_WritePin>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48000400 	.word	0x48000400

080006ac <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80006b0:	f7ff fff0 	bl	8000694 <ILI9341_Enable>
//ILI9341_SPI_Init();
ILI9341_Reset();
 80006b4:	f7ff ff7e 	bl	80005b4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff37 	bl	800052c <ILI9341_Write_Command>
HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f000 ffa5 	bl	8001610 <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80006c6:	20cb      	movs	r0, #203	@ 0xcb
 80006c8:	f7ff ff30 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80006cc:	2039      	movs	r0, #57	@ 0x39
 80006ce:	f7ff ff4f 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80006d2:	202c      	movs	r0, #44	@ 0x2c
 80006d4:	f7ff ff4c 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff49 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80006de:	2034      	movs	r0, #52	@ 0x34
 80006e0:	f7ff ff46 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff43 	bl	8000570 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80006ea:	20cf      	movs	r0, #207	@ 0xcf
 80006ec:	f7ff ff1e 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff3d 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80006f6:	20c1      	movs	r0, #193	@ 0xc1
 80006f8:	f7ff ff3a 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80006fc:	2030      	movs	r0, #48	@ 0x30
 80006fe:	f7ff ff37 	bl	8000570 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000702:	20e8      	movs	r0, #232	@ 0xe8
 8000704:	f7ff ff12 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000708:	2085      	movs	r0, #133	@ 0x85
 800070a:	f7ff ff31 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ff2e 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000714:	2078      	movs	r0, #120	@ 0x78
 8000716:	f7ff ff2b 	bl	8000570 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800071a:	20ea      	movs	r0, #234	@ 0xea
 800071c:	f7ff ff06 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff25 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff ff22 	bl	8000570 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800072c:	20ed      	movs	r0, #237	@ 0xed
 800072e:	f7ff fefd 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000732:	2064      	movs	r0, #100	@ 0x64
 8000734:	f7ff ff1c 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000738:	2003      	movs	r0, #3
 800073a:	f7ff ff19 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800073e:	2012      	movs	r0, #18
 8000740:	f7ff ff16 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000744:	2081      	movs	r0, #129	@ 0x81
 8000746:	f7ff ff13 	bl	8000570 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800074a:	20f7      	movs	r0, #247	@ 0xf7
 800074c:	f7ff feee 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000750:	2020      	movs	r0, #32
 8000752:	f7ff ff0d 	bl	8000570 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000756:	20c0      	movs	r0, #192	@ 0xc0
 8000758:	f7ff fee8 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800075c:	2023      	movs	r0, #35	@ 0x23
 800075e:	f7ff ff07 	bl	8000570 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000762:	20c1      	movs	r0, #193	@ 0xc1
 8000764:	f7ff fee2 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000768:	2010      	movs	r0, #16
 800076a:	f7ff ff01 	bl	8000570 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800076e:	20c5      	movs	r0, #197	@ 0xc5
 8000770:	f7ff fedc 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000774:	203e      	movs	r0, #62	@ 0x3e
 8000776:	f7ff fefb 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800077a:	2028      	movs	r0, #40	@ 0x28
 800077c:	f7ff fef8 	bl	8000570 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000780:	20c7      	movs	r0, #199	@ 0xc7
 8000782:	f7ff fed3 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000786:	2086      	movs	r0, #134	@ 0x86
 8000788:	f7ff fef2 	bl	8000570 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800078c:	2036      	movs	r0, #54	@ 0x36
 800078e:	f7ff fecd 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000792:	2048      	movs	r0, #72	@ 0x48
 8000794:	f7ff feec 	bl	8000570 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000798:	203a      	movs	r0, #58	@ 0x3a
 800079a:	f7ff fec7 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800079e:	2055      	movs	r0, #85	@ 0x55
 80007a0:	f7ff fee6 	bl	8000570 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80007a4:	20b1      	movs	r0, #177	@ 0xb1
 80007a6:	f7ff fec1 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fee0 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80007b0:	2018      	movs	r0, #24
 80007b2:	f7ff fedd 	bl	8000570 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80007b6:	20b6      	movs	r0, #182	@ 0xb6
 80007b8:	f7ff feb8 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80007bc:	2008      	movs	r0, #8
 80007be:	f7ff fed7 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80007c2:	2082      	movs	r0, #130	@ 0x82
 80007c4:	f7ff fed4 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80007c8:	2027      	movs	r0, #39	@ 0x27
 80007ca:	f7ff fed1 	bl	8000570 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80007ce:	20f2      	movs	r0, #242	@ 0xf2
 80007d0:	f7ff feac 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fecb 	bl	8000570 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80007da:	2026      	movs	r0, #38	@ 0x26
 80007dc:	f7ff fea6 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fec5 	bl	8000570 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80007e6:	20e0      	movs	r0, #224	@ 0xe0
 80007e8:	f7ff fea0 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80007ec:	200f      	movs	r0, #15
 80007ee:	f7ff febf 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80007f2:	2031      	movs	r0, #49	@ 0x31
 80007f4:	f7ff febc 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80007f8:	202b      	movs	r0, #43	@ 0x2b
 80007fa:	f7ff feb9 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80007fe:	200c      	movs	r0, #12
 8000800:	f7ff feb6 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000804:	200e      	movs	r0, #14
 8000806:	f7ff feb3 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800080a:	2008      	movs	r0, #8
 800080c:	f7ff feb0 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000810:	204e      	movs	r0, #78	@ 0x4e
 8000812:	f7ff fead 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000816:	20f1      	movs	r0, #241	@ 0xf1
 8000818:	f7ff feaa 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800081c:	2037      	movs	r0, #55	@ 0x37
 800081e:	f7ff fea7 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000822:	2007      	movs	r0, #7
 8000824:	f7ff fea4 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000828:	2010      	movs	r0, #16
 800082a:	f7ff fea1 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800082e:	2003      	movs	r0, #3
 8000830:	f7ff fe9e 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000834:	200e      	movs	r0, #14
 8000836:	f7ff fe9b 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800083a:	2009      	movs	r0, #9
 800083c:	f7ff fe98 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fe95 	bl	8000570 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000846:	20e1      	movs	r0, #225	@ 0xe1
 8000848:	f7ff fe70 	bl	800052c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fe8f 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000852:	200e      	movs	r0, #14
 8000854:	f7ff fe8c 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000858:	2014      	movs	r0, #20
 800085a:	f7ff fe89 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800085e:	2003      	movs	r0, #3
 8000860:	f7ff fe86 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000864:	2011      	movs	r0, #17
 8000866:	f7ff fe83 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800086a:	2007      	movs	r0, #7
 800086c:	f7ff fe80 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000870:	2031      	movs	r0, #49	@ 0x31
 8000872:	f7ff fe7d 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000876:	20c1      	movs	r0, #193	@ 0xc1
 8000878:	f7ff fe7a 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800087c:	2048      	movs	r0, #72	@ 0x48
 800087e:	f7ff fe77 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000882:	2008      	movs	r0, #8
 8000884:	f7ff fe74 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fe71 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff fe6e 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000894:	2031      	movs	r0, #49	@ 0x31
 8000896:	f7ff fe6b 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800089a:	2036      	movs	r0, #54	@ 0x36
 800089c:	f7ff fe68 	bl	8000570 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80008a0:	200f      	movs	r0, #15
 80008a2:	f7ff fe65 	bl	8000570 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80008a6:	2011      	movs	r0, #17
 80008a8:	f7ff fe40 	bl	800052c <ILI9341_Write_Command>
HAL_Delay(120);
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 feaf 	bl	8001610 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80008b2:	2029      	movs	r0, #41	@ 0x29
 80008b4:	f7ff fe3a 	bl	800052c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fe99 	bl	80005f0 <ILI9341_Set_Rotation>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	2301      	movs	r3, #1
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	2200      	movs	r2, #0
 80008e0:	2178      	movs	r1, #120	@ 0x78
 80008e2:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <ssd1306_write_command+0x2c>)
 80008e4:	f001 f9d0 	bl	8001c88 <HAL_I2C_Mem_Write>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200004ac 	.word	0x200004ac

080008f4 <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 8000900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2240      	movs	r2, #64	@ 0x40
 8000912:	2178      	movs	r1, #120	@ 0x78
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <ssd1306_write_data+0x30>)
 8000916:	f001 f9b7 	bl	8001c88 <HAL_I2C_Mem_Write>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200004ac 	.word	0x200004ac

08000928 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8000932:	208d      	movs	r0, #141	@ 0x8d
 8000934:	f7ff ffc6 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffc2 	bl	80008c4 <ssd1306_write_command>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 8000952:	2081      	movs	r0, #129	@ 0x81
 8000954:	f7ff ffb6 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(value);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffb2 	bl	80008c4 <ssd1306_write_command>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <entire_display_off>:

void entire_display_off()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 800096c:	20a4      	movs	r0, #164	@ 0xa4
 800096e:	f7ff ffa9 	bl	80008c4 <ssd1306_write_command>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}

08000976 <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 800097a:	20a6      	movs	r0, #166	@ 0xa6
 800097c:	f7ff ffa2 	bl	80008c4 <ssd1306_write_command>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 8000988:	20af      	movs	r0, #175	@ 0xaf
 800098a:	f7ff ff9b 	bl	80008c4 <ssd1306_write_command>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff90 	bl	80008c4 <ssd1306_write_command>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff83 	bl	80008c4 <ssd1306_write_command>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff76 	bl	80008c4 <ssd1306_write_command>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff69 	bl	80008c4 <ssd1306_write_command>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff5c 	bl	80008c4 <ssd1306_write_command>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 8000a1e:	20a8      	movs	r0, #168	@ 0xa8
 8000a20:	f7ff ff50 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(mux);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff4c 	bl	80008c4 <ssd1306_write_command>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff3f 	bl	80008c4 <ssd1306_write_command>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 8000a58:	20d3      	movs	r0, #211	@ 0xd3
 8000a5a:	f7ff ff33 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff2f 	bl	80008c4 <ssd1306_write_command>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	460a      	mov	r2, r1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 8000a96:	20da      	movs	r0, #218	@ 0xda
 8000a98:	f7ff ff14 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff10 	bl	80008c4 <ssd1306_write_command>
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	b25a      	sxtb	r2, r3
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 8000acc:	20d5      	movs	r0, #213	@ 0xd5
 8000ace:	f7ff fef9 	bl	80008c4 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fef5 	bl	80008c4 <ssd1306_write_command>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 8000ae6:	203f      	movs	r0, #63	@ 0x3f
 8000ae8:	f7ff ff94 	bl	8000a14 <set_multiplex_ratio>

    set_display_offset(0);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff ffae 	bl	8000a4e <set_display_offset>

    set_display_start_line(0x40);
 8000af2:	2040      	movs	r0, #64	@ 0x40
 8000af4:	f7ff ff74 	bl	80009e0 <set_display_start_line>

    set_segment_remap(0xA1);
 8000af8:	20a1      	movs	r0, #161	@ 0xa1
 8000afa:	f7ff ff7e 	bl	80009fa <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 8000afe:	20c8      	movs	r0, #200	@ 0xc8
 8000b00:	f7ff ff98 	bl	8000a34 <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff ffb1 	bl	8000a6e <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 8000b0c:	207f      	movs	r0, #127	@ 0x7f
 8000b0e:	f7ff ff1b 	bl	8000948 <set_contrast_control>

    entire_display_off();
 8000b12:	f7ff ff29 	bl	8000968 <entire_display_off>

    set_normal_display();
 8000b16:	f7ff ff2e 	bl	8000976 <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ffc5 	bl	8000aac <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8000b22:	2014      	movs	r0, #20
 8000b24:	f7ff ff00 	bl	8000928 <charge_bump_setting>

    set_display_on();
 8000b28:	f7ff ff2c 	bl	8000984 <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 8000b2c:	f000 f82e 	bl	8000b8c <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f944 	bl	8000dc0 <ssd1306_set_cursor>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e017      	b.n	8000b78 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3b50      	subs	r3, #80	@ 0x50
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff38 	bl	80009c6 <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff1b 	bl	8000992 <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 8000b5c:	2010      	movs	r0, #16
 8000b5e:	f7ff ff25 	bl	80009ac <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <ssd1306_update_screen+0x4c>)
 8000b68:	4413      	add	r3, r2
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fec1 	bl	80008f4 <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	dde4      	ble.n	8000b48 <ssd1306_update_screen+0xc>
    }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000a0 	.word	0x200000a0

08000b8c <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	e007      	b.n	8000ba8 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <ssd1306_black_screen+0x30>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bae:	dbf3      	blt.n	8000b98 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8000bb0:	f7ff ffc4 	bl	8000b3c <ssd1306_update_screen>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000a0 	.word	0x200000a0

08000bc0 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	b2d8      	uxtb	r0, r3
 8000bd8:	4603      	mov	r3, r0
 8000bda:	01db      	lsls	r3, r3, #7
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <ssd1306_black_pixel+0x54>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b259      	sxtb	r1, r3
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	4413      	add	r3, r2
 8000c02:	b2c9      	uxtb	r1, r1
 8000c04:	4a03      	ldr	r2, [pc, #12]	@ (8000c14 <ssd1306_black_pixel+0x54>)
 8000c06:	54d1      	strb	r1, [r2, r3]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	200000a0 	.word	0x200000a0

08000c18 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	4603      	mov	r3, r0
 8000c32:	01db      	lsls	r3, r3, #7
 8000c34:	4413      	add	r3, r2
 8000c36:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <ssd1306_white_pixel+0x50>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	b25a      	sxtb	r2, r3
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b259      	sxtb	r1, r3
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	4603      	mov	r3, r0
 8000c52:	01db      	lsls	r3, r3, #7
 8000c54:	4413      	add	r3, r2
 8000c56:	b2c9      	uxtb	r1, r1
 8000c58:	4a03      	ldr	r2, [pc, #12]	@ (8000c68 <ssd1306_white_pixel+0x50>)
 8000c5a:	54d1      	strb	r1, [r2, r3]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	200000a0 	.word	0x200000a0

08000c6c <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	d902      	bls.n	8000c8a <ssd1306_write_char+0x1e>
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c88:	d901      	bls.n	8000c8e <ssd1306_write_char+0x22>
        return 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e060      	b.n	8000d50 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	7a3b      	ldrb	r3, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	2b80      	cmp	r3, #128	@ 0x80
 8000c9a:	dc06      	bgt.n	8000caa <ssd1306_write_char+0x3e>
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	7a7b      	ldrb	r3, [r7, #9]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	2b40      	cmp	r3, #64	@ 0x40
 8000ca8:	dd01      	ble.n	8000cae <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e050      	b.n	8000d50 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e040      	b.n	8000d36 <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	3b20      	subs	r3, #32
 8000cba:	7a79      	ldrb	r1, [r7, #9]
 8000cbc:	fb03 f101 	mul.w	r1, r3, r1
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	e029      	b.n	8000d26 <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00f      	beq.n	8000d02 <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b2d8      	uxtb	r0, r3
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000cf0:	785a      	ldrb	r2, [r3, #1]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff ff8c 	bl	8000c18 <ssd1306_white_pixel>
 8000d00:	e00e      	b.n	8000d20 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2d8      	uxtb	r0, r3
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000d10:	785a      	ldrb	r2, [r3, #1]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff ff50 	bl	8000bc0 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	3301      	adds	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	7a3b      	ldrb	r3, [r7, #8]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	dbd0      	blt.n	8000cd2 <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	3301      	adds	r3, #1
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	7a7b      	ldrb	r3, [r7, #9]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	dbb9      	blt.n	8000cb4 <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	7a3b      	ldrb	r3, [r7, #8]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <ssd1306_write_char+0xec>)
 8000d4c:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200004a0 	.word	0x200004a0

08000d5c <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d6a:	607a      	str	r2, [r7, #4]
    current_font = font;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <ssd1306_write_string+0x60>)
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d78:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 8000d7c:	e014      	b.n	8000da8 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d8c:	f7ff ff6e 	bl	8000c6c <ssd1306_write_char>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d002      	beq.n	8000da2 <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	e008      	b.n	8000db4 <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
    while(*str)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e6      	bne.n	8000d7e <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200004a4 	.word	0x200004a4

08000dc0 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8000dd0:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <ssd1306_set_cursor+0x28>)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <ssd1306_set_cursor+0x28>)
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	7053      	strb	r3, [r2, #1]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	200004a0 	.word	0x200004a0

08000dec <ssd1306_enter>:

void ssd1306_enter()
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <ssd1306_enter+0x24>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <ssd1306_enter+0x24>)
 8000df8:	785a      	ldrb	r2, [r3, #1]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <ssd1306_enter+0x28>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <ssd1306_enter+0x24>)
 8000e04:	705a      	strb	r2, [r3, #1]
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	200004a0 	.word	0x200004a0
 8000e14:	200004a4 	.word	0x200004a4

08000e18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a29      	ldr	r2, [pc, #164]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <MX_GPIO_Init+0xdc>)
 8000e96:	f000 fe43 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f000 fe3c 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000ea8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_GPIO_Init+0xdc>)
 8000ec2:	f000 fcab 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8000ec6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f000 fc9b 	bl	800181c <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800

08000ef8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000efe:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <MX_I2C2_Init+0x78>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f04:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <MX_I2C2_Init+0x7c>)
 8000f06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f34:	f000 fe0c 	bl	8001b50 <HAL_I2C_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f000 f93c 	bl	80011ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f46:	f001 fa21 	bl	800238c <HAL_I2CEx_ConfigAnalogFilter>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f000 f933 	bl	80011ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_I2C2_Init+0x74>)
 8000f58:	f001 fa63 	bl	8002422 <HAL_I2CEx_ConfigDigitalFilter>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f62:	f000 f92a 	bl	80011ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200004ac 	.word	0x200004ac
 8000f70:	40005800 	.word	0x40005800
 8000f74:	40b285c2 	.word	0x40b285c2

08000f78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	@ 0x70
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2244      	movs	r2, #68	@ 0x44
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fcb3 	bl	8004904 <memset>
  if(i2cHandle->Instance==I2C2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001058 <HAL_I2C_MspInit+0xe0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d153      	bne.n	8001050 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f863 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fc0:	f000 f8fb 	bl	80011ba <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	4a24      	ldr	r2, [pc, #144]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001004:	2304      	movs	r3, #4
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800100c:	4619      	mov	r1, r3
 800100e:	4814      	ldr	r0, [pc, #80]	@ (8001060 <HAL_I2C_MspInit+0xe8>)
 8001010:	f000 fc04 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001018:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001026:	2304      	movs	r3, #4
 8001028:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f000 fbf2 	bl	800181c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 800103e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001042:	6593      	str	r3, [r2, #88]	@ 0x58
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_I2C_MspInit+0xe4>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001050:	bf00      	nop
 8001052:	3770      	adds	r7, #112	@ 0x70
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005800 	.word	0x40005800
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fa61 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f85a 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f7ff fed2 	bl	8000e18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001074:	f000 f8a8 	bl	80011c8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001078:	f7ff ff3e 	bl	8000ef8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800107c:	f000 f98a 	bl	8001394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 8001080:	f7ff fd2f 	bl	8000ae2 <ssd1306_init>

    ssd1306_set_cursor(5, 0);
 8001084:	2100      	movs	r1, #0
 8001086:	2005      	movs	r0, #5
 8001088:	f7ff fe9a 	bl	8000dc0 <ssd1306_set_cursor>

    ssd1306_write_string(font6x8, "G431 ssd1603");
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <main+0xa0>)
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <main+0xa4>)
 8001090:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001094:	f7ff fe62 	bl	8000d5c <ssd1306_write_string>
    ssd1306_enter();
 8001098:	f7ff fea8 	bl	8000dec <ssd1306_enter>
    ssd1306_set_cursor(5, 8);
 800109c:	2108      	movs	r1, #8
 800109e:	2005      	movs	r0, #5
 80010a0:	f7ff fe8e 	bl	8000dc0 <ssd1306_set_cursor>
    ssd1306_write_string(font6x8, "revolution 1.1");
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <main+0xa0>)
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <main+0xa8>)
 80010a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ac:	f7ff fe56 	bl	8000d5c <ssd1306_write_string>

    ssd1306_set_cursor(5, 24);
 80010b0:	2118      	movs	r1, #24
 80010b2:	2005      	movs	r0, #5
 80010b4:	f7ff fe84 	bl	8000dc0 <ssd1306_set_cursor>
    ssd1306_write_string(font6x8, "build BY JANG");
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <main+0xa0>)
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <main+0xac>)
 80010bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010c0:	f7ff fe4c 	bl	8000d5c <ssd1306_write_string>

    ssd1306_set_cursor(5, 40);
 80010c4:	2128      	movs	r1, #40	@ 0x28
 80010c6:	2005      	movs	r0, #5
 80010c8:	f7ff fe7a 	bl	8000dc0 <ssd1306_set_cursor>
    ssd1306_write_string(font11x18, "            ");
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <main+0xb0>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <main+0xb4>)
 80010d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010d4:	f7ff fe42 	bl	8000d5c <ssd1306_write_string>
    ssd1306_update_screen();
 80010d8:	f7ff fd30 	bl	8000b3c <ssd1306_update_screen>

   ST7789_FillScreen(COLOR_BLACK);
   ST7789_FillRect(10, 10, 100, 60, COLOR_YELLOW);
   ST7789_DrawRect(8, 8, 104, 64, COLOR_WHITE);
   ST7789_DrawPixel(120, 120, COLOR_CYAN);*/
   ILI9341_Init();
 80010dc:	f7ff fae6 	bl	80006ac <ILI9341_Init>
   ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f7ff fa85 	bl	80005f0 <ILI9341_Set_Rotation>
   HAL_Delay(100);
 80010e6:	2064      	movs	r0, #100	@ 0x64
 80010e8:	f000 fa92 	bl	8001610 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Transmit(&huart1, buf, 5, 100 );
 80010ec:	2364      	movs	r3, #100	@ 0x64
 80010ee:	2205      	movs	r2, #5
 80010f0:	490a      	ldr	r1, [pc, #40]	@ (800111c <main+0xb8>)
 80010f2:	480b      	ldr	r0, [pc, #44]	@ (8001120 <main+0xbc>)
 80010f4:	f002 fd8a 	bl	8003c0c <HAL_UART_Transmit>
    HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	@ 0x64
 80010fa:	f000 fa89 	bl	8001610 <HAL_Delay>
    HAL_UART_Transmit(&huart1, buf, 5, 100 );
 80010fe:	bf00      	nop
 8001100:	e7f4      	b.n	80010ec <main+0x88>
 8001102:	bf00      	nop
 8001104:	20000004 	.word	0x20000004
 8001108:	08004974 	.word	0x08004974
 800110c:	08004984 	.word	0x08004984
 8001110:	08004994 	.word	0x08004994
 8001114:	2000000c 	.word	0x2000000c
 8001118:	080049a4 	.word	0x080049a4
 800111c:	20000014 	.word	0x20000014
 8001120:	20000564 	.word	0x20000564

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	@ 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	2238      	movs	r2, #56	@ 0x38
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fbe6 	bl	8004904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001146:	2000      	movs	r0, #0
 8001148:	f001 f9b8 	bl	80024bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2340      	movs	r3, #64	@ 0x40
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001162:	2304      	movs	r3, #4
 8001164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001166:	2355      	movs	r3, #85	@ 0x55
 8001168:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fa52 	bl	8002624 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001186:	f000 f818 	bl	80011ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fd50 	bl	8002c48 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ae:	f000 f804 	bl	80011ba <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	@ 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011be:	b672      	cpsid	i
}
 80011c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c2:	bf00      	nop
 80011c4:	e7fd      	b.n	80011c2 <Error_Handler+0x8>
	...

080011c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_SPI1_Init+0x74>)
 80011ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <MX_SPI1_Init+0x78>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_SPI1_Init+0x74>)
 80011d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_SPI1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_SPI1_Init+0x74>)
 80011e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_SPI1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_SPI1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_SPI1_Init+0x74>)
 80011f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_SPI1_Init+0x74>)
 80011fe:	2210      	movs	r2, #16
 8001200:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_SPI1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_SPI1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_SPI1_Init+0x74>)
 8001216:	2207      	movs	r2, #7
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_SPI1_Init+0x74>)
 8001222:	2208      	movs	r2, #8
 8001224:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_SPI1_Init+0x74>)
 8001228:	f002 f91a 	bl	8003460 <HAL_SPI_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001232:	f7ff ffc2 	bl	80011ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000500 	.word	0x20000500
 8001240:	40013000 	.word	0x40013000

08001244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <HAL_SPI_MspInit+0x7c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d128      	bne.n	80012b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 800126c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_SPI_MspInit+0x80>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001296:	23a0      	movs	r3, #160	@ 0xa0
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a6:	2305      	movs	r3, #5
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b4:	f000 fab2 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	@ 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x44>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x44>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012fe:	f001 f981 	bl	8002604 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f935 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <MX_USART1_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013de:	f002 fbc5 	bl	8003b6c <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f7ff fee7 	bl	80011ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 80013f0:	f003 f9be 	bl	8004770 <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f7ff fede 	bl	80011ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 8001402:	f003 f9f3 	bl	80047ec <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f7ff fed5 	bl	80011ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_USART1_UART_Init+0x90>)
 8001412:	f003 f974 	bl	80046fe <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f7ff fecd 	bl	80011ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000564 	.word	0x20000564
 8001428:	40013800 	.word	0x40013800

0800142c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b09a      	sub	sp, #104	@ 0x68
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2244      	movs	r2, #68	@ 0x44
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fa59 	bl	8004904 <memset>
  if(uartHandle->Instance==USART1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1e      	ldr	r2, [pc, #120]	@ (80014d0 <HAL_UART_MspInit+0xa4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d135      	bne.n	80014c8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800145c:	2301      	movs	r3, #1
 800145e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fe09 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001474:	f7ff fea1 	bl	80011ba <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 800147a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147c:	4a15      	ldr	r2, [pc, #84]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001482:	6613      	str	r3, [r2, #96]	@ 0x60
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_UART_MspInit+0xa8>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23c0      	movs	r3, #192	@ 0xc0
 80014aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b8:	2307      	movs	r3, #7
 80014ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UART_MspInit+0xac>)
 80014c4:	f000 f9aa 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3768      	adds	r7, #104	@ 0x68
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000400 	.word	0x48000400

080014dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014dc:	480d      	ldr	r0, [pc, #52]	@ (8001514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff ff46 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f003 fa03 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150e:	f7ff fda9 	bl	8001064 <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   r0, =_estack
 8001514:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001520:	08005d50 	.word	0x08005d50
  ldr r2, =_sbss
 8001524:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001528:	200005fc 	.word	0x200005fc

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>

0800152e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f93d 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	200f      	movs	r0, #15
 8001540:	f000 f80e 	bl	8001560 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e001      	b.n	8001554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001550:	f7ff feba 	bl	80012c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001554:	79fb      	ldrb	r3, [r7, #7]

}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_InitTick+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_InitTick+0x6c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_InitTick+0x68>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f93a 	bl	8001802 <HAL_SYSTICK_Config>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10f      	bne.n	80015b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	d809      	bhi.n	80015ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159a:	2200      	movs	r2, #0
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	f000 f914 	bl	80017ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <HAL_InitTick+0x70>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e007      	b.n	80015be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e004      	b.n	80015be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e001      	b.n	80015be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000080 	.word	0x20000080
 80015cc:	20000078 	.word	0x20000078
 80015d0:	2000007c 	.word	0x2000007c

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_IncTick+0x1c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_IncTick+0x20>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	@ (80015f0 <HAL_IncTick+0x1c>)
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200005f8 	.word	0x200005f8
 80015f4:	20000080 	.word	0x20000080

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200005f8 	.word	0x200005f8

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d004      	beq.n	8001634 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_Delay+0x40>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001634:	bf00      	nop
 8001636:	f7ff ffdf 	bl	80015f8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	429a      	cmp	r2, r3
 8001644:	d8f7      	bhi.n	8001636 <HAL_Delay+0x26>
  {
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000080 	.word	0x20000080

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff47 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff5e 	bl	800169c <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffb2 	bl	8001774 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	e15a      	b.n	8001ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 814c 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a6 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b5b      	ldr	r3, [pc, #364]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	4a5a      	ldr	r2, [pc, #360]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6613      	str	r3, [r2, #96]	@ 0x60
 800199c:	4b58      	ldr	r3, [pc, #352]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	@ (8001b14 <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	@ (8001b04 <HAL_GPIO_Init+0x2e8>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a34:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a58:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad6:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae9d 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e08d      	b.n	8001c7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff f9fe 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	e006      	b.n	8001bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d108      	bne.n	8001bf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	e007      	b.n	8001c02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69d9      	ldr	r1, [r3, #28]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	817b      	strh	r3, [r7, #10]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	813b      	strh	r3, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	f040 80f9 	bne.w	8001ea2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_I2C_Mem_Write+0x34>
 8001cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0ed      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Mem_Write+0x4e>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0e6      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cde:	f7ff fc8b 	bl	80015f8 <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2319      	movs	r3, #25
 8001cea:	2201      	movs	r2, #1
 8001cec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f955 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0d1      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2221      	movs	r2, #33	@ 0x21
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2240      	movs	r2, #64	@ 0x40
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a3a      	ldr	r2, [r7, #32]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d28:	88f8      	ldrh	r0, [r7, #6]
 8001d2a:	893a      	ldrh	r2, [r7, #8]
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	4603      	mov	r3, r0
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f8b9 	bl	8001eb0 <I2C_RequestMemoryWrite>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0a9      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2bff      	cmp	r3, #255	@ 0xff
 8001d58:	d90e      	bls.n	8001d78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	22ff      	movs	r2, #255	@ 0xff
 8001d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	8979      	ldrh	r1, [r7, #10]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fad9 	bl	8002328 <I2C_TransferConfig>
 8001d76:	e00f      	b.n	8001d98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	8979      	ldrh	r1, [r7, #10]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fac8 	bl	8002328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f958 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e07b      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d034      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x1c8>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d130      	bne.n	8001e50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	2200      	movs	r2, #0
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f8d1 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04d      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2bff      	cmp	r3, #255	@ 0xff
 8001e10:	d90e      	bls.n	8001e30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	22ff      	movs	r2, #255	@ 0xff
 8001e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	8979      	ldrh	r1, [r7, #10]
 8001e20:	2300      	movs	r3, #0
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fa7d 	bl	8002328 <I2C_TransferConfig>
 8001e2e:	e00f      	b.n	8001e50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	8979      	ldrh	r1, [r7, #10]
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa6c 	bl	8002328 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d19e      	bne.n	8001d98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f93e 	bl	80020e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01a      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_I2C_Mem_Write+0x224>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	fe00e800 	.word	0xfe00e800

08001eb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	817b      	strh	r3, [r7, #10]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	813b      	strh	r3, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <I2C_RequestMemoryWrite+0xa4>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa25 	bl	8002328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f8b5 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e02c      	b.n	8001f4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef8:	893b      	ldrh	r3, [r7, #8]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f02:	e015      	b.n	8001f30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f04:	893b      	ldrh	r3, [r7, #8]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f89b 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e012      	b.n	8001f4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f26:	893b      	ldrh	r3, [r7, #8]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2180      	movs	r1, #128	@ 0x80
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f830 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	80002000 	.word	0x80002000

08001f58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d103      	bne.n	8001f76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d007      	beq.n	8001f94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	619a      	str	r2, [r3, #24]
  }
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb0:	e03b      	b.n	800202a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f8d6 	bl	8002168 <I2C_IsErrorOccurred>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e041      	b.n	800204a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d02d      	beq.n	800202a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7ff fb13 	bl	80015f8 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d122      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4013      	ands	r3, r2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d113      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	429a      	cmp	r2, r3
 8002046:	d0b4      	beq.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205e:	e033      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f87f 	bl	8002168 <I2C_IsErrorOccurred>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e031      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d025      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207c:	f7ff fabc 	bl	80015f8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11a      	bne.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d013      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e007      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d1c4      	bne.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ec:	e02f      	b.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f838 	bl	8002168 <I2C_IsErrorOccurred>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e02d      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7ff fa79 	bl	80015f8 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11a      	bne.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d013      	beq.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d1c8      	bne.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d068      	beq.n	8002266 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219c:	e049      	b.n	8002232 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d045      	beq.n	8002232 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff fa27 	bl	80015f8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_IsErrorOccurred+0x54>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13a      	bne.n	8002232 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021de:	d121      	bne.n	8002224 <I2C_IsErrorOccurred+0xbc>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e6:	d01d      	beq.n	8002224 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d01a      	beq.n	8002224 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021fe:	f7ff f9fb 	bl	80015f8 <HAL_GetTick>
 8002202:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002204:	e00e      	b.n	8002224 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002206:	f7ff f9f7 	bl	80015f8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b19      	cmp	r3, #25
 8002212:	d907      	bls.n	8002224 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002222:	e006      	b.n	8002232 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d1e9      	bne.n	8002206 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d003      	beq.n	8002248 <I2C_IsErrorOccurred+0xe0>
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0aa      	beq.n	800219e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80022d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01c      	beq.n	8002316 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fe3b 	bl	8001f58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <I2C_IsErrorOccurred+0x1bc>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800231a:	4618      	mov	r0, r3
 800231c:	3728      	adds	r7, #40	@ 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	fe00e800 	.word	0xfe00e800

08002328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	4613      	mov	r3, r2
 8002338:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002340:	7a7b      	ldrb	r3, [r7, #9]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002348:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	4313      	orrs	r3, r2
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002356:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <I2C_TransferConfig+0x60>)
 8002368:	430b      	orrs	r3, r1
 800236a:	43db      	mvns	r3, r3
 800236c:	ea02 0103 	and.w	r1, r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	03ff63ff 	.word	0x03ff63ff

0800238c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d138      	bne.n	8002414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e032      	b.n	8002416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	d139      	bne.n	80024ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002442:	2302      	movs	r3, #2
 8002444:	e033      	b.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2224      	movs	r2, #36	@ 0x24
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d141      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b4b      	ldr	r3, [pc, #300]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d131      	bne.n	800253c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024d8:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024de:	4a46      	ldr	r2, [pc, #280]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e8:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024f0:	4a41      	ldr	r2, [pc, #260]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024f8:	4b40      	ldr	r3, [pc, #256]	@ (80025fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2232      	movs	r2, #50	@ 0x32
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	4a3f      	ldr	r2, [pc, #252]	@ (8002600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800250e:	e002      	b.n	8002516 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3b01      	subs	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002516:	4b38      	ldr	r3, [pc, #224]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002522:	d102      	bne.n	800252a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f2      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252a:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002536:	d158      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e057      	b.n	80025ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800253c:	4b2e      	ldr	r3, [pc, #184]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002542:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800254c:	e04d      	b.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002554:	d141      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002556:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002562:	d131      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256a:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002574:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800257c:	4a1e      	ldr	r2, [pc, #120]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002584:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2232      	movs	r2, #50	@ 0x32
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	3301      	adds	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259a:	e002      	b.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3b01      	subs	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ae:	d102      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f2      	bne.n	800259c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c2:	d112      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e011      	b.n	80025ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025d8:	e007      	b.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40007000 	.word	0x40007000
 80025fc:	20000078 	.word	0x20000078
 8002600:	431bde83 	.word	0x431bde83

08002604 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800260e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002612:	6093      	str	r3, [r2, #8]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40007000 	.word	0x40007000

08002624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e2fe      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d075      	beq.n	800272e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4b97      	ldr	r3, [pc, #604]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	4b94      	ldr	r3, [pc, #592]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d102      	bne.n	8002662 <HAL_RCC_OscConfig+0x3e>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d002      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b8d      	ldr	r3, [pc, #564]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05b      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2d9      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x74>
 800268a:	4b85      	ldr	r3, [pc, #532]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a84      	ldr	r2, [pc, #528]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b7f      	ldr	r3, [pc, #508]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7e      	ldr	r2, [pc, #504]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b7c      	ldr	r3, [pc, #496]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7b      	ldr	r2, [pc, #492]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 80026bc:	4b78      	ldr	r3, [pc, #480]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a77      	ldr	r2, [pc, #476]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a74      	ldr	r2, [pc, #464]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff8c 	bl	80015f8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe ff88 	bl	80015f8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e29e      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b6a      	ldr	r3, [pc, #424]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe ff78 	bl	80015f8 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe ff74 	bl	80015f8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e28a      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d075      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b59      	ldr	r3, [pc, #356]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002744:	4b56      	ldr	r3, [pc, #344]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d102      	bne.n	800275a <HAL_RCC_OscConfig+0x136>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d002      	beq.n	8002760 <HAL_RCC_OscConfig+0x13c>
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11f      	bne.n	80027a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	4b4f      	ldr	r3, [pc, #316]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x154>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e25d      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	4946      	ldr	r1, [pc, #280]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800278c:	4b45      	ldr	r3, [pc, #276]	@ (80028a4 <HAL_RCC_OscConfig+0x280>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fee5 	bl	8001560 <HAL_InitTick>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d043      	beq.n	8002824 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e249      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a8:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3c      	ldr	r2, [pc, #240]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff20 	bl	80015f8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe ff1c 	bl	80015f8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e232      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	492d      	ldr	r1, [pc, #180]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
 80027ee:	e01a      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 80027f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fefc 	bl	80015f8 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe fef8 	bl	80015f8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e20e      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002816:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x1e0>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d041      	beq.n	80028b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01c      	beq.n	8002874 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fed5 	bl	80015f8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe fed1 	bl	80015f8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1e7      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <HAL_RCC_OscConfig+0x22e>
 8002872:	e020      	b.n	80028b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe feb8 	bl	80015f8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288a:	e00d      	b.n	80028a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe feb4 	bl	80015f8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d906      	bls.n	80028a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1ca      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a8:	4b8c      	ldr	r3, [pc, #560]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ea      	bne.n	800288c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80a6 	beq.w	8002a10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028c8:	4b84      	ldr	r3, [pc, #528]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2b4>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x2b6>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b7f      	ldr	r3, [pc, #508]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	4a7e      	ldr	r2, [pc, #504]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ea:	4b7c      	ldr	r3, [pc, #496]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fa:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_OscConfig+0x4bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002906:	4b76      	ldr	r3, [pc, #472]	@ (8002ae0 <HAL_RCC_OscConfig+0x4bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	@ (8002ae0 <HAL_RCC_OscConfig+0x4bc>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe fe71 	bl	80015f8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe fe6d 	bl	80015f8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e183      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae0 <HAL_RCC_OscConfig+0x4bc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_RCC_OscConfig+0x32e>
 8002940:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002950:	e024      	b.n	800299c <HAL_RCC_OscConfig+0x378>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d110      	bne.n	800297c <HAL_RCC_OscConfig+0x358>
 800295a:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002960:	4a5e      	ldr	r2, [pc, #376]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800296a:	4b5c      	ldr	r3, [pc, #368]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	4a5a      	ldr	r2, [pc, #360]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x378>
 800297c:	4b57      	ldr	r3, [pc, #348]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	4a56      	ldr	r2, [pc, #344]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d016      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fe28 	bl	80015f8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fe24 	bl	80015f8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e138      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	4b46      	ldr	r3, [pc, #280]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ed      	beq.n	80029ac <HAL_RCC_OscConfig+0x388>
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fe11 	bl	80015f8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe fe0d 	bl	80015f8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e121      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ed      	bne.n	80029da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b35      	ldr	r3, [pc, #212]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	4a34      	ldr	r2, [pc, #208]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a24:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fde0 	bl	80015f8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3c:	f7fe fddc 	bl	80015f8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0f2      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a4e:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ef      	beq.n	8002a3c <HAL_RCC_OscConfig+0x418>
 8002a5c:	e01b      	b.n	8002a96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a64:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fdc3 	bl	80015f8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a76:	f7fe fdbf 	bl	80015f8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0d5      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80c9 	beq.w	8002c32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	f000 8083 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d15e      	bne.n	8002b74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_RCC_OscConfig+0x4b8>)
 8002abc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fd99 	bl	80015f8 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac8:	e00c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fd95 	bl	80015f8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d905      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0ab      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	4b55      	ldr	r3, [pc, #340]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ec      	bne.n	8002aca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af0:	4b52      	ldr	r3, [pc, #328]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <HAL_RCC_OscConfig+0x61c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6a11      	ldr	r1, [r2, #32]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b00:	3a01      	subs	r2, #1
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b0a:	0212      	lsls	r2, r2, #8
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b12:	0852      	lsrs	r2, r2, #1
 8002b14:	3a01      	subs	r2, #1
 8002b16:	0552      	lsls	r2, r2, #21
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b1e:	0852      	lsrs	r2, r2, #1
 8002b20:	3a01      	subs	r2, #1
 8002b22:	0652      	lsls	r2, r2, #25
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b2a:	06d2      	lsls	r2, r2, #27
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	4943      	ldr	r1, [pc, #268]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a40      	ldr	r2, [pc, #256]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b40:	4b3e      	ldr	r3, [pc, #248]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a3d      	ldr	r2, [pc, #244]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd54 	bl	80015f8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fd50 	bl	80015f8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e066      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	4b35      	ldr	r3, [pc, #212]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x530>
 8002b72:	e05e      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fd3a 	bl	80015f8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fd36 	bl	80015f8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04c      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9a:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ba6:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	4924      	ldr	r1, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_RCC_OscConfig+0x620>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60cb      	str	r3, [r1, #12]
 8002bb2:	e03e      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e039      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d12c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d123      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d113      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	019f800c 	.word	0x019f800c
 8002c44:	feeefffc 	.word	0xfeeefffc

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e11e      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b91      	ldr	r3, [pc, #580]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	498c      	ldr	r1, [pc, #560]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e106      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d073      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d129      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca4:	4b81      	ldr	r3, [pc, #516]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0f4      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cb4:	f000 f99e 	bl	8002ff4 <RCC_GetSysClockFreqFromPLLSource>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb0 <HAL_RCC_ClockConfig+0x268>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d93f      	bls.n	8002d42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d033      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d12f      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ce2:	4b72      	ldr	r3, [pc, #456]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cea:	4a70      	ldr	r2, [pc, #448]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e024      	b.n	8002d42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0c6      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d10:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0be      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d20:	f000 f8ce 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4a61      	ldr	r2, [pc, #388]	@ (8002eb0 <HAL_RCC_ClockConfig+0x268>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d909      	bls.n	8002d42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d36:	4a5d      	ldr	r2, [pc, #372]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4957      	ldr	r1, [pc, #348]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d54:	f7fe fc50 	bl	80015f8 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fc4c 	bl	80015f8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e095      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d023      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b43      	ldr	r3, [pc, #268]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a42      	ldr	r2, [pc, #264]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002da6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002db4:	4b3d      	ldr	r3, [pc, #244]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002dbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4936      	ldr	r1, [pc, #216]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dde:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4a32      	ldr	r2, [pc, #200]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002de8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d21d      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 020f 	bic.w	r2, r3, #15
 8002e00:	4929      	ldr	r1, [pc, #164]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fbf6 	bl	80015f8 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fbf2 	bl	80015f8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e03b      	b.n	8002e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1ed      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4917      	ldr	r1, [pc, #92]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490f      	ldr	r1, [pc, #60]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e72:	f000 f825 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <HAL_RCC_ClockConfig+0x26c>)
 8002e84:	5ccb      	ldrb	r3, [r1, r3]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <HAL_RCC_ClockConfig+0x270>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_ClockConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fb62 	bl	8001560 <HAL_InitTick>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	04c4b400 	.word	0x04c4b400
 8002eb4:	08005d00 	.word	0x08005d00
 8002eb8:	20000078 	.word	0x20000078
 8002ebc:	2000007c 	.word	0x2000007c

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e047      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ed8:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d102      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e03e      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d136      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f14:	4a1a      	ldr	r2, [pc, #104]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	4a16      	ldr	r2, [pc, #88]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1e:	68d2      	ldr	r2, [r2, #12]
 8002f20:	0a12      	lsrs	r2, r2, #8
 8002f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	617b      	str	r3, [r7, #20]
      break;
 8002f2c:	e00c      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2e:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	0a12      	lsrs	r2, r2, #8
 8002f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
      break;
 8002f46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0e5b      	lsrs	r3, r3, #25
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e001      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f68:	693b      	ldr	r3, [r7, #16]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	007a1200 	.word	0x007a1200

08002f84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000078 	.word	0x20000078

08002f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fa0:	f7ff fff0 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08005d10 	.word	0x08005d10

08002fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fcc:	f7ff ffda 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4904      	ldr	r1, [pc, #16]	@ (8002ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08005d10 	.word	0x08005d10

08002ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d10c      	bne.n	8003032 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003018:	4a17      	ldr	r2, [pc, #92]	@ (8003078 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	0a12      	lsrs	r2, r2, #8
 8003026:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
    break;
 8003030:	e00c      	b.n	800304c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4a0e      	ldr	r2, [pc, #56]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	0a12      	lsrs	r2, r2, #8
 8003040:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    break;
 800304a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0e5b      	lsrs	r3, r3, #25
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003066:	687b      	ldr	r3, [r7, #4]
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	00f42400 	.word	0x00f42400

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003088:	2300      	movs	r3, #0
 800308a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800308c:	2300      	movs	r3, #0
 800308e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8098 	beq.w	80031ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b43      	ldr	r3, [pc, #268]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	4a3f      	ldr	r2, [pc, #252]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ca:	4b3a      	ldr	r3, [pc, #232]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a39      	ldr	r2, [pc, #228]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fa8f 	bl	80015f8 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fa8b 	bl	80015f8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
        break;
 80030f0:	e005      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f2:	4b30      	ldr	r3, [pc, #192]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ef      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d159      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003104:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01e      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	d019      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003132:	4a1f      	ldr	r2, [pc, #124]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313c:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800314c:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fa4b 	bl	80015f8 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003164:	e00b      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe fa47 	bl	80015f8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d902      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	74fb      	strb	r3, [r7, #19]
            break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317e:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ec      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	4903      	ldr	r1, [pc, #12]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031a8:	e008      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4ba6      	ldr	r3, [pc, #664]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4aa5      	ldr	r2, [pc, #660]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4ba0      	ldr	r3, [pc, #640]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	499c      	ldr	r1, [pc, #624]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	4b97      	ldr	r3, [pc, #604]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f023 020c 	bic.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4994      	ldr	r1, [pc, #592]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321e:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	498b      	ldr	r1, [pc, #556]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	4b86      	ldr	r3, [pc, #536]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	4983      	ldr	r1, [pc, #524]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003262:	4b7e      	ldr	r3, [pc, #504]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	497a      	ldr	r1, [pc, #488]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003284:	4b75      	ldr	r3, [pc, #468]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4972      	ldr	r1, [pc, #456]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032a6:	4b6d      	ldr	r3, [pc, #436]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4969      	ldr	r1, [pc, #420]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c8:	4b64      	ldr	r3, [pc, #400]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4961      	ldr	r1, [pc, #388]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ea:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	4958      	ldr	r1, [pc, #352]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330c:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	4950      	ldr	r1, [pc, #320]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003336:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003344:	4b45      	ldr	r3, [pc, #276]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	4942      	ldr	r1, [pc, #264]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003362:	d105      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a3c      	ldr	r2, [pc, #240]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800336e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800337c:	4b37      	ldr	r3, [pc, #220]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4934      	ldr	r1, [pc, #208]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b2f      	ldr	r3, [pc, #188]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a2e      	ldr	r2, [pc, #184]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	4b29      	ldr	r3, [pc, #164]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c2:	4926      	ldr	r1, [pc, #152]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033d2:	d105      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a20      	ldr	r2, [pc, #128]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d015      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	4918      	ldr	r1, [pc, #96]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800340a:	d105      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a12      	ldr	r2, [pc, #72]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003424:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003432:	490a      	ldr	r1, [pc, #40]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003442:	d105      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003450:	7cbb      	ldrb	r3, [r7, #18]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e09d      	b.n	80035ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003482:	d009      	beq.n	8003498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	e005      	b.n	8003498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fec6 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d8:	d902      	bls.n	80034e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e002      	b.n	80034e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034ee:	d007      	beq.n	8003500 <HAL_SPI_Init+0xa0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	ea42 0103 	orr.w	r1, r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	f003 0204 	and.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800357c:	ea42 0103 	orr.w	r1, r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800359c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c6:	f7fe f817 	bl	80015f8 <HAL_GetTick>
 80035ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d001      	beq.n	80035e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
 80035de:	e15c      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x36>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e154      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_SPI_Transmit+0x48>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e14d      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003650:	d10f      	bne.n	8003672 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d007      	beq.n	8003690 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003698:	d952      	bls.n	8003740 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0xf2>
 80036a2:	8b7b      	ldrh	r3, [r7, #26]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d145      	bne.n	8003734 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036cc:	e032      	b.n	8003734 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d112      	bne.n	8003702 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003700:	e018      	b.n	8003734 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003702:	f7fd ff79 	bl	80015f8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_Transmit+0x164>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Transmit+0x16a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0b2      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1c7      	bne.n	80036ce <HAL_SPI_Transmit+0x118>
 800373e:	e083      	b.n	8003848 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit+0x198>
 8003748:	8b7b      	ldrh	r3, [r7, #26]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d177      	bne.n	800383e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d912      	bls.n	800377e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b02      	subs	r3, #2
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800377c:	e05f      	b.n	800383e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037a4:	e04b      	b.n	800383e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d12b      	bne.n	800380c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d912      	bls.n	80037e4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b02      	subs	r3, #2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e2:	e02c      	b.n	800383e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800380a:	e018      	b.n	800383e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800380c:	f7fd fef4 	bl	80015f8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d803      	bhi.n	8003824 <HAL_SPI_Transmit+0x26e>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d102      	bne.n	800382a <HAL_SPI_Transmit+0x274>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e02d      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ae      	bne.n	80037a6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f947 	bl	8003ae0 <SPI_EndRxTxTransaction>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003898:	2300      	movs	r3, #0
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038b4:	f7fd fea0 	bl	80015f8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038c4:	f7fd fe98 	bl	80015f8 <HAL_GetTick>
 80038c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ca:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	0d1b      	lsrs	r3, r3, #20
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038da:	e054      	b.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d050      	beq.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038e4:	f7fd fe88 	bl	80015f8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d13d      	bne.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003912:	d111      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800391c:	d004      	beq.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003926:	d107      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003940:	d10f      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e017      	b.n	80039a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d19b      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000078 	.word	0x20000078

080039b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	@ 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039c6:	f7fd fe17 	bl	80015f8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039d6:	f7fd fe0f 	bl	80015f8 <HAL_GetTick>
 80039da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039e4:	4b3d      	ldr	r3, [pc, #244]	@ (8003adc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	0d1b      	lsrs	r3, r3, #20
 80039f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039fc:	e060      	b.n	8003ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a04:	d107      	bne.n	8003a16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d050      	beq.n	8003ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a1e:	f7fd fdeb 	bl	80015f8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d902      	bls.n	8003a34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d13d      	bne.n	8003ab0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4c:	d111      	bne.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a56:	d004      	beq.n	8003a62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a60:	d107      	bne.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7a:	d10f      	bne.n	8003a9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e010      	b.n	8003ad2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d196      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	@ 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000078 	.word	0x20000078

08003ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff ff5b 	bl	80039b4 <SPI_WaitFifoStateUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e027      	b.n	8003b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2180      	movs	r1, #128	@ 0x80
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff fec0 	bl	80038a4 <SPI_WaitFlagStateUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e014      	b.n	8003b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff34 	bl	80039b4 <SPI_WaitFifoStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e000      	b.n	8003b64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e042      	b.n	8003c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd fc4b 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2224      	movs	r2, #36	@ 0x24
 8003b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb82 	bl	80042c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8b3 	bl	8003d28 <UART_SetConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01b      	b.n	8003c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fc01 	bl	8004404 <UART_CheckIdleState>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	@ 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d17b      	bne.n	8003d1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Transmit+0x26>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e074      	b.n	8003d20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	@ 0x21
 8003c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fcd7 	bl	80015f8 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c64:	d108      	bne.n	8003c78 <HAL_UART_Transmit+0x6c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e003      	b.n	8003c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c80:	e030      	b.n	8003ce4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fc63 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e03d      	b.n	8003d20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e007      	b.n	8003cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1c8      	bne.n	8003c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2140      	movs	r1, #64	@ 0x40
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fc2c 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e006      	b.n	8003d20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d2c:	b08c      	sub	sp, #48	@ 0x30
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4bab      	ldr	r3, [pc, #684]	@ (8004004 <UART_SetConfig+0x2dc>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4aa0      	ldr	r2, [pc, #640]	@ (8004008 <UART_SetConfig+0x2e0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d90:	4313      	orrs	r3, r2
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	f023 010f 	bic.w	r1, r3, #15
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a91      	ldr	r2, [pc, #580]	@ (800400c <UART_SetConfig+0x2e4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d125      	bne.n	8003e18 <UART_SetConfig+0xf0>
 8003dcc:	4b90      	ldr	r3, [pc, #576]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d81a      	bhi.n	8003e10 <UART_SetConfig+0xe8>
 8003dda:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0xb8>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e0d6      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e0d2      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e0ce      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0e:	e0ca      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e16:	e0c6      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8004014 <UART_SetConfig+0x2ec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d138      	bne.n	8003e94 <UART_SetConfig+0x16c>
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d82d      	bhi.n	8003e8c <UART_SetConfig+0x164>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x110>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e85 	.word	0x08003e85
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e098      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e74:	2302      	movs	r3, #2
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e094      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e090      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e84:	2308      	movs	r3, #8
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8a:	e08c      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e92:	e088      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5f      	ldr	r2, [pc, #380]	@ (8004018 <UART_SetConfig+0x2f0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d125      	bne.n	8003eea <UART_SetConfig+0x1c2>
 8003e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d016      	beq.n	8003eda <UART_SetConfig+0x1b2>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d818      	bhi.n	8003ee2 <UART_SetConfig+0x1ba>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d00a      	beq.n	8003eca <UART_SetConfig+0x1a2>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d814      	bhi.n	8003ee2 <UART_SetConfig+0x1ba>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <UART_SetConfig+0x19a>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d008      	beq.n	8003ed2 <UART_SetConfig+0x1aa>
 8003ec0:	e00f      	b.n	8003ee2 <UART_SetConfig+0x1ba>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec8:	e06d      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed0:	e069      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed8:	e065      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003eda:	2308      	movs	r3, #8
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee0:	e061      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee8:	e05d      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4b      	ldr	r2, [pc, #300]	@ (800401c <UART_SetConfig+0x2f4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d125      	bne.n	8003f40 <UART_SetConfig+0x218>
 8003ef4:	4b46      	ldr	r3, [pc, #280]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f00:	d016      	beq.n	8003f30 <UART_SetConfig+0x208>
 8003f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f04:	d818      	bhi.n	8003f38 <UART_SetConfig+0x210>
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d00a      	beq.n	8003f20 <UART_SetConfig+0x1f8>
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d814      	bhi.n	8003f38 <UART_SetConfig+0x210>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x1f0>
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d008      	beq.n	8003f28 <UART_SetConfig+0x200>
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x210>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1e:	e042      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f26:	e03e      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2e:	e03a      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f36:	e036      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3e:	e032      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a30      	ldr	r2, [pc, #192]	@ (8004008 <UART_SetConfig+0x2e0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12a      	bne.n	8003fa0 <UART_SetConfig+0x278>
 8003f4a:	4b31      	ldr	r3, [pc, #196]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0x268>
 8003f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0x270>
 8003f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f64:	d00c      	beq.n	8003f80 <UART_SetConfig+0x258>
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6a:	d815      	bhi.n	8003f98 <UART_SetConfig+0x270>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <UART_SetConfig+0x250>
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f74:	d008      	beq.n	8003f88 <UART_SetConfig+0x260>
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x270>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7e:	e012      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f86:	e00e      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e00a      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f96:	e006      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9e:	e002      	b.n	8003fa6 <UART_SetConfig+0x27e>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a17      	ldr	r2, [pc, #92]	@ (8004008 <UART_SetConfig+0x2e0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	f040 80a8 	bne.w	8004102 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d834      	bhi.n	8004024 <UART_SetConfig+0x2fc>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <UART_SetConfig+0x298>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08003fed 	.word	0x08003fed
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08003ff3 	.word	0x08003ff3
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	08004025 	.word	0x08004025
 8003fe0:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe ffda 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 8003fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fea:	e021      	b.n	8004030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <UART_SetConfig+0x2f8>)
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff0:	e01e      	b.n	8004030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7fe ff65 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8003ff6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ff8:	e01a      	b.n	8004030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004000:	e016      	b.n	8004030 <UART_SetConfig+0x308>
 8004002:	bf00      	nop
 8004004:	cfff69f3 	.word	0xcfff69f3
 8004008:	40008000 	.word	0x40008000
 800400c:	40013800 	.word	0x40013800
 8004010:	40021000 	.word	0x40021000
 8004014:	40004400 	.word	0x40004400
 8004018:	40004800 	.word	0x40004800
 800401c:	40004c00 	.word	0x40004c00
 8004020:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800402e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 812a 	beq.w	800428c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	4a9e      	ldr	r2, [pc, #632]	@ (80042b8 <UART_SetConfig+0x590>)
 800403e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004042:	461a      	mov	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	fbb3 f3f2 	udiv	r3, r3, r2
 800404a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d305      	bcc.n	8004068 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d903      	bls.n	8004070 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800406e:	e10d      	b.n	800428c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	2200      	movs	r2, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	4a8e      	ldr	r2, [pc, #568]	@ (80042b8 <UART_SetConfig+0x590>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	b29b      	uxth	r3, r3
 8004084:	2200      	movs	r2, #0
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004092:	f7fc f8c1 	bl	8000218 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	020b      	lsls	r3, r1, #8
 80040a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040ac:	0202      	lsls	r2, r0, #8
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	6849      	ldr	r1, [r1, #4]
 80040b2:	0849      	lsrs	r1, r1, #1
 80040b4:	2000      	movs	r0, #0
 80040b6:	460c      	mov	r4, r1
 80040b8:	4605      	mov	r5, r0
 80040ba:	eb12 0804 	adds.w	r8, r2, r4
 80040be:	eb43 0905 	adc.w	r9, r3, r5
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	469a      	mov	sl, r3
 80040ca:	4693      	mov	fp, r2
 80040cc:	4652      	mov	r2, sl
 80040ce:	465b      	mov	r3, fp
 80040d0:	4640      	mov	r0, r8
 80040d2:	4649      	mov	r1, r9
 80040d4:	f7fc f8a0 	bl	8000218 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4613      	mov	r3, r2
 80040de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e6:	d308      	bcc.n	80040fa <UART_SetConfig+0x3d2>
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ee:	d204      	bcs.n	80040fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e0c8      	b.n	800428c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004100:	e0c4      	b.n	800428c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410a:	d167      	bne.n	80041dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800410c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004110:	2b08      	cmp	r3, #8
 8004112:	d828      	bhi.n	8004166 <UART_SetConfig+0x43e>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0x3f4>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	08004167 	.word	0x08004167
 800412c:	08004157 	.word	0x08004157
 8004130:	08004167 	.word	0x08004167
 8004134:	08004167 	.word	0x08004167
 8004138:	08004167 	.word	0x08004167
 800413c:	0800415f 	.word	0x0800415f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fe ff2c 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004146:	e014      	b.n	8004172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe ff3e 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 800414c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800414e:	e010      	b.n	8004172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004150:	4b5a      	ldr	r3, [pc, #360]	@ (80042bc <UART_SetConfig+0x594>)
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004154:	e00d      	b.n	8004172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004156:	f7fe feb3 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 800415a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800415c:	e009      	b.n	8004172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004164:	e005      	b.n	8004172 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8089 	beq.w	800428c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	4a4e      	ldr	r2, [pc, #312]	@ (80042b8 <UART_SetConfig+0x590>)
 8004180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004184:	461a      	mov	r2, r3
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	fbb3 f3f2 	udiv	r3, r3, r2
 800418c:	005a      	lsls	r2, r3, #1
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	441a      	add	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	d916      	bls.n	80041d4 <UART_SetConfig+0x4ac>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d212      	bcs.n	80041d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f023 030f 	bic.w	r3, r3, #15
 80041b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	8bfb      	ldrh	r3, [r7, #30]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	8bfa      	ldrh	r2, [r7, #30]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e05b      	b.n	800428c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041da:	e057      	b.n	800428c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d828      	bhi.n	8004236 <UART_SetConfig+0x50e>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0x4c4>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
 800420c:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe fec4 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 8004214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004216:	e014      	b.n	8004242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe fed6 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 800421c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <UART_SetConfig+0x594>)
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe fe4b 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 800422a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004240:	bf00      	nop
    }

    if (pclk != 0U)
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d021      	beq.n	800428c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	4a1a      	ldr	r2, [pc, #104]	@ (80042b8 <UART_SetConfig+0x590>)
 800424e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004252:	461a      	mov	r2, r3
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	fbb3 f2f2 	udiv	r2, r3, r2
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d909      	bls.n	8004286 <UART_SetConfig+0x55e>
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	b29a      	uxth	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2201      	movs	r2, #1
 8004290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3730      	adds	r7, #48	@ 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	08005d18 	.word	0x08005d18
 80042bc:	00f42400 	.word	0x00f42400

080042c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043be:	d10a      	bne.n	80043d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b098      	sub	sp, #96	@ 0x60
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004414:	f7fd f8f0 	bl	80015f8 <HAL_GetTick>
 8004418:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b08      	cmp	r3, #8
 8004426:	d12f      	bne.n	8004488 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	2200      	movs	r2, #0
 8004432:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f88e 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d022      	beq.n	8004488 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004456:	653b      	str	r3, [r7, #80]	@ 0x50
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
 8004462:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800446e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e063      	b.n	8004550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d149      	bne.n	800452a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004496:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f857 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d03c      	beq.n	800452a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	623b      	str	r3, [r7, #32]
   return(result);
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e6      	bne.n	80044b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	617b      	str	r3, [r7, #20]
   return(result);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e012      	b.n	8004550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3758      	adds	r7, #88	@ 0x58
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	e04f      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d04b      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fd f841 	bl	80015f8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e04e      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d037      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b80      	cmp	r3, #128	@ 0x80
 800459e:	d034      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d031      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d110      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2208      	movs	r2, #8
 80045ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f838 	bl	8004632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2208      	movs	r2, #8
 80045c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e029      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e4:	d111      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f81e 	bl	8004632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e00f      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d0a0      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b095      	sub	sp, #84	@ 0x54
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004658:	643b      	str	r3, [r7, #64]	@ 0x40
 800465a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	61fb      	str	r3, [r7, #28]
   return(result);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3308      	adds	r3, #8
 800468e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d118      	bne.n	80046de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f023 0310 	bic.w	r3, r3, #16
 80046c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6979      	ldr	r1, [r7, #20]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	613b      	str	r3, [r7, #16]
   return(result);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046f2:	bf00      	nop
 80046f4:	3754      	adds	r7, #84	@ 0x54
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_UARTEx_DisableFifoMode+0x16>
 8004710:	2302      	movs	r3, #2
 8004712:	e027      	b.n	8004764 <HAL_UARTEx_DisableFifoMode+0x66>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	@ 0x24
 8004720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004742:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e02d      	b.n	80047e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	@ 0x24
 8004794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f84f 	bl	8004868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e02d      	b.n	8004860 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2224      	movs	r2, #36	@ 0x24
 8004810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f811 	bl	8004868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004888:	e031      	b.n	80048ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800488a:	2308      	movs	r3, #8
 800488c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800488e:	2308      	movs	r3, #8
 8004890:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	0e5b      	lsrs	r3, r3, #25
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0f5b      	lsrs	r3, r3, #29
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	7b3a      	ldrb	r2, [r7, #12]
 80048b6:	4911      	ldr	r1, [pc, #68]	@ (80048fc <UARTEx_SetNbDataToProcess+0x94>)
 80048b8:	5c8a      	ldrb	r2, [r1, r2]
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048be:	7b3a      	ldrb	r2, [r7, #12]
 80048c0:	490f      	ldr	r1, [pc, #60]	@ (8004900 <UARTEx_SetNbDataToProcess+0x98>)
 80048c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	7b7a      	ldrb	r2, [r7, #13]
 80048d4:	4909      	ldr	r1, [pc, #36]	@ (80048fc <UARTEx_SetNbDataToProcess+0x94>)
 80048d6:	5c8a      	ldrb	r2, [r1, r2]
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048dc:	7b7a      	ldrb	r2, [r7, #13]
 80048de:	4908      	ldr	r1, [pc, #32]	@ (8004900 <UARTEx_SetNbDataToProcess+0x98>)
 80048e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	08005d30 	.word	0x08005d30
 8004900:	08005d38 	.word	0x08005d38

08004904 <memset>:
 8004904:	4402      	add	r2, r0
 8004906:	4603      	mov	r3, r0
 8004908:	4293      	cmp	r3, r2
 800490a:	d100      	bne.n	800490e <memset+0xa>
 800490c:	4770      	bx	lr
 800490e:	f803 1b01 	strb.w	r1, [r3], #1
 8004912:	e7f9      	b.n	8004908 <memset+0x4>

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	@ (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	@ (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	@ (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	@ (8004958 <__libc_init_array+0x44>)
 8004928:	f000 f818 	bl	800495c <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	08005d48 	.word	0x08005d48
 8004950:	08005d48 	.word	0x08005d48
 8004954:	08005d48 	.word	0x08005d48
 8004958:	08005d4c 	.word	0x08005d4c

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
